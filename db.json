{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/ArcApellago.jpg","path":"images/ArcApellago.jpg","modified":1,"renderable":0},{"_id":"source/images/ArcApellagoImGUI.png","path":"images/ArcApellagoImGUI.png","modified":1,"renderable":0},{"_id":"source/images/ChunkComponents.png","path":"images/ChunkComponents.png","modified":1,"renderable":0},{"_id":"source/images/ChunkLoadingDistances.png","path":"images/ChunkLoadingDistances.png","modified":1,"renderable":0},{"_id":"source/images/CubeMarchingLOD1.png","path":"images/CubeMarchingLOD1.png","modified":1,"renderable":0},{"_id":"source/images/CubeMarchingLOD2.png","path":"images/CubeMarchingLOD2.png","modified":1,"renderable":0},{"_id":"source/images/CubeMarchingLOD4.png","path":"images/CubeMarchingLOD4.png","modified":1,"renderable":0},{"_id":"source/images/CubeMarchingSculpting.webm","path":"images/CubeMarchingSculpting.webm","modified":1,"renderable":0},{"_id":"source/images/DeltaBlade2700.jpg","path":"images/DeltaBlade2700.jpg","modified":1,"renderable":0},{"_id":"source/images/EditorMode.webm","path":"images/EditorMode.webm","modified":1,"renderable":0},{"_id":"source/images/ImGUIStatsBlock.png","path":"images/ImGUIStatsBlock.png","modified":1,"renderable":0},{"_id":"source/images/ImGUIWindow.png","path":"images/ImGUIWindow.png","modified":1,"renderable":0},{"_id":"source/images/ImGUIWindowBlocks.png","path":"images/ImGUIWindowBlocks.png","modified":1,"renderable":0},{"_id":"source/images/ImGUIWindowSmall.png","path":"images/ImGUIWindowSmall.png","modified":1,"renderable":0},{"_id":"source/images/LODNoisySphere.png","path":"images/LODNoisySphere.png","modified":1,"renderable":0},{"_id":"source/images/LODSmoothSphere.png","path":"images/LODSmoothSphere.png","modified":1,"renderable":0},{"_id":"source/images/LazyLoad.png","path":"images/LazyLoad.png","modified":1,"renderable":0},{"_id":"source/images/MarchingCubesConfigs.png","path":"images/MarchingCubesConfigs.png","modified":1,"renderable":0},{"_id":"source/images/MarchingCubesDensityGradient.png","path":"images/MarchingCubesDensityGradient.png","modified":1,"renderable":0},{"_id":"source/images/MarchingCubesDensityGradientEnhanced.png","path":"images/MarchingCubesDensityGradientEnhanced.png","modified":1,"renderable":0},{"_id":"source/images/MarchingCubesInterpolation.png","path":"images/MarchingCubesInterpolation.png","modified":1,"renderable":0},{"_id":"source/images/MarchingExample.png","path":"images/MarchingExample.png","modified":1,"renderable":0},{"_id":"source/images/MarchingExampleSmooth.png","path":"images/MarchingExampleSmooth.png","modified":1,"renderable":0},{"_id":"source/images/TerrainChunkPriorityLoading.webm","path":"images/TerrainChunkPriorityLoading.webm","modified":1,"renderable":0},{"_id":"source/images/TerrainChunkPriorityLoadingUnloading.webm","path":"images/TerrainChunkPriorityLoadingUnloading.webm","modified":1,"renderable":0},{"_id":"source/images/TerrainManagerFlowChart.png","path":"images/TerrainManagerFlowChart.png","modified":1,"renderable":0},{"_id":"source/images/TerrainManagerFlowChartChunkLoader.png","path":"images/TerrainManagerFlowChartChunkLoader.png","modified":1,"renderable":0},{"_id":"source/images/TerrainManagerFlowChartRequestChunk.png","path":"images/TerrainManagerFlowChartRequestChunk.png","modified":1,"renderable":0},{"_id":"source/images/TerrainManagerFlowChartTerrainSerializer.png","path":"images/TerrainManagerFlowChartTerrainSerializer.png","modified":1,"renderable":0},{"_id":"source/images/TerrainManagerJobSystem.png","path":"images/TerrainManagerJobSystem.png","modified":1,"renderable":0},{"_id":"source/images/VoxelManipulation.webm","path":"images/VoxelManipulation.webm","modified":1,"renderable":0},{"_id":"source/images/VoxelTearing.png","path":"images/VoxelTearing.png","modified":1,"renderable":0},{"_id":"source/images/mvc.png","path":"images/mvc.png","modified":1,"renderable":0},{"_id":"source/images/AssetRegistry/Editor.gif","path":"images/AssetRegistry/Editor.gif","modified":1,"renderable":0},{"_id":"source/images/AssetRegistry/Editor.png","path":"images/AssetRegistry/Editor.png","modified":1,"renderable":0},{"_id":"source/images/AssetRegistry/Modals.gif","path":"images/AssetRegistry/Modals.gif","modified":1,"renderable":0},{"_id":"source/images/ModularImGUI/ArcApellagoImGUI.png","path":"images/ModularImGUI/ArcApellagoImGUI.png","modified":1,"renderable":0},{"_id":"source/images/ModularImGUI/ImGUIStatsBlock.png","path":"images/ModularImGUI/ImGUIStatsBlock.png","modified":1,"renderable":0},{"_id":"source/images/ModularImGUI/ImGUIWindow.png","path":"images/ModularImGUI/ImGUIWindow.png","modified":1,"renderable":0},{"_id":"source/images/ModularImGUI/ImGUIWindowBlocks.png","path":"images/ModularImGUI/ImGUIWindowBlocks.png","modified":1,"renderable":0},{"_id":"source/images/ModularImGUI/ImGUIWindowSmall.png","path":"images/ModularImGUI/ImGUIWindowSmall.png","modified":1,"renderable":0},{"_id":"source/images/Reflection-Serializer/CPPStruct.png","path":"images/Reflection-Serializer/CPPStruct.png","modified":1,"renderable":0},{"_id":"source/images/Reflection-Serializer/imgui_demo.webm","path":"images/Reflection-Serializer/imgui_demo.webm","modified":1,"renderable":0},{"_id":"source/images/Reflection-Serializer/serialize-after.png","path":"images/Reflection-Serializer/serialize-after.png","modified":1,"renderable":0},{"_id":"source/images/Reflection-Serializer/serialize_detail.png","path":"images/Reflection-Serializer/serialize_detail.png","modified":1,"renderable":0},{"_id":"source/images/Reflection-Serializer/serialize_new_plan.png","path":"images/Reflection-Serializer/serialize_new_plan.png","modified":1,"renderable":0},{"_id":"source/images/Reflection-Serializer/serializer_before.png","path":"images/Reflection-Serializer/serializer_before.png","modified":1,"renderable":0},{"_id":"source/images/Reflection-Serializer/serializermap.png","path":"images/Reflection-Serializer/serializermap.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/ArcApellago.jpg","path":"images/TerrainGeneration/ArcApellago.jpg","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/BreakingUpJobs.png","path":"images/TerrainGeneration/BreakingUpJobs.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/ChunkComponents.png","path":"images/TerrainGeneration/ChunkComponents.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/ChunkLoadingDistances.png","path":"images/TerrainGeneration/ChunkLoadingDistances.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/CrossFrameJobs.png","path":"images/TerrainGeneration/CrossFrameJobs.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/CubeMarchingLOD1.png","path":"images/TerrainGeneration/CubeMarchingLOD1.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/CubeMarchingLOD2.png","path":"images/TerrainGeneration/CubeMarchingLOD2.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/CubeMarchingLOD4.png","path":"images/TerrainGeneration/CubeMarchingLOD4.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/CubeMarchingSculpting.webm","path":"images/TerrainGeneration/CubeMarchingSculpting.webm","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/DeltaBlade2700.jpg","path":"images/TerrainGeneration/DeltaBlade2700.jpg","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/EditorMode.webm","path":"images/TerrainGeneration/EditorMode.webm","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/InitialChunkLoading.webm","path":"images/TerrainGeneration/InitialChunkLoading.webm","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/JobSystemOverload.png","path":"images/TerrainGeneration/JobSystemOverload.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/LODNoisySphere.png","path":"images/TerrainGeneration/LODNoisySphere.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/LODSmoothSphere.png","path":"images/TerrainGeneration/LODSmoothSphere.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/MarchingCubesConfigs.png","path":"images/TerrainGeneration/MarchingCubesConfigs.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/MarchingCubesDensityGradient.png","path":"images/TerrainGeneration/MarchingCubesDensityGradient.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/MarchingCubesDensityGradientEnhanced.png","path":"images/TerrainGeneration/MarchingCubesDensityGradientEnhanced.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/MarchingCubesInterpolation.png","path":"images/TerrainGeneration/MarchingCubesInterpolation.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/MarchingExample.png","path":"images/TerrainGeneration/MarchingExample.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/MarchingExampleSmooth.png","path":"images/TerrainGeneration/MarchingExampleSmooth.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/SingleFrameJobBurst.png","path":"images/TerrainGeneration/SingleFrameJobBurst.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/TerrainChunkPriorityLoading.webm","path":"images/TerrainGeneration/TerrainChunkPriorityLoading.webm","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/TerrainChunkPriorityLoadingUnloading.webm","path":"images/TerrainGeneration/TerrainChunkPriorityLoadingUnloading.webm","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/TerrainManagerFlowChart.png","path":"images/TerrainGeneration/TerrainManagerFlowChart.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/TerrainManagerFlowChartChunkLoader.png","path":"images/TerrainGeneration/TerrainManagerFlowChartChunkLoader.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/TerrainManagerFlowChartRequestChunk.png","path":"images/TerrainGeneration/TerrainManagerFlowChartRequestChunk.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/TerrainManagerFlowChartTerrainSerializer.png","path":"images/TerrainGeneration/TerrainManagerFlowChartTerrainSerializer.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/TerrainManagerJobSystem.png","path":"images/TerrainGeneration/TerrainManagerJobSystem.png","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/VoxelManipulation.webm","path":"images/TerrainGeneration/VoxelManipulation.webm","modified":1,"renderable":0},{"_id":"source/images/TerrainGeneration/VoxelTearing.png","path":"images/TerrainGeneration/VoxelTearing.png","modified":1,"renderable":0},{"_id":"themes/Alien/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/custom.styl","path":"css/custom.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/font.styl","path":"css/font.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/layout.styl","path":"css/layout.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/media.styl","path":"css/media.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/normalize.styl","path":"css/normalize.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/spectre-exp.min.css","path":"css/spectre-exp.min.css","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/spectre-icons.min.css","path":"css/spectre-icons.min.css","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/spectre.min.css","path":"css/spectre.min.css","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/variable.styl","path":"css/variable.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/js/debug.log","path":"js/debug.log","modified":1,"renderable":1},{"_id":"themes/Alien/source/js/mathjax2.7.5.js","path":"js/mathjax2.7.5.js","modified":1,"renderable":1},{"_id":"themes/Alien/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/Alien/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.json","path":"fonts/iconfont/iconfont.json","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/_amongus-mumble.md","hash":"1842cc462f42777dfe5b30335b91457613bf5359","modified":1634543779853},{"_id":"source/_posts/_copyMe.md","hash":"df7e6d5e1978be66f5ec0e766f6bfdf06dad36b6","modified":1634543779853},{"_id":"source/_posts/_hello-world.md","hash":"9fc6808d94792536b69cb629d2c533ec6f3e56df","modified":1634543779853},{"_id":"source/_posts/_regrets.md","hash":"19f85ac989179a059dbfb3b93cfbb8b78941a157","modified":1634543779853},{"_id":"source/_posts/asset-registry.md","hash":"63c7dffaa776311ec2c2bfc91b87022e708a9855","modified":1634543779853},{"_id":"source/_posts/blog.md","hash":"4a3c4a442243d75037ca3f137d3cec34e4e5c9f4","modified":1634543779853},{"_id":"source/_posts/modular-imgui.md","hash":"72157a5b7022b683ed8839ac246e72329147f6dd","modified":1634543779853},{"_id":"source/_posts/reflection-serializer.md","hash":"db8a04cd385e6fd5f39df198ec68f5308509e8b2","modified":1634543781749},{"_id":"source/_posts/terrain-generation.md","hash":"938dbe8be9d36110b69f0b5d55bc8d67c628caa4","modified":1634543779853},{"_id":"source/_posts/why_mvc.md","hash":"83b1e0e554fc6b620a11fa7a652e8f9eada8c58e","modified":1634543779853},{"_id":"source/images/ArcApellago.jpg","hash":"8806cf1bfaae21937138e40597dc064824738f7f","modified":1634543781713},{"_id":"source/images/ChunkComponents.png","hash":"8746577879c40dffe933f4b2df5747c159ad76e3","modified":1634543781713},{"_id":"source/images/ChunkLoadingDistances.png","hash":"b036ca690211b6f09ca4dbabd917b27c33844c5c","modified":1634543781713},{"_id":"source/images/CubeMarchingLOD1.png","hash":"0df67d18bb220a405d546680ad468aa81d15b7e6","modified":1634543781713},{"_id":"source/images/CubeMarchingLOD2.png","hash":"c52e5aa63733f0fba9cd3290acfdf63aa87c6e7d","modified":1634543781713},{"_id":"source/images/CubeMarchingLOD4.png","hash":"43bd4f61010c74d09bb17ac60c51496cc136f4a7","modified":1634543781713},{"_id":"source/images/DeltaBlade2700.jpg","hash":"828814b19b50d3d751e40a0be5fc5e26663a24c0","modified":1634543781717},{"_id":"source/images/ImGUIStatsBlock.png","hash":"e44ae41ef866e58185b68efd45a54fa99b03e3c7","modified":1634543781717},{"_id":"source/images/ImGUIWindow.png","hash":"8629781e04a2bee8bc0208c8d6a4540b8bdf8c24","modified":1634543781717},{"_id":"source/images/ImGUIWindowBlocks.png","hash":"faf849e86c6767fc6bf7e4d5c529e0edafd4b0c6","modified":1634543781717},{"_id":"source/images/ImGUIWindowSmall.png","hash":"9e1ba31eb6950b01a14e0276bc5683d335c36006","modified":1634543781717},{"_id":"source/images/LazyLoad.png","hash":"42debc6a2a255cbeb22bf6b4963906129c577626","modified":1634543779865},{"_id":"source/images/MarchingCubesInterpolation.png","hash":"80d328c70d51b64ae1f5a624f7f69e664cac9f9c","modified":1634543781721},{"_id":"source/images/TerrainManagerFlowChartChunkLoader.png","hash":"89fa2c72bf3a41ab24117b353b49db0e2fa7595a","modified":1634543781729},{"_id":"source/images/TerrainManagerFlowChartRequestChunk.png","hash":"170b12ee510bec311b7ae752553b9b88e5c8ec8f","modified":1634543781729},{"_id":"source/images/TerrainManagerFlowChartTerrainSerializer.png","hash":"978306b982113ffada9e2b158384eda6f50d47ee","modified":1634543781729},{"_id":"source/images/mvc.png","hash":"140b05c570ad102d21138d020e2b9c15d8d53335","modified":1634543779905},{"_id":"source/tags/index.md","hash":"a8a54d146f97a141d651e856eea76fa870db619a","modified":1634543781733},{"_id":"source/images/ModularImGUI/ImGUIWindowBlocks.png","hash":"faf849e86c6767fc6bf7e4d5c529e0edafd4b0c6","modified":1634543779869},{"_id":"source/images/ModularImGUI/ImGUIWindowSmall.png","hash":"9e1ba31eb6950b01a14e0276bc5683d335c36006","modified":1634543779869},{"_id":"source/images/Reflection-Serializer/CPPStruct.png","hash":"060f7e667d3c74fe7fe66acaad490434d130635b","modified":1634543779869},{"_id":"source/images/Reflection-Serializer/serialize-after.png","hash":"9de86b05c2bccba4028a26ce9ed1b1d46878ac3c","modified":1634543779873},{"_id":"source/images/Reflection-Serializer/serialize_new_plan.png","hash":"d85d3684c78be27d9181868cececfb0da2295237","modified":1634543779873},{"_id":"source/images/Reflection-Serializer/serializer_before.png","hash":"f0e9c6aa51c2acdf1dc753425262840e4eddf6ff","modified":1634543779873},{"_id":"source/images/Reflection-Serializer/serializermap.png","hash":"72589dde264ed1506ae2f6d2c0f7b6ed2c6341ac","modified":1634543779873},{"_id":"source/images/TerrainGeneration/ArcApellago.jpg","hash":"8806cf1bfaae21937138e40597dc064824738f7f","modified":1634543779877},{"_id":"source/images/TerrainGeneration/BreakingUpJobs.png","hash":"fe1479cdcc6ae5602fcdd1016aa905c390ec5e43","modified":1634543779881},{"_id":"source/images/TerrainGeneration/ChunkComponents.png","hash":"8746577879c40dffe933f4b2df5747c159ad76e3","modified":1634543779881},{"_id":"source/images/TerrainGeneration/ChunkLoadingDistances.png","hash":"b036ca690211b6f09ca4dbabd917b27c33844c5c","modified":1634543779881},{"_id":"source/images/TerrainGeneration/CrossFrameJobs.png","hash":"3a5b479ee7ea9f40558becc8278f639e2e6a8930","modified":1634543779881},{"_id":"source/images/TerrainGeneration/CubeMarchingLOD1.png","hash":"0df67d18bb220a405d546680ad468aa81d15b7e6","modified":1634543779881},{"_id":"source/images/TerrainGeneration/CubeMarchingLOD2.png","hash":"c52e5aa63733f0fba9cd3290acfdf63aa87c6e7d","modified":1634543779881},{"_id":"source/images/TerrainGeneration/CubeMarchingLOD4.png","hash":"43bd4f61010c74d09bb17ac60c51496cc136f4a7","modified":1634543779881},{"_id":"source/images/TerrainGeneration/DeltaBlade2700.jpg","hash":"828814b19b50d3d751e40a0be5fc5e26663a24c0","modified":1634543779881},{"_id":"source/images/TerrainGeneration/MarchingCubesInterpolation.png","hash":"80d328c70d51b64ae1f5a624f7f69e664cac9f9c","modified":1634543779889},{"_id":"source/images/TerrainGeneration/SingleFrameJobBurst.png","hash":"f0c94e4e9ca31a1a920da96f6819efa2984dee8d","modified":1634543779889},{"_id":"source/images/TerrainGeneration/TerrainManagerFlowChartChunkLoader.png","hash":"89fa2c72bf3a41ab24117b353b49db0e2fa7595a","modified":1634543779893},{"_id":"source/images/TerrainGeneration/TerrainManagerFlowChartRequestChunk.png","hash":"170b12ee510bec311b7ae752553b9b88e5c8ec8f","modified":1634543779893},{"_id":"source/images/TerrainGeneration/TerrainManagerFlowChartTerrainSerializer.png","hash":"978306b982113ffada9e2b158384eda6f50d47ee","modified":1634543779893},{"_id":"source/images/LODSmoothSphere.png","hash":"e1cf16f88bca167c2b936ebc89a629b5436277cf","modified":1634543781717},{"_id":"source/images/MarchingCubesDensityGradient.png","hash":"f783dfdbc33f77d7200a06a29691e8878f947e5a","modified":1634543781721},{"_id":"source/images/MarchingCubesDensityGradientEnhanced.png","hash":"a8bd1fd69390b0cc11cecd2ef497432f563e98f6","modified":1634543781721},{"_id":"source/images/MarchingExampleSmooth.png","hash":"22bf57f76f4d04e7c0440b7a35417d63ea85b5bf","modified":1634543781721},{"_id":"source/images/TerrainManagerFlowChart.png","hash":"0e1b5a8a7364f11598b2cc10c63751c38d2ccb50","modified":1634543781729},{"_id":"source/images/VoxelTearing.png","hash":"f059fc36f912bf20792c10bdce35d2697a3567f7","modified":1634543781733},{"_id":"source/images/ModularImGUI/ImGUIWindow.png","hash":"8629781e04a2bee8bc0208c8d6a4540b8bdf8c24","modified":1634543779869},{"_id":"source/images/ModularImGUI/ImGUIStatsBlock.png","hash":"e44ae41ef866e58185b68efd45a54fa99b03e3c7","modified":1634543779869},{"_id":"source/images/TerrainGeneration/JobSystemOverload.png","hash":"c68f65ba28571fd680d7f00cb38341fe03245b90","modified":1634543779885},{"_id":"source/images/TerrainGeneration/LODSmoothSphere.png","hash":"e1cf16f88bca167c2b936ebc89a629b5436277cf","modified":1634543779885},{"_id":"source/images/TerrainGeneration/MarchingCubesDensityGradient.png","hash":"f783dfdbc33f77d7200a06a29691e8878f947e5a","modified":1634543779885},{"_id":"source/images/TerrainGeneration/MarchingCubesDensityGradientEnhanced.png","hash":"a8bd1fd69390b0cc11cecd2ef497432f563e98f6","modified":1634543779889},{"_id":"source/images/TerrainGeneration/MarchingExampleSmooth.png","hash":"22bf57f76f4d04e7c0440b7a35417d63ea85b5bf","modified":1634543779889},{"_id":"source/images/TerrainGeneration/TerrainManagerFlowChart.png","hash":"0e1b5a8a7364f11598b2cc10c63751c38d2ccb50","modified":1634543779893},{"_id":"source/images/TerrainGeneration/VoxelTearing.png","hash":"f059fc36f912bf20792c10bdce35d2697a3567f7","modified":1634543779897},{"_id":"source/images/LODNoisySphere.png","hash":"fa2667f47ed1ecf1da8de0d8ae0b81a9cd12d241","modified":1634543781717},{"_id":"source/images/MarchingCubesConfigs.png","hash":"cd24f63593bd4fa91a3328ab9e25faaf5a7aeccd","modified":1634543781721},{"_id":"source/images/MarchingExample.png","hash":"f3778c6da30276c650419daa20d9a81e7d3df69a","modified":1634543781721},{"_id":"source/images/AssetRegistry/Editor.png","hash":"ed330b8e39a267108187a35d417de7d59e84ca4a","modified":1634543779857},{"_id":"source/images/TerrainGeneration/LODNoisySphere.png","hash":"fa2667f47ed1ecf1da8de0d8ae0b81a9cd12d241","modified":1634543779885},{"_id":"source/images/TerrainGeneration/MarchingCubesConfigs.png","hash":"cd24f63593bd4fa91a3328ab9e25faaf5a7aeccd","modified":1634543779885},{"_id":"source/images/TerrainGeneration/MarchingExample.png","hash":"f3778c6da30276c650419daa20d9a81e7d3df69a","modified":1634543779889},{"_id":"source/images/CubeMarchingSculpting.webm","hash":"f9a406560a5f3f8809ab8916aaffc9a6fa393853","modified":1634543781717},{"_id":"source/images/TerrainManagerJobSystem.png","hash":"8c6ce722c252f802e73a0428ffca4080f7e87f51","modified":1634543781729},{"_id":"source/images/TerrainGeneration/CubeMarchingSculpting.webm","hash":"f9a406560a5f3f8809ab8916aaffc9a6fa393853","modified":1634543779881},{"_id":"source/images/TerrainGeneration/TerrainManagerJobSystem.png","hash":"8c6ce722c252f802e73a0428ffca4080f7e87f51","modified":1634543779893},{"_id":"source/images/TerrainGeneration/InitialChunkLoading.webm","hash":"9973b8fb314042985dfa4487c93f3ec8fe132fe5","modified":1634543779885},{"_id":"source/images/Reflection-Serializer/serialize_detail.png","hash":"e3dd27ba46c322e473544be0b1179d89c970a759","modified":1634543779873},{"_id":"source/images/TerrainGeneration/EditorMode.webm","hash":"28b2a904175e889baafd4f5fe5e0d488f6f8dee2","modified":1634543779881},{"_id":"source/images/EditorMode.webm","hash":"28b2a904175e889baafd4f5fe5e0d488f6f8dee2","modified":1634543781717},{"_id":"source/images/VoxelManipulation.webm","hash":"6754a81cbe85de5b0125c7b7a49fd4dc79a3ae1a","modified":1634543781733},{"_id":"source/images/AssetRegistry/Editor.gif","hash":"2976da7aed0ee4b2f13a6cfad20df1cfc6feb769","modified":1634543779857},{"_id":"themes/Alien/ChangeLogs.md","hash":"82786c20871dd56447d872db9c16bd14b0cf01b8","modified":1634543779905},{"_id":"themes/Alien/LICENSE.md","hash":"9911bdafa287bd65a822f84cc12012980bd10247","modified":1634543779905},{"_id":"themes/Alien/README-CN.md","hash":"af0765f26b72d49f1b29afe1a9d0c4a492912aaa","modified":1634543779905},{"_id":"themes/Alien/README.md","hash":"e0bd27664e1d0b4ed1c8101d2bf69886c66c31d9","modified":1634543779905},{"_id":"themes/Alien/_config.yml","hash":"12378a29d5b6e329ea1f91d4852e26d5f88ddd1f","modified":1634543779905},{"_id":"themes/Alien/debug.log","hash":"41c0eac9f5c7ea5bb11b46e85efe47dae3d5f591","modified":1634543779905},{"_id":"themes/Alien/package.json","hash":"8b4072879307eed0e74ae35390825c5e03b9229c","modified":1634543779905},{"_id":"themes/Alien/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1634543779905},{"_id":"themes/Alien/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1634543779905},{"_id":"themes/Alien/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1634543779905},{"_id":"themes/Alien/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1634543779905},{"_id":"themes/Alien/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1634543779905},{"_id":"themes/Alien/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1634543779905},{"_id":"themes/Alien/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1634543779905},{"_id":"themes/Alien/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1634543779905},{"_id":"themes/Alien/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1634543779905},{"_id":"themes/Alien/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1634543779905},{"_id":"themes/Alien/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1634543779905},{"_id":"themes/Alien/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1634543779905},{"_id":"themes/Alien/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1634543779905},{"_id":"themes/Alien/layout/debug.log","hash":"ec40983af6bcc6210dcb91b5c24866dc7b9ecd03","modified":1634543779905},{"_id":"themes/Alien/layout/index.ejs","hash":"b3344720176ad12dc88745cc5b31d497356ca4fa","modified":1634543779905},{"_id":"themes/Alien/layout/layout.ejs","hash":"c1b70f240352304fd8472fac4c6cfbe3f11ebd64","modified":1634543779905},{"_id":"themes/Alien/layout/page.ejs","hash":"3179c527694a789760742e1923c7ac5f94b4997c","modified":1634543779905},{"_id":"themes/Alien/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1634543779905},{"_id":"themes/Alien/layout/tag.ejs","hash":"662f4f3844e392f1d7ded274b79964e3fc08eeea","modified":1634543779905},{"_id":"themes/Alien/scripts/imageTag.js","hash":"4b69804c1e4bf638eda7022499c440ce24e28587","modified":1634543779905},{"_id":"themes/Alien/source/favicon.ico","hash":"d686f9285ef682640bfce8ad2a891ef978814096","modified":1634543779909},{"_id":"themes/Alien/layout/_page/archive.ejs","hash":"557ee19d7cf80e35451a9262ded55d372673e21a","modified":1634543779905},{"_id":"themes/Alien/layout/_page/debug.log","hash":"a5479697e97575385df66c73707d8535c65ed416","modified":1634543779905},{"_id":"themes/Alien/layout/_page/page.ejs","hash":"1d875d59cf4d6b681cc8cf755f19b5355e5d1144","modified":1634543779905},{"_id":"themes/Alien/layout/_page/post.ejs","hash":"4ea61c7aec6452f4a75aaba755cc4df098fea775","modified":1634543779905},{"_id":"themes/Alien/layout/_page/profile.ejs","hash":"d2d357feb1b8a3a1b9f6a3be6a454e1b37104fdc","modified":1634543779905},{"_id":"themes/Alien/layout/_page/tag.ejs","hash":"d7e0389b0ca8309b36bcc94edc74106033e45c3d","modified":1634543779905},{"_id":"themes/Alien/layout/_partial/debug.log","hash":"93f9f3599826abe3d553c9c7019b68746bce801b","modified":1634543779905},{"_id":"themes/Alien/layout/_partial/footer.ejs","hash":"150cb8ec7dc3614724f612f914fd2027716cb335","modified":1634543779905},{"_id":"themes/Alien/layout/_partial/head.ejs","hash":"22db880af818bf7897b99b9c0a7f44d27b77e389","modified":1634543779905},{"_id":"themes/Alien/layout/_partial/header.ejs","hash":"d8883e67b2e064ca6a58845eb17cb80da387a00c","modified":1634543779905},{"_id":"themes/Alien/layout/_partial/paginator.ejs","hash":"ab59d5db77f2aa64dfe03656e72fd49702c62e23","modified":1634543779905},{"_id":"themes/Alien/layout/_partial/toc.ejs","hash":"10bb9c303c948f5615149981cd85cbbd3e7c781c","modified":1634543779905},{"_id":"themes/Alien/layout/_plugins/debug.log","hash":"588d6eba4fdfa0329f079ba188df303ef6e28f7b","modified":1634543779905},{"_id":"themes/Alien/layout/_plugins/mathjax.ejs","hash":"53f088fe44d51c4d9fb61aeac4c23b3cfcc19762","modified":1634543779905},{"_id":"themes/Alien/source/css/base.styl","hash":"7ea2db2c139a719bb7d3f3c5e182dd0e0d59e098","modified":1634543779909},{"_id":"themes/Alien/source/css/custom.styl","hash":"8f506154a2502fa69cd53010d84ceb1c98adfcf7","modified":1634543779909},{"_id":"themes/Alien/source/css/font.styl","hash":"8c1da30e223c0a3d7ef452abc9f0e4cc71dbc140","modified":1634543779909},{"_id":"themes/Alien/source/css/layout.styl","hash":"a563516d9cefddacd4b73ce44afb3610bb459743","modified":1634543779909},{"_id":"themes/Alien/source/css/media.styl","hash":"a54cea906db54ac4de0413ba44888612ebadc479","modified":1634543779909},{"_id":"themes/Alien/source/css/normalize.styl","hash":"bf094f93246c79ca7fe9ce5160ea1831ee72a1ff","modified":1634543779909},{"_id":"themes/Alien/source/css/spectre-exp.min.css","hash":"c6ee3f761820f3c48295a7f612d360091b1b5ee0","modified":1634543779909},{"_id":"themes/Alien/source/css/spectre-icons.min.css","hash":"cc340000ffa5de5dde825a9b2bfe5ece668f3808","modified":1634543779909},{"_id":"themes/Alien/source/css/spectre.min.css","hash":"810d3b7c257cd91e2eff74176aa0635f0abcc7ef","modified":1634543779909},{"_id":"themes/Alien/source/css/style.styl","hash":"99f9792c5a0bb7c1f549275107b947d2f55eaf00","modified":1634543779909},{"_id":"themes/Alien/source/css/variable.styl","hash":"940d58cd303b74eeb3d44773f4826984bda24770","modified":1634543779909},{"_id":"themes/Alien/source/js/debug.log","hash":"622bb8fb9744dc81e330b9a69b4d030ccd25be70","modified":1634543779977},{"_id":"themes/Alien/source/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1634543779977},{"_id":"themes/Alien/source/js/script.js","hash":"ab648e948f50abcbcdb1fe4dbd37e8b6cc5f3d81","modified":1634543779977},{"_id":"themes/Alien/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1634543779977},{"_id":"themes/Alien/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/pojoaque.styl","hash":"2601b4285803a7cea5ccded8d624ca95f80e3d88","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1634543779909},{"_id":"themes/Alien/source/css/_lib/looper.css","hash":"863144dc9af7c1e181670515bc85eaf768f4e287","modified":1634543779909},{"_id":"themes/Alien/source/css/_lib/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/archive.styl","hash":"b471fb4ebb344bd699a66027a0402216ac562c41","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/category.styl","hash":"cead361269616b7a6ddec3090d9fa34c3c6ac722","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/page.styl","hash":"34e33b52d2e046aa2f5494e81ff4ac2d5ca78058","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/profile.styl","hash":"5ef6d5a06132f26b7aa01b2fbf4bbfb8ee862b7b","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/tag.styl","hash":"55b220cc58011876fb3a470cd1fde8ed87c93079","modified":1634543779909},{"_id":"themes/Alien/source/css/_partial/footer.styl","hash":"4f58e607eaa59cda3b5a9fdb3404ffb75c4d1a03","modified":1634543779909},{"_id":"themes/Alien/source/css/_partial/header.styl","hash":"be70b4ab3bcc977f1055664899742804c716929d","modified":1634543779909},{"_id":"themes/Alien/source/css/_partial/paginator.styl","hash":"b4f4a5180c4cbc70d186792b8a1fd0f5855bd86a","modified":1634543779909},{"_id":"themes/Alien/source/fonts/iconfont/demo.css","hash":"10692bf5656e109ce1597704dc8d5644ff24d73f","modified":1634543779909},{"_id":"themes/Alien/source/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1634543779909},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1634543779909},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1634543779909},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1634543779909},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.json","hash":"eae94b803d34035008842855d0bead92d2035281","modified":1634543779909},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1634543779909},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1634543779909},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1634543779909},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/_post/post_code.styl","hash":"cad863ccc368947412079a7007d69c02a66c6248","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/_post/post_content.styl","hash":"2f43f04dd027b7dcc390f6407abb383f4b520a58","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/_post/post_copyright.styl","hash":"64fd9f07ed45f035057d46740af0db70218714aa","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/_post/post_header.styl","hash":"296b27513f1a6d02cd49314d414622c028a5518a","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/_post/post_nav.styl","hash":"03accaba13c995cbe65a05a88549ff74e992eb3f","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/_post/post_tags.styl","hash":"2ff93677aa4d81da83c659b4dd4e3cb482d9ce7d","modified":1634543779909},{"_id":"themes/Alien/source/css/_page/_post/post_toc.styl","hash":"1b3f4777817aee2ecd2b03737ccaaa7e154f88a5","modified":1634543779909},{"_id":"themes/Alien/source/css/_highlight/highlightjs.styl","hash":"f94bf436afa521e89b21c6fcdd4125a0030923be","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1634543779905},{"_id":"themes/Alien/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1634543779905},{"_id":"source/images/TerrainGeneration/VoxelManipulation.webm","hash":"6754a81cbe85de5b0125c7b7a49fd4dc79a3ae1a","modified":1634543779897},{"_id":"source/images/ArcApellagoImGUI.png","hash":"0d5da8340bd78199449bd09a91c5de8bdd08d484","modified":1634543781713},{"_id":"source/images/TerrainChunkPriorityLoadingUnloading.webm","hash":"5135151af267dc7def71707c7879f54f409f931d","modified":1634543781729},{"_id":"source/images/Reflection-Serializer/imgui_demo.webm","hash":"6f86b88cae6290552bd37cff236161c002f37a6d","modified":1634543779873},{"_id":"source/images/TerrainGeneration/TerrainChunkPriorityLoadingUnloading.webm","hash":"5135151af267dc7def71707c7879f54f409f931d","modified":1634543779893},{"_id":"source/images/ModularImGUI/ArcApellagoImGUI.png","hash":"0d5da8340bd78199449bd09a91c5de8bdd08d484","modified":1634543779869},{"_id":"source/images/AssetRegistry/Modals.gif","hash":"52e3c91132135eb9711b98c8e41e83ec3b38a569","modified":1634543779861},{"_id":"source/images/TerrainChunkPriorityLoading.webm","hash":"15761d31e08e2d31ddb85e1d88e175c165605624","modified":1634543781725},{"_id":"source/images/TerrainGeneration/TerrainChunkPriorityLoading.webm","hash":"15761d31e08e2d31ddb85e1d88e175c165605624","modified":1634543779889},{"_id":"themes/Alien/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1634543779977},{"_id":"themes/Alien/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1634543779977},{"_id":"themes/Alien/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1634543779945},{"_id":"themes/Alien/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1634543779929},{"_id":"themes/Alien/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1634543779973},{"_id":"public/fonts/iconfont/demo_index.html","hash":"a54c78164b9403c10311ddf4bb667881066ab631","modified":1634543789977},{"_id":"public/tags/index.html","hash":"d0ae8e77f13a32216e8609d726e839152e875f49","modified":1634543789977},{"_id":"public/asset-registry/index.html","hash":"d5ba421d7bb8e7e35aca37ae06f94285c0d142b0","modified":1634543789977},{"_id":"public/reflection-serializer/index.html","hash":"0309debf789cfb607c3bcea48a2d403c97c7a897","modified":1634543789977},{"_id":"public/why_mvc/index.html","hash":"3afde75c00bbc11d45eb69e9eec77124cb4f8ca8","modified":1634543789977},{"_id":"public/modular-imgui/index.html","hash":"e90b24ab2eda249bfff64992d481ad6e493b6943","modified":1634543789977},{"_id":"public/terrain-generation/index.html","hash":"ee206bd36bcdcc373c61e9ef4c20c2d6bf9b8c33","modified":1634543789977},{"_id":"public/blog/index.html","hash":"32f06b5eb1221e06999254c3c0b5b2cc58053fa8","modified":1634543789977},{"_id":"public/archives/index.html","hash":"275caba698447603971b0387c04347961baa4812","modified":1634543789977},{"_id":"public/archives/2020/index.html","hash":"f94d4b87a3dc1a68ac946edebe1b2b0403bb2e91","modified":1634543789977},{"_id":"public/archives/2020/11/index.html","hash":"7f4d5fbeceff807bbd7de76bed8c804dcc0c5fa5","modified":1634543789977},{"_id":"public/archives/2021/index.html","hash":"1332aa081e8ade0ea2521ebb0bf55fd2cc9b43fd","modified":1634543789977},{"_id":"public/archives/2021/01/index.html","hash":"1f25205d72533f607153c95fd34e52dcd48f0a05","modified":1634543789977},{"_id":"public/archives/2021/10/index.html","hash":"c5304f3e8ed170a64faefab80764b60193071d1e","modified":1634543789977},{"_id":"public/authors/Jordan Hoffmann/index.html","hash":"debc74824efcc974b509278f2cbb7cdaca6ee8f4","modified":1634543789977},{"_id":"public/authors/Calin Gavriliuc/index.html","hash":"18daa2c7a33e992e23f5ae4fbeab11d597b91b3a","modified":1634543789977},{"_id":"public/authors/Roland Shum/index.html","hash":"f5db0c14096df19bfea0c447283c76ae4b83467a","modified":1634543789977},{"_id":"public/authors/Jonathan Bourim, Calin Gavriliuc/index.html","hash":"58813ac10f7c53c8b6f5f5f6073c3f09e96a6746","modified":1634543789977},{"_id":"public/index.html","hash":"5a71caf99b8ce6676da8edf24c3aec47a05f056c","modified":1634543789977},{"_id":"public/tags/GameDev/index.html","hash":"e8fbdabf96392012b8559332eec0188d7940da5c","modified":1634543789977},{"_id":"public/tags/DeltaBlade2700/index.html","hash":"d67915d67a3dd9f831cabbd18dbe0dc78b47771c","modified":1634543789977},{"_id":"public/tags/Engine/index.html","hash":"22eea23658125f5627c3b3bde792dd9f75714093","modified":1634543789977},{"_id":"public/tags/Core/index.html","hash":"b714d751d753abbbfe2e3c8058b0794bc6176d91","modified":1634543789977},{"_id":"public/tags/ImGUI/index.html","hash":"db6fb51185d1d5a7524788cf7e09093bcc6c551f","modified":1634543789977},{"_id":"public/tags/UI/index.html","hash":"7c4a13d52df781291ba392c90d83643484795761","modified":1634543789977},{"_id":"public/tags/Unity/index.html","hash":"1e82b8a9ab5ac7b0d05307aa68d0be150226c44c","modified":1634543789977},{"_id":"public/tags/C/index.html","hash":"138c2a8bc09f2909301da5ffc0054d7291a2cd77","modified":1634543789977},{"_id":"public/tags/GameEngine/index.html","hash":"1c4c894b268dbfba030fbf8de4fc7d238c3d3d26","modified":1634543789977},{"_id":"public/images/ArcApellago.jpg","hash":"8806cf1bfaae21937138e40597dc064824738f7f","modified":1634543789977},{"_id":"public/images/ChunkComponents.png","hash":"8746577879c40dffe933f4b2df5747c159ad76e3","modified":1634543789977},{"_id":"public/images/ChunkLoadingDistances.png","hash":"b036ca690211b6f09ca4dbabd917b27c33844c5c","modified":1634543789977},{"_id":"public/images/CubeMarchingLOD1.png","hash":"0df67d18bb220a405d546680ad468aa81d15b7e6","modified":1634543789977},{"_id":"public/images/CubeMarchingLOD2.png","hash":"c52e5aa63733f0fba9cd3290acfdf63aa87c6e7d","modified":1634543789977},{"_id":"public/images/CubeMarchingLOD4.png","hash":"43bd4f61010c74d09bb17ac60c51496cc136f4a7","modified":1634543789977},{"_id":"public/images/DeltaBlade2700.jpg","hash":"828814b19b50d3d751e40a0be5fc5e26663a24c0","modified":1634543789977},{"_id":"public/images/ImGUIStatsBlock.png","hash":"e44ae41ef866e58185b68efd45a54fa99b03e3c7","modified":1634543789977},{"_id":"public/images/ImGUIWindow.png","hash":"8629781e04a2bee8bc0208c8d6a4540b8bdf8c24","modified":1634543789977},{"_id":"public/images/ImGUIWindowBlocks.png","hash":"faf849e86c6767fc6bf7e4d5c529e0edafd4b0c6","modified":1634543789977},{"_id":"public/images/ImGUIWindowSmall.png","hash":"9e1ba31eb6950b01a14e0276bc5683d335c36006","modified":1634543789977},{"_id":"public/images/LazyLoad.png","hash":"42debc6a2a255cbeb22bf6b4963906129c577626","modified":1634543789977},{"_id":"public/images/MarchingCubesInterpolation.png","hash":"80d328c70d51b64ae1f5a624f7f69e664cac9f9c","modified":1634543789977},{"_id":"public/images/TerrainManagerFlowChartChunkLoader.png","hash":"89fa2c72bf3a41ab24117b353b49db0e2fa7595a","modified":1634543789977},{"_id":"public/images/TerrainManagerFlowChartRequestChunk.png","hash":"170b12ee510bec311b7ae752553b9b88e5c8ec8f","modified":1634543789977},{"_id":"public/images/TerrainManagerFlowChartTerrainSerializer.png","hash":"978306b982113ffada9e2b158384eda6f50d47ee","modified":1634543789977},{"_id":"public/images/mvc.png","hash":"140b05c570ad102d21138d020e2b9c15d8d53335","modified":1634543789977},{"_id":"public/images/ModularImGUI/ImGUIStatsBlock.png","hash":"e44ae41ef866e58185b68efd45a54fa99b03e3c7","modified":1634543789977},{"_id":"public/images/ModularImGUI/ImGUIWindow.png","hash":"8629781e04a2bee8bc0208c8d6a4540b8bdf8c24","modified":1634543789977},{"_id":"public/images/ModularImGUI/ImGUIWindowBlocks.png","hash":"faf849e86c6767fc6bf7e4d5c529e0edafd4b0c6","modified":1634543789977},{"_id":"public/images/ModularImGUI/ImGUIWindowSmall.png","hash":"9e1ba31eb6950b01a14e0276bc5683d335c36006","modified":1634543789977},{"_id":"public/images/Reflection-Serializer/CPPStruct.png","hash":"060f7e667d3c74fe7fe66acaad490434d130635b","modified":1634543789977},{"_id":"public/images/Reflection-Serializer/serialize-after.png","hash":"9de86b05c2bccba4028a26ce9ed1b1d46878ac3c","modified":1634543789977},{"_id":"public/images/Reflection-Serializer/serialize_new_plan.png","hash":"d85d3684c78be27d9181868cececfb0da2295237","modified":1634543789977},{"_id":"public/images/Reflection-Serializer/serializer_before.png","hash":"f0e9c6aa51c2acdf1dc753425262840e4eddf6ff","modified":1634543789977},{"_id":"public/images/Reflection-Serializer/serializermap.png","hash":"72589dde264ed1506ae2f6d2c0f7b6ed2c6341ac","modified":1634543789977},{"_id":"public/images/TerrainGeneration/ArcApellago.jpg","hash":"8806cf1bfaae21937138e40597dc064824738f7f","modified":1634543789977},{"_id":"public/images/TerrainGeneration/BreakingUpJobs.png","hash":"fe1479cdcc6ae5602fcdd1016aa905c390ec5e43","modified":1634543789977},{"_id":"public/images/TerrainGeneration/ChunkComponents.png","hash":"8746577879c40dffe933f4b2df5747c159ad76e3","modified":1634543789977},{"_id":"public/images/TerrainGeneration/ChunkLoadingDistances.png","hash":"b036ca690211b6f09ca4dbabd917b27c33844c5c","modified":1634543789977},{"_id":"public/images/TerrainGeneration/CrossFrameJobs.png","hash":"3a5b479ee7ea9f40558becc8278f639e2e6a8930","modified":1634543789977},{"_id":"public/images/TerrainGeneration/CubeMarchingLOD1.png","hash":"0df67d18bb220a405d546680ad468aa81d15b7e6","modified":1634543789977},{"_id":"public/images/TerrainGeneration/CubeMarchingLOD2.png","hash":"c52e5aa63733f0fba9cd3290acfdf63aa87c6e7d","modified":1634543789977},{"_id":"public/images/TerrainGeneration/CubeMarchingLOD4.png","hash":"43bd4f61010c74d09bb17ac60c51496cc136f4a7","modified":1634543789977},{"_id":"public/images/TerrainGeneration/DeltaBlade2700.jpg","hash":"828814b19b50d3d751e40a0be5fc5e26663a24c0","modified":1634543789977},{"_id":"public/images/TerrainGeneration/MarchingCubesInterpolation.png","hash":"80d328c70d51b64ae1f5a624f7f69e664cac9f9c","modified":1634543789977},{"_id":"public/images/TerrainGeneration/SingleFrameJobBurst.png","hash":"f0c94e4e9ca31a1a920da96f6819efa2984dee8d","modified":1634543789977},{"_id":"public/images/TerrainGeneration/TerrainManagerFlowChartChunkLoader.png","hash":"89fa2c72bf3a41ab24117b353b49db0e2fa7595a","modified":1634543789977},{"_id":"public/images/TerrainGeneration/TerrainManagerFlowChartRequestChunk.png","hash":"170b12ee510bec311b7ae752553b9b88e5c8ec8f","modified":1634543789977},{"_id":"public/images/TerrainGeneration/TerrainManagerFlowChartTerrainSerializer.png","hash":"978306b982113ffada9e2b158384eda6f50d47ee","modified":1634543789977},{"_id":"public/favicon.ico","hash":"d686f9285ef682640bfce8ad2a891ef978814096","modified":1634543789977},{"_id":"public/js/debug.log","hash":"622bb8fb9744dc81e330b9a69b4d030ccd25be70","modified":1634543789977},{"_id":"public/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1634543789977},{"_id":"public/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1634543789977},{"_id":"public/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1634543789977},{"_id":"public/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1634543789977},{"_id":"public/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1634543789977},{"_id":"public/images/LODSmoothSphere.png","hash":"e1cf16f88bca167c2b936ebc89a629b5436277cf","modified":1634543789977},{"_id":"public/images/MarchingCubesDensityGradient.png","hash":"f783dfdbc33f77d7200a06a29691e8878f947e5a","modified":1634543789977},{"_id":"public/images/MarchingCubesDensityGradientEnhanced.png","hash":"a8bd1fd69390b0cc11cecd2ef497432f563e98f6","modified":1634543789977},{"_id":"public/images/MarchingExampleSmooth.png","hash":"22bf57f76f4d04e7c0440b7a35417d63ea85b5bf","modified":1634543789977},{"_id":"public/images/TerrainManagerFlowChart.png","hash":"0e1b5a8a7364f11598b2cc10c63751c38d2ccb50","modified":1634543789977},{"_id":"public/images/VoxelTearing.png","hash":"f059fc36f912bf20792c10bdce35d2697a3567f7","modified":1634543789977},{"_id":"public/images/TerrainGeneration/JobSystemOverload.png","hash":"c68f65ba28571fd680d7f00cb38341fe03245b90","modified":1634543789977},{"_id":"public/images/TerrainGeneration/LODSmoothSphere.png","hash":"e1cf16f88bca167c2b936ebc89a629b5436277cf","modified":1634543789977},{"_id":"public/images/TerrainGeneration/MarchingCubesDensityGradient.png","hash":"f783dfdbc33f77d7200a06a29691e8878f947e5a","modified":1634543789977},{"_id":"public/images/TerrainGeneration/MarchingCubesDensityGradientEnhanced.png","hash":"a8bd1fd69390b0cc11cecd2ef497432f563e98f6","modified":1634543789977},{"_id":"public/images/TerrainGeneration/MarchingExampleSmooth.png","hash":"22bf57f76f4d04e7c0440b7a35417d63ea85b5bf","modified":1634543789977},{"_id":"public/images/TerrainGeneration/TerrainManagerFlowChart.png","hash":"0e1b5a8a7364f11598b2cc10c63751c38d2ccb50","modified":1634543789977},{"_id":"public/images/TerrainGeneration/VoxelTearing.png","hash":"f059fc36f912bf20792c10bdce35d2697a3567f7","modified":1634543789977},{"_id":"public/images/LODNoisySphere.png","hash":"fa2667f47ed1ecf1da8de0d8ae0b81a9cd12d241","modified":1634543789977},{"_id":"public/images/MarchingCubesConfigs.png","hash":"cd24f63593bd4fa91a3328ab9e25faaf5a7aeccd","modified":1634543789977},{"_id":"public/images/MarchingExample.png","hash":"f3778c6da30276c650419daa20d9a81e7d3df69a","modified":1634543789977},{"_id":"public/images/AssetRegistry/Editor.png","hash":"ed330b8e39a267108187a35d417de7d59e84ca4a","modified":1634543789977},{"_id":"public/images/TerrainGeneration/LODNoisySphere.png","hash":"fa2667f47ed1ecf1da8de0d8ae0b81a9cd12d241","modified":1634543789977},{"_id":"public/images/TerrainGeneration/MarchingCubesConfigs.png","hash":"cd24f63593bd4fa91a3328ab9e25faaf5a7aeccd","modified":1634543789977},{"_id":"public/images/TerrainGeneration/MarchingExample.png","hash":"f3778c6da30276c650419daa20d9a81e7d3df69a","modified":1634543789977},{"_id":"public/css/base.css","hash":"ea2d491ce6242c6b7087a2652a1135694c292137","modified":1634543789977},{"_id":"public/css/custom.css","hash":"cfb5898cd6562d778896a3cac9620f237962cb77","modified":1634543789977},{"_id":"public/css/font.css","hash":"87059edd1f2bfc4296f5599e73208893f2b06458","modified":1634543789977},{"_id":"public/css/layout.css","hash":"c81e2e01ff5e95a3e613064b8490045ff936c305","modified":1634543789977},{"_id":"public/css/media.css","hash":"5023ee404900a47d61ca0591b2d4e9eace0fe88e","modified":1634543789977},{"_id":"public/css/normalize.css","hash":"69dd446285143f5ce5ed61f5bd1e7928bca1907e","modified":1634543789977},{"_id":"public/css/spectre-icons.min.css","hash":"cc340000ffa5de5dde825a9b2bfe5ece668f3808","modified":1634543789977},{"_id":"public/css/variable.css","hash":"cb4180b3bbad471e30cf52ebb40e998d58a30d7d","modified":1634543789977},{"_id":"public/js/script.js","hash":"ab648e948f50abcbcdb1fe4dbd37e8b6cc5f3d81","modified":1634543789977},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1634543789977},{"_id":"public/fonts/iconfont/demo.css","hash":"10692bf5656e109ce1597704dc8d5644ff24d73f","modified":1634543789977},{"_id":"public/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1634543789977},{"_id":"public/fonts/iconfont/iconfont.json","hash":"3123aa840109e385d58a75d34e88a2d621e1ada8","modified":1634543789977},{"_id":"public/css/style.css","hash":"e85a2624c62b779b0f324f4624ab14c9acdeef38","modified":1634543789977},{"_id":"public/images/CubeMarchingSculpting.webm","hash":"f9a406560a5f3f8809ab8916aaffc9a6fa393853","modified":1634543789977},{"_id":"public/images/TerrainManagerJobSystem.png","hash":"8c6ce722c252f802e73a0428ffca4080f7e87f51","modified":1634543789977},{"_id":"public/images/TerrainGeneration/CubeMarchingSculpting.webm","hash":"f9a406560a5f3f8809ab8916aaffc9a6fa393853","modified":1634543789977},{"_id":"public/images/TerrainGeneration/TerrainManagerJobSystem.png","hash":"8c6ce722c252f802e73a0428ffca4080f7e87f51","modified":1634543789977},{"_id":"public/css/spectre-exp.min.css","hash":"c6ee3f761820f3c48295a7f612d360091b1b5ee0","modified":1634543789977},{"_id":"public/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1634543789977},{"_id":"public/images/AssetRegistry/Editor.gif","hash":"2976da7aed0ee4b2f13a6cfad20df1cfc6feb769","modified":1634543789977},{"_id":"public/images/Reflection-Serializer/serialize_detail.png","hash":"e3dd27ba46c322e473544be0b1179d89c970a759","modified":1634543789977},{"_id":"public/images/TerrainGeneration/InitialChunkLoading.webm","hash":"9973b8fb314042985dfa4487c93f3ec8fe132fe5","modified":1634543789977},{"_id":"public/css/spectre.min.css","hash":"810d3b7c257cd91e2eff74176aa0635f0abcc7ef","modified":1634543789977},{"_id":"public/images/EditorMode.webm","hash":"28b2a904175e889baafd4f5fe5e0d488f6f8dee2","modified":1634543789977},{"_id":"public/images/TerrainGeneration/EditorMode.webm","hash":"28b2a904175e889baafd4f5fe5e0d488f6f8dee2","modified":1634543789977},{"_id":"public/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1634543789977},{"_id":"public/images/VoxelManipulation.webm","hash":"6754a81cbe85de5b0125c7b7a49fd4dc79a3ae1a","modified":1634543789977},{"_id":"public/images/TerrainChunkPriorityLoadingUnloading.webm","hash":"5135151af267dc7def71707c7879f54f409f931d","modified":1634543789977},{"_id":"public/images/ModularImGUI/ArcApellagoImGUI.png","hash":"0d5da8340bd78199449bd09a91c5de8bdd08d484","modified":1634543789977},{"_id":"public/images/TerrainGeneration/VoxelManipulation.webm","hash":"6754a81cbe85de5b0125c7b7a49fd4dc79a3ae1a","modified":1634543789977},{"_id":"public/images/ArcApellagoImGUI.png","hash":"0d5da8340bd78199449bd09a91c5de8bdd08d484","modified":1634543789977},{"_id":"public/images/Reflection-Serializer/imgui_demo.webm","hash":"6f86b88cae6290552bd37cff236161c002f37a6d","modified":1634543789977},{"_id":"public/images/TerrainGeneration/TerrainChunkPriorityLoadingUnloading.webm","hash":"5135151af267dc7def71707c7879f54f409f931d","modified":1634543789977},{"_id":"public/images/TerrainChunkPriorityLoading.webm","hash":"15761d31e08e2d31ddb85e1d88e175c165605624","modified":1634543789977},{"_id":"public/images/TerrainGeneration/TerrainChunkPriorityLoading.webm","hash":"15761d31e08e2d31ddb85e1d88e175c165605624","modified":1634543789977},{"_id":"public/images/AssetRegistry/Modals.gif","hash":"52e3c91132135eb9711b98c8e41e83ec3b38a569","modified":1634543789977},{"_id":"public/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1634543789977},{"_id":"public/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1634543789977},{"_id":"public/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1634543789977},{"_id":"public/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1634543789977},{"_id":"public/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1634543789977}],"Category":[],"Data":[],"Page":[{"title":"Tags","layout":"tags","date":"2020-09-14T23:26:18.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\ndate: 2020-09-14 23:26:18\n---\n","updated":"2021-10-18T07:56:21.733Z","path":"tags/index.html","comments":1,"_id":"ckuwd64xt00000bqubksk8pko","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Implementing An Asset Registry","author":"Jordan Hoffmann","date":"2021-10-17T03:01:00.000Z","_content":"\n## Motive\n\nIf you've worked on a project without an asset registry, you've likely come across the following scenario: An asset is used in 6 places and it's path is hard-coded in all 6. On it's own, this isn't that big of a deal. Much like magic numbers, it will never pose a problem until you need to change them. At that point, however, you'll be stuck desperately trying to find and replace and hoping you don't cause collateral damage. This problem becomes exponentially more frequent if you have artists on your team. If you do, your asset names will quickly go from ``frog.png`` to ``frog_green.png`` to ``frog_green_new.png`` to ``frog_green_new_revised_final_last_draft.png``. As a result, it becomes necessary that the asset names in your code, are abstracted away from the literal filenames in the OS filesystem.\n\n---\n\n## Design Goals\n\nThe AssetRegistry exists to achieve the following system design goals:\n\n1. Serve as an added layer of abstraction above file paths\n    - enable easier asset directory refactors\n    - enable separated Asset and SaveData\n2. Provide an OS-agnostic interface\n    - support for Windows 64, Linux, and Horizon operating systems\n3. Encourage the use of [Packages](#Abstraction-Level-3-Packages) as a method to store relevant [Assets](bstraction-Level-2-Assets) as a collection where they're used most often\n4. Encourage the use of [Assets](#Abstraction-Level-2-Assets) as a method to [handle how file data is read, saved, and managed](#Additional-Feature-2-Asset-and-Package-inheritance) within the engine\n5. Keep files from being reread unnecessarily by storing their data in ram\n\n---\n\n## Abstractions\n\nThe following sub-sections are organized in layers of abstraction. I'll start with the most basic way to manage directories and each additional subsection will extend the functionality until we have a final product that meets all our [design goals](#Design-Goals).\n\n### Abstraction Level 1: INI file\n\nIn an effort to address [design goal 1](#Design-Goals), we can reference all assets by name and store the dictionary between name and path inside a separate file. This would look something like this:\n\n``ini file:``\n```ini\nfrog_texture = \"Assets/Images/Frog/frog_green.png\"\nbat_texture = \"Assets/Images/Bat/bat_texture_new.png\"\n\n...etc...\n```\n\n``c++ code:``\n```c++\nstd::unordered_map<std::string, std::string> Assets;\n\nvoid InitAssetRegistry()\n{\n    INIFile ini = INILoad(\"AssetRegistry.ini\");\n    for(const auto &asset : ini)\n    {\n        Assets[asset.key] = asset.value;\n    }\n}\n\n...\nvoid DoFroggyStuff()\n{\n    FILE* frog_img = fopen(Assets[\"frog_img\"]);\n    Render(frog_img);\n}\n```\n\n#### Pros\n\n1. Very easy. Provided you either write a basic ini parser or use an external library, you can have this method working in no time.\n2. When files are renamed or moved, you only need to modify the ini file\n\n### Abstraction Level 2: Assets\n\nIdeally Asset should be a c++ class. This way they can be extended in the future and can have more functionality than simple strings. for now we'll just make it a glorified ``std::string`` that stores the OS file path.\n\n#### Pros\n\n1. If implemented effectively, assets can be modified relatively easily in the future\n2. starts work towards [design goal 4](#Design-Goals)\n3. starts work towards [design goal 5](#Design-Goals)\n\n### Abstraction Level 3: Packages\n\nto address [design goal 3](#Design-Goals), let's create an object - call it ``Package`` - that stores a dictionary of assets. this way users can organize their assets in a meaningful way.\n\nin order to achieve this, we need to reflect the concept of packages in the ini file. For this we can use section headers:\n\n```ini\n[Textures]\nfrog = \"Assets/Images/Frog/frog_green.png\"\nbat = \"Assets/Images/Bat/bat_texture_new.png\"\n\n[Levels]\nlevel1 = \"Assets/level1.txt\"\nlevel2 = \"Assets/level2.txt\"\n```\n\n#### Pros\n\n1. If implemented effectively, packages can be modified relatively easily in the future\n2. names can be reused across packages.\n3. package names can give hints to their content's type so names like `frog_texture` can be reduced to `frog` in the package `textures`\n\n### Abstraction Level 4: Asset Registry System\n\nIf you were to implement all of the above abstractions with no changes, you'd end up with a Package class, an Asset class, and no where to store their instances. Abstraction Level 1 proposed the use of an unordered_map, but making this public and global would be unwise. There'd be no way to control how it's used and no way to switch it out with a different data structure. This abstraction level implements an Asset Registry namespace or singleton that provides the following interface.\n\n```c++\nvoid LoadRegistry();\n\nvoid SaveRegistry();\n\nstd::weak_ptr<Package> GetPackage(const std::string& packageName);\n\nstd::weak_ptr<Package> CreatePackage(const std::string& packageName);\n\nbool RemovePackage(const std::string& packageName);\n\nsize_t PackageCount();\n```\n\n#### Pros\n\n1. If implemented effectively, the back end can be modified relatively easily in the future\n2. the interface gives hints to the user how it's meant to be used reducing the need for excessive documentation\n3. any OS specific operations can be performed privately and the interface is maintained across the board. This fully meets [design goal 2](#Design-Goals)\n\n## Additional Features\n\nNow that we've built a full abstraction model, let's try to address some of the remaining issues by adding more features\n\n### Additional Feature 1: sub-packages\n\nIf you simply make packages capable of also storing references to other packages, they can act very similar to symbolic directories. Here's how that might look in the INI\n```ini\n[ClassicMode]\nSubPackage:Environment = _ClassicEnvironment\nSubPackage:Player = _ClassicPlayer\n\n[_ClassicEnvironment]\nSubPackage:Textures = _ClassicEnvironmentTextures\n\n[_ClassicEnvironmentTextures]\nAsset:Background = Assets/Game/Textures/Background/Background.png\nAsset:Boarder = Assets/Game/Textures/Background/Boarder.png\nAsset:BrokenCeiling = Assets/Game/Textures/Background/broken_ceiling.png\nAsset:DepthMap = Assets/Game/Textures/Background/FlippedDepthMap.png\nAsset:Tilemap = Assets/Game/Textures/Tilemap/tile_full_16_metal.png\nSubPackage:Particles = _ClassicEnvironmentParticles\n\n[_ClassicEnvironmentParticles]\nAsset:RainDrop = Assets/Game/Textures/Particles/rain_drop.png\nAsset:RainSplash = Assets/Game/Textures/Particles/rain_splash.png\nAsset:Fog = Assets/Game/Textures/Particles/fog.png\nAsset:Rocks = Assets/Game/Textures/Particles/rock_bits.png\n\n...etc...\n```\nUsing a flat format like this allows multiple packages to reference the same sub-package without having duplicate data. That way you can organize the data in multiple ways at the same time and use the organization that works best for the use case\n\n> Note: this is no longer a syntactically correct ini file because it uses both ':' and '='. [The library I'm using](https://github.com/pulzed/mINI) allows this but you may need to represent your data differently if you're using a different ini parser\n\n### Additional Feature 2: Asset and Package inheritance\n\nA big limitation we still have in the proposed system is that assets are still just file paths and there's no way to extend them to de-serialize the data properly and provide relevant methods. for example, an exe asset would ideally have a \"Execute\" method and a sprite asset would ideally store it's render data in ram after it's loaded. Thankfully c++ provides us with inheritance to solve this. We simply need to make our getters templates that cast to the requested type:\n\n```c++\ntemplate<typename PackageType = Package>\nstd::weak_ptr<PackageType> GetPackage(const std::string& packageName);\n\ntemplate<typename AssetType = Asset>\nstd::weak_ptr<AssetType> GetAsset(const std::string& assetName);\n```\n\nFor the DeltaBlade engine, we decided that real time type reflection was overkill so the assets are all stored internally as ``std::shared_ptr<Asset>``s and are simply replaced with the extended type when ``GetAsset`` is called. With proper runtime type reflection however, you could choose to serialize the type inside the ini file and then load the correct type at startup. This would allow for assets to be preloaded easier without having to know the type externally.\n\n### Additional Feature 3: Registry Paths\n\nThe Asset Registry introduces a concept known as Registry Paths. Similar to filesystem paths, this is a way to represent a series of packages, and sub-packages opened in order to retrieve an asset as a colon delineated string. if for example, your AssetRegistry.ini file looks something like this:\n\n```ini\n[UI]\nSubPackage:Textures = _UITextures\nSubPackage:Audio = _GAME_UI_Audio\n\n[_UITextures]\nAsset:MenuButton = Assets/Game/UI/Menu/button.png\nAsset:MenuBackground = Assets/Game/UI/Menu/background.png\n\n[_GAME_UI_Audio]\nAsset:MenuMusic = Assets/Game/Audio/menu_music.wav\nAsset:MenuButtonClick = Assets/Game/Audio/sfs/click.wav\n```\n\nthen retrieving the menu music could be done in any of the following ways:\n\n```c++\n// opening packages individually\nPackageHandle UI = AssetRegistry::GetPackageChecked(\"UI\").lock();\nPackageHandle UIAudio = UI->GetSubPackageChecked(\"Audio\").lock();\nstd::shared_ptr<AMusic> MenuMusic = UIAudio->GetAssetChecked<AMusic>(\"MenuMusic\").lock();\n```\n\n```c++\n// using registry paths\nstd::shared_ptr<AMusic> MenuMusic = AssetRegistry::GetAssetChecked<AMusic>(\"UI:Audio:MenuMusic\").lock();\n```\n\n```c++\n// using a hybrid\nPackageHandle UIAudio = AssetRegistry::GetPackageChecked(\"UI:Audio\").lock();\nstd::shared_ptr<AMusic> MenuMusic = UIAudio->GetAssetChecked<AMusic>(\"MenuMusic\").lock();\n```\n\nThis feature is purely syntactical but it speeds up development significantly and keeps packages from being a burden to use\n\n### Additional Feature 4: Editor\n\nYou've officially made it to the fun part. This is where the pretty pictures and gifs live! When developing the registry it became quickly apparent that the ini was going to blow up and become increasingly difficult to parse. To solve this, I wanted to allow users to modify it in a better environment than a text editor. Using ImGui I made the following tree based editor\n\n![Asset Registry Editor](/images/AssetRegistry/Editor.png)\n\nAs you can see, when changes are made in the editor, they're saved to the ini in real time.\n\n![Asset Registry Editor](/images/AssetRegistry/Editor.gif)\n\nThe editor supports\n\n- viewing the contents of packages\n- adding packages, sub-packages, or assets\n- removing packages, sub-packages or assets\n- copying the OS path of assets to the clipboard\n- copying the [registry path](#Additional-Feature-3-Registry-Paths) of assets and packages to the clipboard\n- copying the name of assets and packages to the clipboard\n\n\n### Additional Feature 5: Error Handling Modals\nI could've called this project complete at this point. I'd met all the [design goals](#Design-Goals), made a great editor, and provided several ways to access, read, and modify the data. What's important to remember however, is that I'm implementing this for humans. And humans are known for two things:\n\n1. They're lazy. They don't want to use a system if it's not stupid easy\n2. They're prone to mistakes. Even if they *know* not to rename files without modifying the ini, they're probably going to forget at some point.\n\nall decent systems have some form of error logging but all great systems can completely resolve the errors without crashing. I'm of course striving for greatness. Let's consider the worst case scenario:\n\n> A user renames a core file such as a default shader from 'Assets/Game/Shaders/forwardVert.glsl' to 'Assets/Game/Shaders/forwardVert_Renamed.glsl' and forgets to modify the ini\n\n\nWith the proposed system, the game would crash immediately. The best we could do is return nullptr or throw an exception and hope it's caught but realistically, what could the renderer possibly do? It can't render anything without a shader and there's no way for the renderer to find it.\n\nInstead, I have the registry ask the user and wait for their response. To do this, I had to create a completely separate application and launch it from the editor when there's a problem. This application simply walks the user through fixing their error and quietly resumes as if nothing happened\n\n![Asset Registry Modals](/images/AssetRegistry/Modals.gif)\n\nThe following errors are handled in this way:\n\n- A package was requested in code, but it's not in the AssetRegistry\n- An Asset was requested in code but it's not in the AssetRegistry\n- A sub-package was requested in code, but it's not in the AssetRegistry\n- An Asset was renamed but the ini wasn't modified to reflect the edit\n- An Asset was moved but the ini wasn't modified to reflect the edit\n\nThis feature becomes particularly powerful when you stop thinking of it as error handling, and instead think of it as a part of the pipeline. The previous pipeline was as follows:\n\n1. put file inside Assets directory\n2. modify ini file (either directly or by launching the editor and modifying it there)\n3. write code that uses the asset\n\nbut this isn't how most devs like to work. If you're like me, you'd much rather write the code first. After all, we want packages to reflect *how* the assets are used and that might not be clear until the code is written. By intentionally expecting an error from the registry though, we can write the code first and let the error handler do the rest:\n\n1. put file inside the Assets directory\n2. write code that uses the asset - making up names for the asset and it's package(s) on the spot\n3. launch the editor and get an error that the name doesn't exist\n4. link the asset using the modal\n5. continue testing the game/editor as normal\n\n---\n\n## Post Mortem\n\nTODO: I'll write my post mortem after at the end of the semester after we've used the asset registry more\n\n---\n\n## Useful Resources\n\nSimple Ini parsing library: [mIni](https://github.com/pulzed/mINI)\n\nBasic, cross platform ImGui interface that I used for the modals: [Hello, Dear ImGui](https://github.com/pthom/hello_imgui)\n\nHow Unreal Engine handles assets: [docs.unrealengine.com](https://docs.unrealengine.com/4.27/en-US/ProductionPipelines/AssetManagement/)\n","source":"_posts/asset-registry.md","raw":"---\ntitle: Implementing An Asset Registry\nauthor: Jordan Hoffmann\ntags: \n- GameDev\n- DeltaBlade2700\n- Engine\n- Core\ndate: 2021-10-17 03:01:00\n---\n\n## Motive\n\nIf you've worked on a project without an asset registry, you've likely come across the following scenario: An asset is used in 6 places and it's path is hard-coded in all 6. On it's own, this isn't that big of a deal. Much like magic numbers, it will never pose a problem until you need to change them. At that point, however, you'll be stuck desperately trying to find and replace and hoping you don't cause collateral damage. This problem becomes exponentially more frequent if you have artists on your team. If you do, your asset names will quickly go from ``frog.png`` to ``frog_green.png`` to ``frog_green_new.png`` to ``frog_green_new_revised_final_last_draft.png``. As a result, it becomes necessary that the asset names in your code, are abstracted away from the literal filenames in the OS filesystem.\n\n---\n\n## Design Goals\n\nThe AssetRegistry exists to achieve the following system design goals:\n\n1. Serve as an added layer of abstraction above file paths\n    - enable easier asset directory refactors\n    - enable separated Asset and SaveData\n2. Provide an OS-agnostic interface\n    - support for Windows 64, Linux, and Horizon operating systems\n3. Encourage the use of [Packages](#Abstraction-Level-3-Packages) as a method to store relevant [Assets](bstraction-Level-2-Assets) as a collection where they're used most often\n4. Encourage the use of [Assets](#Abstraction-Level-2-Assets) as a method to [handle how file data is read, saved, and managed](#Additional-Feature-2-Asset-and-Package-inheritance) within the engine\n5. Keep files from being reread unnecessarily by storing their data in ram\n\n---\n\n## Abstractions\n\nThe following sub-sections are organized in layers of abstraction. I'll start with the most basic way to manage directories and each additional subsection will extend the functionality until we have a final product that meets all our [design goals](#Design-Goals).\n\n### Abstraction Level 1: INI file\n\nIn an effort to address [design goal 1](#Design-Goals), we can reference all assets by name and store the dictionary between name and path inside a separate file. This would look something like this:\n\n``ini file:``\n```ini\nfrog_texture = \"Assets/Images/Frog/frog_green.png\"\nbat_texture = \"Assets/Images/Bat/bat_texture_new.png\"\n\n...etc...\n```\n\n``c++ code:``\n```c++\nstd::unordered_map<std::string, std::string> Assets;\n\nvoid InitAssetRegistry()\n{\n    INIFile ini = INILoad(\"AssetRegistry.ini\");\n    for(const auto &asset : ini)\n    {\n        Assets[asset.key] = asset.value;\n    }\n}\n\n...\nvoid DoFroggyStuff()\n{\n    FILE* frog_img = fopen(Assets[\"frog_img\"]);\n    Render(frog_img);\n}\n```\n\n#### Pros\n\n1. Very easy. Provided you either write a basic ini parser or use an external library, you can have this method working in no time.\n2. When files are renamed or moved, you only need to modify the ini file\n\n### Abstraction Level 2: Assets\n\nIdeally Asset should be a c++ class. This way they can be extended in the future and can have more functionality than simple strings. for now we'll just make it a glorified ``std::string`` that stores the OS file path.\n\n#### Pros\n\n1. If implemented effectively, assets can be modified relatively easily in the future\n2. starts work towards [design goal 4](#Design-Goals)\n3. starts work towards [design goal 5](#Design-Goals)\n\n### Abstraction Level 3: Packages\n\nto address [design goal 3](#Design-Goals), let's create an object - call it ``Package`` - that stores a dictionary of assets. this way users can organize their assets in a meaningful way.\n\nin order to achieve this, we need to reflect the concept of packages in the ini file. For this we can use section headers:\n\n```ini\n[Textures]\nfrog = \"Assets/Images/Frog/frog_green.png\"\nbat = \"Assets/Images/Bat/bat_texture_new.png\"\n\n[Levels]\nlevel1 = \"Assets/level1.txt\"\nlevel2 = \"Assets/level2.txt\"\n```\n\n#### Pros\n\n1. If implemented effectively, packages can be modified relatively easily in the future\n2. names can be reused across packages.\n3. package names can give hints to their content's type so names like `frog_texture` can be reduced to `frog` in the package `textures`\n\n### Abstraction Level 4: Asset Registry System\n\nIf you were to implement all of the above abstractions with no changes, you'd end up with a Package class, an Asset class, and no where to store their instances. Abstraction Level 1 proposed the use of an unordered_map, but making this public and global would be unwise. There'd be no way to control how it's used and no way to switch it out with a different data structure. This abstraction level implements an Asset Registry namespace or singleton that provides the following interface.\n\n```c++\nvoid LoadRegistry();\n\nvoid SaveRegistry();\n\nstd::weak_ptr<Package> GetPackage(const std::string& packageName);\n\nstd::weak_ptr<Package> CreatePackage(const std::string& packageName);\n\nbool RemovePackage(const std::string& packageName);\n\nsize_t PackageCount();\n```\n\n#### Pros\n\n1. If implemented effectively, the back end can be modified relatively easily in the future\n2. the interface gives hints to the user how it's meant to be used reducing the need for excessive documentation\n3. any OS specific operations can be performed privately and the interface is maintained across the board. This fully meets [design goal 2](#Design-Goals)\n\n## Additional Features\n\nNow that we've built a full abstraction model, let's try to address some of the remaining issues by adding more features\n\n### Additional Feature 1: sub-packages\n\nIf you simply make packages capable of also storing references to other packages, they can act very similar to symbolic directories. Here's how that might look in the INI\n```ini\n[ClassicMode]\nSubPackage:Environment = _ClassicEnvironment\nSubPackage:Player = _ClassicPlayer\n\n[_ClassicEnvironment]\nSubPackage:Textures = _ClassicEnvironmentTextures\n\n[_ClassicEnvironmentTextures]\nAsset:Background = Assets/Game/Textures/Background/Background.png\nAsset:Boarder = Assets/Game/Textures/Background/Boarder.png\nAsset:BrokenCeiling = Assets/Game/Textures/Background/broken_ceiling.png\nAsset:DepthMap = Assets/Game/Textures/Background/FlippedDepthMap.png\nAsset:Tilemap = Assets/Game/Textures/Tilemap/tile_full_16_metal.png\nSubPackage:Particles = _ClassicEnvironmentParticles\n\n[_ClassicEnvironmentParticles]\nAsset:RainDrop = Assets/Game/Textures/Particles/rain_drop.png\nAsset:RainSplash = Assets/Game/Textures/Particles/rain_splash.png\nAsset:Fog = Assets/Game/Textures/Particles/fog.png\nAsset:Rocks = Assets/Game/Textures/Particles/rock_bits.png\n\n...etc...\n```\nUsing a flat format like this allows multiple packages to reference the same sub-package without having duplicate data. That way you can organize the data in multiple ways at the same time and use the organization that works best for the use case\n\n> Note: this is no longer a syntactically correct ini file because it uses both ':' and '='. [The library I'm using](https://github.com/pulzed/mINI) allows this but you may need to represent your data differently if you're using a different ini parser\n\n### Additional Feature 2: Asset and Package inheritance\n\nA big limitation we still have in the proposed system is that assets are still just file paths and there's no way to extend them to de-serialize the data properly and provide relevant methods. for example, an exe asset would ideally have a \"Execute\" method and a sprite asset would ideally store it's render data in ram after it's loaded. Thankfully c++ provides us with inheritance to solve this. We simply need to make our getters templates that cast to the requested type:\n\n```c++\ntemplate<typename PackageType = Package>\nstd::weak_ptr<PackageType> GetPackage(const std::string& packageName);\n\ntemplate<typename AssetType = Asset>\nstd::weak_ptr<AssetType> GetAsset(const std::string& assetName);\n```\n\nFor the DeltaBlade engine, we decided that real time type reflection was overkill so the assets are all stored internally as ``std::shared_ptr<Asset>``s and are simply replaced with the extended type when ``GetAsset`` is called. With proper runtime type reflection however, you could choose to serialize the type inside the ini file and then load the correct type at startup. This would allow for assets to be preloaded easier without having to know the type externally.\n\n### Additional Feature 3: Registry Paths\n\nThe Asset Registry introduces a concept known as Registry Paths. Similar to filesystem paths, this is a way to represent a series of packages, and sub-packages opened in order to retrieve an asset as a colon delineated string. if for example, your AssetRegistry.ini file looks something like this:\n\n```ini\n[UI]\nSubPackage:Textures = _UITextures\nSubPackage:Audio = _GAME_UI_Audio\n\n[_UITextures]\nAsset:MenuButton = Assets/Game/UI/Menu/button.png\nAsset:MenuBackground = Assets/Game/UI/Menu/background.png\n\n[_GAME_UI_Audio]\nAsset:MenuMusic = Assets/Game/Audio/menu_music.wav\nAsset:MenuButtonClick = Assets/Game/Audio/sfs/click.wav\n```\n\nthen retrieving the menu music could be done in any of the following ways:\n\n```c++\n// opening packages individually\nPackageHandle UI = AssetRegistry::GetPackageChecked(\"UI\").lock();\nPackageHandle UIAudio = UI->GetSubPackageChecked(\"Audio\").lock();\nstd::shared_ptr<AMusic> MenuMusic = UIAudio->GetAssetChecked<AMusic>(\"MenuMusic\").lock();\n```\n\n```c++\n// using registry paths\nstd::shared_ptr<AMusic> MenuMusic = AssetRegistry::GetAssetChecked<AMusic>(\"UI:Audio:MenuMusic\").lock();\n```\n\n```c++\n// using a hybrid\nPackageHandle UIAudio = AssetRegistry::GetPackageChecked(\"UI:Audio\").lock();\nstd::shared_ptr<AMusic> MenuMusic = UIAudio->GetAssetChecked<AMusic>(\"MenuMusic\").lock();\n```\n\nThis feature is purely syntactical but it speeds up development significantly and keeps packages from being a burden to use\n\n### Additional Feature 4: Editor\n\nYou've officially made it to the fun part. This is where the pretty pictures and gifs live! When developing the registry it became quickly apparent that the ini was going to blow up and become increasingly difficult to parse. To solve this, I wanted to allow users to modify it in a better environment than a text editor. Using ImGui I made the following tree based editor\n\n![Asset Registry Editor](/images/AssetRegistry/Editor.png)\n\nAs you can see, when changes are made in the editor, they're saved to the ini in real time.\n\n![Asset Registry Editor](/images/AssetRegistry/Editor.gif)\n\nThe editor supports\n\n- viewing the contents of packages\n- adding packages, sub-packages, or assets\n- removing packages, sub-packages or assets\n- copying the OS path of assets to the clipboard\n- copying the [registry path](#Additional-Feature-3-Registry-Paths) of assets and packages to the clipboard\n- copying the name of assets and packages to the clipboard\n\n\n### Additional Feature 5: Error Handling Modals\nI could've called this project complete at this point. I'd met all the [design goals](#Design-Goals), made a great editor, and provided several ways to access, read, and modify the data. What's important to remember however, is that I'm implementing this for humans. And humans are known for two things:\n\n1. They're lazy. They don't want to use a system if it's not stupid easy\n2. They're prone to mistakes. Even if they *know* not to rename files without modifying the ini, they're probably going to forget at some point.\n\nall decent systems have some form of error logging but all great systems can completely resolve the errors without crashing. I'm of course striving for greatness. Let's consider the worst case scenario:\n\n> A user renames a core file such as a default shader from 'Assets/Game/Shaders/forwardVert.glsl' to 'Assets/Game/Shaders/forwardVert_Renamed.glsl' and forgets to modify the ini\n\n\nWith the proposed system, the game would crash immediately. The best we could do is return nullptr or throw an exception and hope it's caught but realistically, what could the renderer possibly do? It can't render anything without a shader and there's no way for the renderer to find it.\n\nInstead, I have the registry ask the user and wait for their response. To do this, I had to create a completely separate application and launch it from the editor when there's a problem. This application simply walks the user through fixing their error and quietly resumes as if nothing happened\n\n![Asset Registry Modals](/images/AssetRegistry/Modals.gif)\n\nThe following errors are handled in this way:\n\n- A package was requested in code, but it's not in the AssetRegistry\n- An Asset was requested in code but it's not in the AssetRegistry\n- A sub-package was requested in code, but it's not in the AssetRegistry\n- An Asset was renamed but the ini wasn't modified to reflect the edit\n- An Asset was moved but the ini wasn't modified to reflect the edit\n\nThis feature becomes particularly powerful when you stop thinking of it as error handling, and instead think of it as a part of the pipeline. The previous pipeline was as follows:\n\n1. put file inside Assets directory\n2. modify ini file (either directly or by launching the editor and modifying it there)\n3. write code that uses the asset\n\nbut this isn't how most devs like to work. If you're like me, you'd much rather write the code first. After all, we want packages to reflect *how* the assets are used and that might not be clear until the code is written. By intentionally expecting an error from the registry though, we can write the code first and let the error handler do the rest:\n\n1. put file inside the Assets directory\n2. write code that uses the asset - making up names for the asset and it's package(s) on the spot\n3. launch the editor and get an error that the name doesn't exist\n4. link the asset using the modal\n5. continue testing the game/editor as normal\n\n---\n\n## Post Mortem\n\nTODO: I'll write my post mortem after at the end of the semester after we've used the asset registry more\n\n---\n\n## Useful Resources\n\nSimple Ini parsing library: [mIni](https://github.com/pulzed/mINI)\n\nBasic, cross platform ImGui interface that I used for the modals: [Hello, Dear ImGui](https://github.com/pthom/hello_imgui)\n\nHow Unreal Engine handles assets: [docs.unrealengine.com](https://docs.unrealengine.com/4.27/en-US/ProductionPipelines/AssetManagement/)\n","slug":"asset-registry","published":1,"updated":"2021-10-18T07:56:19.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuwd64xy00010bqu8txocms6","content":"<h2 id=\"Motive\"><a href=\"#Motive\" class=\"headerlink\" title=\"Motive\"></a>Motive</h2><p>If you’ve worked on a project without an asset registry, you’ve likely come across the following scenario: An asset is used in 6 places and it’s path is hard-coded in all 6. On it’s own, this isn’t that big of a deal. Much like magic numbers, it will never pose a problem until you need to change them. At that point, however, you’ll be stuck desperately trying to find and replace and hoping you don’t cause collateral damage. This problem becomes exponentially more frequent if you have artists on your team. If you do, your asset names will quickly go from <code>frog.png</code> to <code>frog_green.png</code> to <code>frog_green_new.png</code> to <code>frog_green_new_revised_final_last_draft.png</code>. As a result, it becomes necessary that the asset names in your code, are abstracted away from the literal filenames in the OS filesystem.</p>\n<hr>\n<h2 id=\"Design-Goals\"><a href=\"#Design-Goals\" class=\"headerlink\" title=\"Design Goals\"></a>Design Goals</h2><p>The AssetRegistry exists to achieve the following system design goals:</p>\n<ol>\n<li>Serve as an added layer of abstraction above file paths<ul>\n<li>enable easier asset directory refactors</li>\n<li>enable separated Asset and SaveData</li>\n</ul>\n</li>\n<li>Provide an OS-agnostic interface<ul>\n<li>support for Windows 64, Linux, and Horizon operating systems</li>\n</ul>\n</li>\n<li>Encourage the use of <a href=\"#Abstraction-Level-3-Packages\">Packages</a> as a method to store relevant <a href=\"bstraction-Level-2-Assets\">Assets</a> as a collection where they’re used most often</li>\n<li>Encourage the use of <a href=\"#Abstraction-Level-2-Assets\">Assets</a> as a method to <a href=\"#Additional-Feature-2-Asset-and-Package-inheritance\">handle how file data is read, saved, and managed</a> within the engine</li>\n<li>Keep files from being reread unnecessarily by storing their data in ram</li>\n</ol>\n<hr>\n<h2 id=\"Abstractions\"><a href=\"#Abstractions\" class=\"headerlink\" title=\"Abstractions\"></a>Abstractions</h2><p>The following sub-sections are organized in layers of abstraction. I’ll start with the most basic way to manage directories and each additional subsection will extend the functionality until we have a final product that meets all our <a href=\"#Design-Goals\">design goals</a>.</p>\n<h3 id=\"Abstraction-Level-1-INI-file\"><a href=\"#Abstraction-Level-1-INI-file\" class=\"headerlink\" title=\"Abstraction Level 1: INI file\"></a>Abstraction Level 1: INI file</h3><p>In an effort to address <a href=\"#Design-Goals\">design goal 1</a>, we can reference all assets by name and store the dictionary between name and path inside a separate file. This would look something like this:</p>\n<p><code>ini file:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">frog_texture</span> = <span class=\"string\">&quot;Assets/Images/Frog/frog_green.png&quot;</span></span><br><span class=\"line\"><span class=\"attr\">bat_texture</span> = <span class=\"string\">&quot;Assets/Images/Bat/bat_texture_new.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">...etc...</span><br></pre></td></tr></table></figure>\n\n<p><code>c++ code:</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; Assets;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InitAssetRegistry</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    INIFile ini = INILoad(<span class=\"string\">&quot;AssetRegistry.ini&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;asset : ini)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Assets[asset.key] = asset.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoFroggyStuff</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE* frog_img = fopen(Assets[<span class=\"string\">&quot;frog_img&quot;</span>]);</span><br><span class=\"line\">    Render(frog_img);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros\"></a>Pros</h4><ol>\n<li>Very easy. Provided you either write a basic ini parser or use an external library, you can have this method working in no time.</li>\n<li>When files are renamed or moved, you only need to modify the ini file</li>\n</ol>\n<h3 id=\"Abstraction-Level-2-Assets\"><a href=\"#Abstraction-Level-2-Assets\" class=\"headerlink\" title=\"Abstraction Level 2: Assets\"></a>Abstraction Level 2: Assets</h3><p>Ideally Asset should be a c++ class. This way they can be extended in the future and can have more functionality than simple strings. for now we’ll just make it a glorified <code>std::string</code> that stores the OS file path.</p>\n<h4 id=\"Pros-1\"><a href=\"#Pros-1\" class=\"headerlink\" title=\"Pros\"></a>Pros</h4><ol>\n<li>If implemented effectively, assets can be modified relatively easily in the future</li>\n<li>starts work towards <a href=\"#Design-Goals\">design goal 4</a></li>\n<li>starts work towards <a href=\"#Design-Goals\">design goal 5</a></li>\n</ol>\n<h3 id=\"Abstraction-Level-3-Packages\"><a href=\"#Abstraction-Level-3-Packages\" class=\"headerlink\" title=\"Abstraction Level 3: Packages\"></a>Abstraction Level 3: Packages</h3><p>to address <a href=\"#Design-Goals\">design goal 3</a>, let’s create an object - call it <code>Package</code> - that stores a dictionary of assets. this way users can organize their assets in a meaningful way.</p>\n<p>in order to achieve this, we need to reflect the concept of packages in the ini file. For this we can use section headers:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Textures]</span></span><br><span class=\"line\"><span class=\"attr\">frog</span> = <span class=\"string\">&quot;Assets/Images/Frog/frog_green.png&quot;</span></span><br><span class=\"line\"><span class=\"attr\">bat</span> = <span class=\"string\">&quot;Assets/Images/Bat/bat_texture_new.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Levels]</span></span><br><span class=\"line\"><span class=\"attr\">level1</span> = <span class=\"string\">&quot;Assets/level1.txt&quot;</span></span><br><span class=\"line\"><span class=\"attr\">level2</span> = <span class=\"string\">&quot;Assets/level2.txt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Pros-2\"><a href=\"#Pros-2\" class=\"headerlink\" title=\"Pros\"></a>Pros</h4><ol>\n<li>If implemented effectively, packages can be modified relatively easily in the future</li>\n<li>names can be reused across packages.</li>\n<li>package names can give hints to their content’s type so names like <code>frog_texture</code> can be reduced to <code>frog</code> in the package <code>textures</code></li>\n</ol>\n<h3 id=\"Abstraction-Level-4-Asset-Registry-System\"><a href=\"#Abstraction-Level-4-Asset-Registry-System\" class=\"headerlink\" title=\"Abstraction Level 4: Asset Registry System\"></a>Abstraction Level 4: Asset Registry System</h3><p>If you were to implement all of the above abstractions with no changes, you’d end up with a Package class, an Asset class, and no where to store their instances. Abstraction Level 1 proposed the use of an unordered_map, but making this public and global would be unwise. There’d be no way to control how it’s used and no way to switch it out with a different data structure. This abstraction level implements an Asset Registry namespace or singleton that provides the following interface.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LoadRegistry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SaveRegistry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::weak_ptr&lt;Package&gt; <span class=\"title\">GetPackage</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; packageName)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::weak_ptr&lt;Package&gt; <span class=\"title\">CreatePackage</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; packageName)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RemovePackage</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; packageName)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">PackageCount</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Pros-3\"><a href=\"#Pros-3\" class=\"headerlink\" title=\"Pros\"></a>Pros</h4><ol>\n<li>If implemented effectively, the back end can be modified relatively easily in the future</li>\n<li>the interface gives hints to the user how it’s meant to be used reducing the need for excessive documentation</li>\n<li>any OS specific operations can be performed privately and the interface is maintained across the board. This fully meets <a href=\"#Design-Goals\">design goal 2</a></li>\n</ol>\n<h2 id=\"Additional-Features\"><a href=\"#Additional-Features\" class=\"headerlink\" title=\"Additional Features\"></a>Additional Features</h2><p>Now that we’ve built a full abstraction model, let’s try to address some of the remaining issues by adding more features</p>\n<h3 id=\"Additional-Feature-1-sub-packages\"><a href=\"#Additional-Feature-1-sub-packages\" class=\"headerlink\" title=\"Additional Feature 1: sub-packages\"></a>Additional Feature 1: sub-packages</h3><p>If you simply make packages capable of also storing references to other packages, they can act very similar to symbolic directories. Here’s how that might look in the INI</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[ClassicMode]</span></span><br><span class=\"line\">SubPackage:Environment = _ClassicEnvironment</span><br><span class=\"line\">SubPackage:Player = _ClassicPlayer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[_ClassicEnvironment]</span></span><br><span class=\"line\">SubPackage:Textures = _ClassicEnvironmentTextures</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[_ClassicEnvironmentTextures]</span></span><br><span class=\"line\">Asset:Background = Assets/Game/Textures/Background/Background.png</span><br><span class=\"line\">Asset:Boarder = Assets/Game/Textures/Background/Boarder.png</span><br><span class=\"line\">Asset:BrokenCeiling = Assets/Game/Textures/Background/broken_ceiling.png</span><br><span class=\"line\">Asset:DepthMap = Assets/Game/Textures/Background/FlippedDepthMap.png</span><br><span class=\"line\">Asset:Tilemap = Assets/Game/Textures/Tilemap/tile_full_16_metal.png</span><br><span class=\"line\">SubPackage:Particles = _ClassicEnvironmentParticles</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[_ClassicEnvironmentParticles]</span></span><br><span class=\"line\">Asset:RainDrop = Assets/Game/Textures/Particles/rain_drop.png</span><br><span class=\"line\">Asset:RainSplash = Assets/Game/Textures/Particles/rain_splash.png</span><br><span class=\"line\">Asset:Fog = Assets/Game/Textures/Particles/fog.png</span><br><span class=\"line\">Asset:Rocks = Assets/Game/Textures/Particles/rock_bits.png</span><br><span class=\"line\"></span><br><span class=\"line\">...etc...</span><br></pre></td></tr></table></figure>\n<p>Using a flat format like this allows multiple packages to reference the same sub-package without having duplicate data. That way you can organize the data in multiple ways at the same time and use the organization that works best for the use case</p>\n<blockquote>\n<p>Note: this is no longer a syntactically correct ini file because it uses both ‘:’ and ‘=’. <a href=\"https://github.com/pulzed/mINI\">The library I’m using</a> allows this but you may need to represent your data differently if you’re using a different ini parser</p>\n</blockquote>\n<h3 id=\"Additional-Feature-2-Asset-and-Package-inheritance\"><a href=\"#Additional-Feature-2-Asset-and-Package-inheritance\" class=\"headerlink\" title=\"Additional Feature 2: Asset and Package inheritance\"></a>Additional Feature 2: Asset and Package inheritance</h3><p>A big limitation we still have in the proposed system is that assets are still just file paths and there’s no way to extend them to de-serialize the data properly and provide relevant methods. for example, an exe asset would ideally have a “Execute” method and a sprite asset would ideally store it’s render data in ram after it’s loaded. Thankfully c++ provides us with inheritance to solve this. We simply need to make our getters templates that cast to the requested type:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> PackageType = Package&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::weak_ptr&lt;PackageType&gt; GetPackage(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; packageName);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> AssetType = Asset&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::weak_ptr&lt;AssetType&gt; GetAsset(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; assetName);</span><br></pre></td></tr></table></figure>\n\n<p>For the DeltaBlade engine, we decided that real time type reflection was overkill so the assets are all stored internally as <code>std::shared_ptr&lt;Asset&gt;</code>s and are simply replaced with the extended type when <code>GetAsset</code> is called. With proper runtime type reflection however, you could choose to serialize the type inside the ini file and then load the correct type at startup. This would allow for assets to be preloaded easier without having to know the type externally.</p>\n<h3 id=\"Additional-Feature-3-Registry-Paths\"><a href=\"#Additional-Feature-3-Registry-Paths\" class=\"headerlink\" title=\"Additional Feature 3: Registry Paths\"></a>Additional Feature 3: Registry Paths</h3><p>The Asset Registry introduces a concept known as Registry Paths. Similar to filesystem paths, this is a way to represent a series of packages, and sub-packages opened in order to retrieve an asset as a colon delineated string. if for example, your AssetRegistry.ini file looks something like this:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[UI]</span></span><br><span class=\"line\">SubPackage:Textures = _UITextures</span><br><span class=\"line\">SubPackage:Audio = _GAME_UI_Audio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[_UITextures]</span></span><br><span class=\"line\">Asset:MenuButton = Assets/Game/UI/Menu/button.png</span><br><span class=\"line\">Asset:MenuBackground = Assets/Game/UI/Menu/background.png</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[_GAME_UI_Audio]</span></span><br><span class=\"line\">Asset:MenuMusic = Assets/Game/Audio/menu_music.wav</span><br><span class=\"line\">Asset:MenuButtonClick = Assets/Game/Audio/sfs/click.wav</span><br></pre></td></tr></table></figure>\n\n<p>then retrieving the menu music could be done in any of the following ways:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// opening packages individually</span></span><br><span class=\"line\">PackageHandle UI = AssetRegistry::GetPackageChecked(<span class=\"string\">&quot;UI&quot;</span>).lock();</span><br><span class=\"line\">PackageHandle UIAudio = UI-&gt;GetSubPackageChecked(<span class=\"string\">&quot;Audio&quot;</span>).lock();</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;AMusic&gt; MenuMusic = UIAudio-&gt;GetAssetChecked&lt;AMusic&gt;(<span class=\"string\">&quot;MenuMusic&quot;</span>).lock();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// using registry paths</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;AMusic&gt; MenuMusic = AssetRegistry::GetAssetChecked&lt;AMusic&gt;(<span class=\"string\">&quot;UI:Audio:MenuMusic&quot;</span>).lock();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// using a hybrid</span></span><br><span class=\"line\">PackageHandle UIAudio = AssetRegistry::GetPackageChecked(<span class=\"string\">&quot;UI:Audio&quot;</span>).lock();</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;AMusic&gt; MenuMusic = UIAudio-&gt;GetAssetChecked&lt;AMusic&gt;(<span class=\"string\">&quot;MenuMusic&quot;</span>).lock();</span><br></pre></td></tr></table></figure>\n\n<p>This feature is purely syntactical but it speeds up development significantly and keeps packages from being a burden to use</p>\n<h3 id=\"Additional-Feature-4-Editor\"><a href=\"#Additional-Feature-4-Editor\" class=\"headerlink\" title=\"Additional Feature 4: Editor\"></a>Additional Feature 4: Editor</h3><p>You’ve officially made it to the fun part. This is where the pretty pictures and gifs live! When developing the registry it became quickly apparent that the ini was going to blow up and become increasingly difficult to parse. To solve this, I wanted to allow users to modify it in a better environment than a text editor. Using ImGui I made the following tree based editor</p>\n<p><img src=\"/images/AssetRegistry/Editor.png\" alt=\"Asset Registry Editor\"></p>\n<p>As you can see, when changes are made in the editor, they’re saved to the ini in real time.</p>\n<p><img src=\"/images/AssetRegistry/Editor.gif\" alt=\"Asset Registry Editor\"></p>\n<p>The editor supports</p>\n<ul>\n<li>viewing the contents of packages</li>\n<li>adding packages, sub-packages, or assets</li>\n<li>removing packages, sub-packages or assets</li>\n<li>copying the OS path of assets to the clipboard</li>\n<li>copying the <a href=\"#Additional-Feature-3-Registry-Paths\">registry path</a> of assets and packages to the clipboard</li>\n<li>copying the name of assets and packages to the clipboard</li>\n</ul>\n<h3 id=\"Additional-Feature-5-Error-Handling-Modals\"><a href=\"#Additional-Feature-5-Error-Handling-Modals\" class=\"headerlink\" title=\"Additional Feature 5: Error Handling Modals\"></a>Additional Feature 5: Error Handling Modals</h3><p>I could’ve called this project complete at this point. I’d met all the <a href=\"#Design-Goals\">design goals</a>, made a great editor, and provided several ways to access, read, and modify the data. What’s important to remember however, is that I’m implementing this for humans. And humans are known for two things:</p>\n<ol>\n<li>They’re lazy. They don’t want to use a system if it’s not stupid easy</li>\n<li>They’re prone to mistakes. Even if they <em>know</em> not to rename files without modifying the ini, they’re probably going to forget at some point.</li>\n</ol>\n<p>all decent systems have some form of error logging but all great systems can completely resolve the errors without crashing. I’m of course striving for greatness. Let’s consider the worst case scenario:</p>\n<blockquote>\n<p>A user renames a core file such as a default shader from ‘Assets/Game/Shaders/forwardVert.glsl’ to ‘Assets/Game/Shaders/forwardVert_Renamed.glsl’ and forgets to modify the ini</p>\n</blockquote>\n<p>With the proposed system, the game would crash immediately. The best we could do is return nullptr or throw an exception and hope it’s caught but realistically, what could the renderer possibly do? It can’t render anything without a shader and there’s no way for the renderer to find it.</p>\n<p>Instead, I have the registry ask the user and wait for their response. To do this, I had to create a completely separate application and launch it from the editor when there’s a problem. This application simply walks the user through fixing their error and quietly resumes as if nothing happened</p>\n<p><img src=\"/images/AssetRegistry/Modals.gif\" alt=\"Asset Registry Modals\"></p>\n<p>The following errors are handled in this way:</p>\n<ul>\n<li>A package was requested in code, but it’s not in the AssetRegistry</li>\n<li>An Asset was requested in code but it’s not in the AssetRegistry</li>\n<li>A sub-package was requested in code, but it’s not in the AssetRegistry</li>\n<li>An Asset was renamed but the ini wasn’t modified to reflect the edit</li>\n<li>An Asset was moved but the ini wasn’t modified to reflect the edit</li>\n</ul>\n<p>This feature becomes particularly powerful when you stop thinking of it as error handling, and instead think of it as a part of the pipeline. The previous pipeline was as follows:</p>\n<ol>\n<li>put file inside Assets directory</li>\n<li>modify ini file (either directly or by launching the editor and modifying it there)</li>\n<li>write code that uses the asset</li>\n</ol>\n<p>but this isn’t how most devs like to work. If you’re like me, you’d much rather write the code first. After all, we want packages to reflect <em>how</em> the assets are used and that might not be clear until the code is written. By intentionally expecting an error from the registry though, we can write the code first and let the error handler do the rest:</p>\n<ol>\n<li>put file inside the Assets directory</li>\n<li>write code that uses the asset - making up names for the asset and it’s package(s) on the spot</li>\n<li>launch the editor and get an error that the name doesn’t exist</li>\n<li>link the asset using the modal</li>\n<li>continue testing the game/editor as normal</li>\n</ol>\n<hr>\n<h2 id=\"Post-Mortem\"><a href=\"#Post-Mortem\" class=\"headerlink\" title=\"Post Mortem\"></a>Post Mortem</h2><p>TODO: I’ll write my post mortem after at the end of the semester after we’ve used the asset registry more</p>\n<hr>\n<h2 id=\"Useful-Resources\"><a href=\"#Useful-Resources\" class=\"headerlink\" title=\"Useful Resources\"></a>Useful Resources</h2><p>Simple Ini parsing library: <a href=\"https://github.com/pulzed/mINI\">mIni</a></p>\n<p>Basic, cross platform ImGui interface that I used for the modals: <a href=\"https://github.com/pthom/hello_imgui\">Hello, Dear ImGui</a></p>\n<p>How Unreal Engine handles assets: <a href=\"https://docs.unrealengine.com/4.27/en-US/ProductionPipelines/AssetManagement/\">docs.unrealengine.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Motive\"><a href=\"#Motive\" class=\"headerlink\" title=\"Motive\"></a>Motive</h2><p>If you’ve worked on a project without an asset registry, you’ve likely come across the following scenario: An asset is used in 6 places and it’s path is hard-coded in all 6. On it’s own, this isn’t that big of a deal. Much like magic numbers, it will never pose a problem until you need to change them. At that point, however, you’ll be stuck desperately trying to find and replace and hoping you don’t cause collateral damage. This problem becomes exponentially more frequent if you have artists on your team. If you do, your asset names will quickly go from <code>frog.png</code> to <code>frog_green.png</code> to <code>frog_green_new.png</code> to <code>frog_green_new_revised_final_last_draft.png</code>. As a result, it becomes necessary that the asset names in your code, are abstracted away from the literal filenames in the OS filesystem.</p>\n<hr>\n<h2 id=\"Design-Goals\"><a href=\"#Design-Goals\" class=\"headerlink\" title=\"Design Goals\"></a>Design Goals</h2><p>The AssetRegistry exists to achieve the following system design goals:</p>\n<ol>\n<li>Serve as an added layer of abstraction above file paths<ul>\n<li>enable easier asset directory refactors</li>\n<li>enable separated Asset and SaveData</li>\n</ul>\n</li>\n<li>Provide an OS-agnostic interface<ul>\n<li>support for Windows 64, Linux, and Horizon operating systems</li>\n</ul>\n</li>\n<li>Encourage the use of <a href=\"#Abstraction-Level-3-Packages\">Packages</a> as a method to store relevant <a href=\"bstraction-Level-2-Assets\">Assets</a> as a collection where they’re used most often</li>\n<li>Encourage the use of <a href=\"#Abstraction-Level-2-Assets\">Assets</a> as a method to <a href=\"#Additional-Feature-2-Asset-and-Package-inheritance\">handle how file data is read, saved, and managed</a> within the engine</li>\n<li>Keep files from being reread unnecessarily by storing their data in ram</li>\n</ol>\n<hr>\n<h2 id=\"Abstractions\"><a href=\"#Abstractions\" class=\"headerlink\" title=\"Abstractions\"></a>Abstractions</h2><p>The following sub-sections are organized in layers of abstraction. I’ll start with the most basic way to manage directories and each additional subsection will extend the functionality until we have a final product that meets all our <a href=\"#Design-Goals\">design goals</a>.</p>\n<h3 id=\"Abstraction-Level-1-INI-file\"><a href=\"#Abstraction-Level-1-INI-file\" class=\"headerlink\" title=\"Abstraction Level 1: INI file\"></a>Abstraction Level 1: INI file</h3><p>In an effort to address <a href=\"#Design-Goals\">design goal 1</a>, we can reference all assets by name and store the dictionary between name and path inside a separate file. This would look something like this:</p>\n<p><code>ini file:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">frog_texture</span> = <span class=\"string\">&quot;Assets/Images/Frog/frog_green.png&quot;</span></span><br><span class=\"line\"><span class=\"attr\">bat_texture</span> = <span class=\"string\">&quot;Assets/Images/Bat/bat_texture_new.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">...etc...</span><br></pre></td></tr></table></figure>\n\n<p><code>c++ code:</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; Assets;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InitAssetRegistry</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    INIFile ini = INILoad(<span class=\"string\">&quot;AssetRegistry.ini&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;asset : ini)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Assets[asset.key] = asset.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoFroggyStuff</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE* frog_img = fopen(Assets[<span class=\"string\">&quot;frog_img&quot;</span>]);</span><br><span class=\"line\">    Render(frog_img);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros\"></a>Pros</h4><ol>\n<li>Very easy. Provided you either write a basic ini parser or use an external library, you can have this method working in no time.</li>\n<li>When files are renamed or moved, you only need to modify the ini file</li>\n</ol>\n<h3 id=\"Abstraction-Level-2-Assets\"><a href=\"#Abstraction-Level-2-Assets\" class=\"headerlink\" title=\"Abstraction Level 2: Assets\"></a>Abstraction Level 2: Assets</h3><p>Ideally Asset should be a c++ class. This way they can be extended in the future and can have more functionality than simple strings. for now we’ll just make it a glorified <code>std::string</code> that stores the OS file path.</p>\n<h4 id=\"Pros-1\"><a href=\"#Pros-1\" class=\"headerlink\" title=\"Pros\"></a>Pros</h4><ol>\n<li>If implemented effectively, assets can be modified relatively easily in the future</li>\n<li>starts work towards <a href=\"#Design-Goals\">design goal 4</a></li>\n<li>starts work towards <a href=\"#Design-Goals\">design goal 5</a></li>\n</ol>\n<h3 id=\"Abstraction-Level-3-Packages\"><a href=\"#Abstraction-Level-3-Packages\" class=\"headerlink\" title=\"Abstraction Level 3: Packages\"></a>Abstraction Level 3: Packages</h3><p>to address <a href=\"#Design-Goals\">design goal 3</a>, let’s create an object - call it <code>Package</code> - that stores a dictionary of assets. this way users can organize their assets in a meaningful way.</p>\n<p>in order to achieve this, we need to reflect the concept of packages in the ini file. For this we can use section headers:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Textures]</span></span><br><span class=\"line\"><span class=\"attr\">frog</span> = <span class=\"string\">&quot;Assets/Images/Frog/frog_green.png&quot;</span></span><br><span class=\"line\"><span class=\"attr\">bat</span> = <span class=\"string\">&quot;Assets/Images/Bat/bat_texture_new.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Levels]</span></span><br><span class=\"line\"><span class=\"attr\">level1</span> = <span class=\"string\">&quot;Assets/level1.txt&quot;</span></span><br><span class=\"line\"><span class=\"attr\">level2</span> = <span class=\"string\">&quot;Assets/level2.txt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Pros-2\"><a href=\"#Pros-2\" class=\"headerlink\" title=\"Pros\"></a>Pros</h4><ol>\n<li>If implemented effectively, packages can be modified relatively easily in the future</li>\n<li>names can be reused across packages.</li>\n<li>package names can give hints to their content’s type so names like <code>frog_texture</code> can be reduced to <code>frog</code> in the package <code>textures</code></li>\n</ol>\n<h3 id=\"Abstraction-Level-4-Asset-Registry-System\"><a href=\"#Abstraction-Level-4-Asset-Registry-System\" class=\"headerlink\" title=\"Abstraction Level 4: Asset Registry System\"></a>Abstraction Level 4: Asset Registry System</h3><p>If you were to implement all of the above abstractions with no changes, you’d end up with a Package class, an Asset class, and no where to store their instances. Abstraction Level 1 proposed the use of an unordered_map, but making this public and global would be unwise. There’d be no way to control how it’s used and no way to switch it out with a different data structure. This abstraction level implements an Asset Registry namespace or singleton that provides the following interface.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LoadRegistry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SaveRegistry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::weak_ptr&lt;Package&gt; <span class=\"title\">GetPackage</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; packageName)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::weak_ptr&lt;Package&gt; <span class=\"title\">CreatePackage</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; packageName)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RemovePackage</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; packageName)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">PackageCount</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Pros-3\"><a href=\"#Pros-3\" class=\"headerlink\" title=\"Pros\"></a>Pros</h4><ol>\n<li>If implemented effectively, the back end can be modified relatively easily in the future</li>\n<li>the interface gives hints to the user how it’s meant to be used reducing the need for excessive documentation</li>\n<li>any OS specific operations can be performed privately and the interface is maintained across the board. This fully meets <a href=\"#Design-Goals\">design goal 2</a></li>\n</ol>\n<h2 id=\"Additional-Features\"><a href=\"#Additional-Features\" class=\"headerlink\" title=\"Additional Features\"></a>Additional Features</h2><p>Now that we’ve built a full abstraction model, let’s try to address some of the remaining issues by adding more features</p>\n<h3 id=\"Additional-Feature-1-sub-packages\"><a href=\"#Additional-Feature-1-sub-packages\" class=\"headerlink\" title=\"Additional Feature 1: sub-packages\"></a>Additional Feature 1: sub-packages</h3><p>If you simply make packages capable of also storing references to other packages, they can act very similar to symbolic directories. Here’s how that might look in the INI</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[ClassicMode]</span></span><br><span class=\"line\">SubPackage:Environment = _ClassicEnvironment</span><br><span class=\"line\">SubPackage:Player = _ClassicPlayer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[_ClassicEnvironment]</span></span><br><span class=\"line\">SubPackage:Textures = _ClassicEnvironmentTextures</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[_ClassicEnvironmentTextures]</span></span><br><span class=\"line\">Asset:Background = Assets/Game/Textures/Background/Background.png</span><br><span class=\"line\">Asset:Boarder = Assets/Game/Textures/Background/Boarder.png</span><br><span class=\"line\">Asset:BrokenCeiling = Assets/Game/Textures/Background/broken_ceiling.png</span><br><span class=\"line\">Asset:DepthMap = Assets/Game/Textures/Background/FlippedDepthMap.png</span><br><span class=\"line\">Asset:Tilemap = Assets/Game/Textures/Tilemap/tile_full_16_metal.png</span><br><span class=\"line\">SubPackage:Particles = _ClassicEnvironmentParticles</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[_ClassicEnvironmentParticles]</span></span><br><span class=\"line\">Asset:RainDrop = Assets/Game/Textures/Particles/rain_drop.png</span><br><span class=\"line\">Asset:RainSplash = Assets/Game/Textures/Particles/rain_splash.png</span><br><span class=\"line\">Asset:Fog = Assets/Game/Textures/Particles/fog.png</span><br><span class=\"line\">Asset:Rocks = Assets/Game/Textures/Particles/rock_bits.png</span><br><span class=\"line\"></span><br><span class=\"line\">...etc...</span><br></pre></td></tr></table></figure>\n<p>Using a flat format like this allows multiple packages to reference the same sub-package without having duplicate data. That way you can organize the data in multiple ways at the same time and use the organization that works best for the use case</p>\n<blockquote>\n<p>Note: this is no longer a syntactically correct ini file because it uses both ‘:’ and ‘=’. <a href=\"https://github.com/pulzed/mINI\">The library I’m using</a> allows this but you may need to represent your data differently if you’re using a different ini parser</p>\n</blockquote>\n<h3 id=\"Additional-Feature-2-Asset-and-Package-inheritance\"><a href=\"#Additional-Feature-2-Asset-and-Package-inheritance\" class=\"headerlink\" title=\"Additional Feature 2: Asset and Package inheritance\"></a>Additional Feature 2: Asset and Package inheritance</h3><p>A big limitation we still have in the proposed system is that assets are still just file paths and there’s no way to extend them to de-serialize the data properly and provide relevant methods. for example, an exe asset would ideally have a “Execute” method and a sprite asset would ideally store it’s render data in ram after it’s loaded. Thankfully c++ provides us with inheritance to solve this. We simply need to make our getters templates that cast to the requested type:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> PackageType = Package&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::weak_ptr&lt;PackageType&gt; GetPackage(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; packageName);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> AssetType = Asset&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::weak_ptr&lt;AssetType&gt; GetAsset(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; assetName);</span><br></pre></td></tr></table></figure>\n\n<p>For the DeltaBlade engine, we decided that real time type reflection was overkill so the assets are all stored internally as <code>std::shared_ptr&lt;Asset&gt;</code>s and are simply replaced with the extended type when <code>GetAsset</code> is called. With proper runtime type reflection however, you could choose to serialize the type inside the ini file and then load the correct type at startup. This would allow for assets to be preloaded easier without having to know the type externally.</p>\n<h3 id=\"Additional-Feature-3-Registry-Paths\"><a href=\"#Additional-Feature-3-Registry-Paths\" class=\"headerlink\" title=\"Additional Feature 3: Registry Paths\"></a>Additional Feature 3: Registry Paths</h3><p>The Asset Registry introduces a concept known as Registry Paths. Similar to filesystem paths, this is a way to represent a series of packages, and sub-packages opened in order to retrieve an asset as a colon delineated string. if for example, your AssetRegistry.ini file looks something like this:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[UI]</span></span><br><span class=\"line\">SubPackage:Textures = _UITextures</span><br><span class=\"line\">SubPackage:Audio = _GAME_UI_Audio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[_UITextures]</span></span><br><span class=\"line\">Asset:MenuButton = Assets/Game/UI/Menu/button.png</span><br><span class=\"line\">Asset:MenuBackground = Assets/Game/UI/Menu/background.png</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[_GAME_UI_Audio]</span></span><br><span class=\"line\">Asset:MenuMusic = Assets/Game/Audio/menu_music.wav</span><br><span class=\"line\">Asset:MenuButtonClick = Assets/Game/Audio/sfs/click.wav</span><br></pre></td></tr></table></figure>\n\n<p>then retrieving the menu music could be done in any of the following ways:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// opening packages individually</span></span><br><span class=\"line\">PackageHandle UI = AssetRegistry::GetPackageChecked(<span class=\"string\">&quot;UI&quot;</span>).lock();</span><br><span class=\"line\">PackageHandle UIAudio = UI-&gt;GetSubPackageChecked(<span class=\"string\">&quot;Audio&quot;</span>).lock();</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;AMusic&gt; MenuMusic = UIAudio-&gt;GetAssetChecked&lt;AMusic&gt;(<span class=\"string\">&quot;MenuMusic&quot;</span>).lock();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// using registry paths</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;AMusic&gt; MenuMusic = AssetRegistry::GetAssetChecked&lt;AMusic&gt;(<span class=\"string\">&quot;UI:Audio:MenuMusic&quot;</span>).lock();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// using a hybrid</span></span><br><span class=\"line\">PackageHandle UIAudio = AssetRegistry::GetPackageChecked(<span class=\"string\">&quot;UI:Audio&quot;</span>).lock();</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;AMusic&gt; MenuMusic = UIAudio-&gt;GetAssetChecked&lt;AMusic&gt;(<span class=\"string\">&quot;MenuMusic&quot;</span>).lock();</span><br></pre></td></tr></table></figure>\n\n<p>This feature is purely syntactical but it speeds up development significantly and keeps packages from being a burden to use</p>\n<h3 id=\"Additional-Feature-4-Editor\"><a href=\"#Additional-Feature-4-Editor\" class=\"headerlink\" title=\"Additional Feature 4: Editor\"></a>Additional Feature 4: Editor</h3><p>You’ve officially made it to the fun part. This is where the pretty pictures and gifs live! When developing the registry it became quickly apparent that the ini was going to blow up and become increasingly difficult to parse. To solve this, I wanted to allow users to modify it in a better environment than a text editor. Using ImGui I made the following tree based editor</p>\n<p><img src=\"/images/AssetRegistry/Editor.png\" alt=\"Asset Registry Editor\"></p>\n<p>As you can see, when changes are made in the editor, they’re saved to the ini in real time.</p>\n<p><img src=\"/images/AssetRegistry/Editor.gif\" alt=\"Asset Registry Editor\"></p>\n<p>The editor supports</p>\n<ul>\n<li>viewing the contents of packages</li>\n<li>adding packages, sub-packages, or assets</li>\n<li>removing packages, sub-packages or assets</li>\n<li>copying the OS path of assets to the clipboard</li>\n<li>copying the <a href=\"#Additional-Feature-3-Registry-Paths\">registry path</a> of assets and packages to the clipboard</li>\n<li>copying the name of assets and packages to the clipboard</li>\n</ul>\n<h3 id=\"Additional-Feature-5-Error-Handling-Modals\"><a href=\"#Additional-Feature-5-Error-Handling-Modals\" class=\"headerlink\" title=\"Additional Feature 5: Error Handling Modals\"></a>Additional Feature 5: Error Handling Modals</h3><p>I could’ve called this project complete at this point. I’d met all the <a href=\"#Design-Goals\">design goals</a>, made a great editor, and provided several ways to access, read, and modify the data. What’s important to remember however, is that I’m implementing this for humans. And humans are known for two things:</p>\n<ol>\n<li>They’re lazy. They don’t want to use a system if it’s not stupid easy</li>\n<li>They’re prone to mistakes. Even if they <em>know</em> not to rename files without modifying the ini, they’re probably going to forget at some point.</li>\n</ol>\n<p>all decent systems have some form of error logging but all great systems can completely resolve the errors without crashing. I’m of course striving for greatness. Let’s consider the worst case scenario:</p>\n<blockquote>\n<p>A user renames a core file such as a default shader from ‘Assets/Game/Shaders/forwardVert.glsl’ to ‘Assets/Game/Shaders/forwardVert_Renamed.glsl’ and forgets to modify the ini</p>\n</blockquote>\n<p>With the proposed system, the game would crash immediately. The best we could do is return nullptr or throw an exception and hope it’s caught but realistically, what could the renderer possibly do? It can’t render anything without a shader and there’s no way for the renderer to find it.</p>\n<p>Instead, I have the registry ask the user and wait for their response. To do this, I had to create a completely separate application and launch it from the editor when there’s a problem. This application simply walks the user through fixing their error and quietly resumes as if nothing happened</p>\n<p><img src=\"/images/AssetRegistry/Modals.gif\" alt=\"Asset Registry Modals\"></p>\n<p>The following errors are handled in this way:</p>\n<ul>\n<li>A package was requested in code, but it’s not in the AssetRegistry</li>\n<li>An Asset was requested in code but it’s not in the AssetRegistry</li>\n<li>A sub-package was requested in code, but it’s not in the AssetRegistry</li>\n<li>An Asset was renamed but the ini wasn’t modified to reflect the edit</li>\n<li>An Asset was moved but the ini wasn’t modified to reflect the edit</li>\n</ul>\n<p>This feature becomes particularly powerful when you stop thinking of it as error handling, and instead think of it as a part of the pipeline. The previous pipeline was as follows:</p>\n<ol>\n<li>put file inside Assets directory</li>\n<li>modify ini file (either directly or by launching the editor and modifying it there)</li>\n<li>write code that uses the asset</li>\n</ol>\n<p>but this isn’t how most devs like to work. If you’re like me, you’d much rather write the code first. After all, we want packages to reflect <em>how</em> the assets are used and that might not be clear until the code is written. By intentionally expecting an error from the registry though, we can write the code first and let the error handler do the rest:</p>\n<ol>\n<li>put file inside the Assets directory</li>\n<li>write code that uses the asset - making up names for the asset and it’s package(s) on the spot</li>\n<li>launch the editor and get an error that the name doesn’t exist</li>\n<li>link the asset using the modal</li>\n<li>continue testing the game/editor as normal</li>\n</ol>\n<hr>\n<h2 id=\"Post-Mortem\"><a href=\"#Post-Mortem\" class=\"headerlink\" title=\"Post Mortem\"></a>Post Mortem</h2><p>TODO: I’ll write my post mortem after at the end of the semester after we’ve used the asset registry more</p>\n<hr>\n<h2 id=\"Useful-Resources\"><a href=\"#Useful-Resources\" class=\"headerlink\" title=\"Useful Resources\"></a>Useful Resources</h2><p>Simple Ini parsing library: <a href=\"https://github.com/pulzed/mINI\">mIni</a></p>\n<p>Basic, cross platform ImGui interface that I used for the modals: <a href=\"https://github.com/pthom/hello_imgui\">Hello, Dear ImGui</a></p>\n<p>How Unreal Engine handles assets: <a href=\"https://docs.unrealengine.com/4.27/en-US/ProductionPipelines/AssetManagement/\">docs.unrealengine.com</a></p>\n"},{"title":"0x00000000 Developer Blog","author":"Calin Gavriliuc","date":"2020-11-06T01:01:01.000Z","_content":"\n# Framework and Theme\n\nThis site was made using [Hexo](https://hexo.io/) and a custom theme.\n\nCurrently, there are multiple authors working on posts for this site.\n\n---\n\nCreated, hosted, and maintained by Calin Gavriliuc.\n\nSome shameless plugs:\n\n- [Resume](https://www.nekeko.com/)\n- [GitHub](https://www.github.com/alisenai)\n\nFor questions or information, you may contact me at:\n\n- Discord: @Alien#5438\n- This site's [repo](https://github.com/Sunglasses-At-Night/Sunglasses-At-Night.github.io).\n","source":"_posts/blog.md","raw":"---\ntitle: 0x00000000 Developer Blog\nauthor: Calin Gavriliuc\ndate: 2020-11-06 01:01:01\n---\n\n# Framework and Theme\n\nThis site was made using [Hexo](https://hexo.io/) and a custom theme.\n\nCurrently, there are multiple authors working on posts for this site.\n\n---\n\nCreated, hosted, and maintained by Calin Gavriliuc.\n\nSome shameless plugs:\n\n- [Resume](https://www.nekeko.com/)\n- [GitHub](https://www.github.com/alisenai)\n\nFor questions or information, you may contact me at:\n\n- Discord: @Alien#5438\n- This site's [repo](https://github.com/Sunglasses-At-Night/Sunglasses-At-Night.github.io).\n","slug":"blog","published":1,"updated":"2021-10-18T07:56:19.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuwd64y700020bqu7uqy7aqs","content":"<h1 id=\"Framework-and-Theme\"><a href=\"#Framework-and-Theme\" class=\"headerlink\" title=\"Framework and Theme\"></a>Framework and Theme</h1><p>This site was made using <a href=\"https://hexo.io/\">Hexo</a> and a custom theme.</p>\n<p>Currently, there are multiple authors working on posts for this site.</p>\n<hr>\n<p>Created, hosted, and maintained by Calin Gavriliuc.</p>\n<p>Some shameless plugs:</p>\n<ul>\n<li><a href=\"https://www.nekeko.com/\">Resume</a></li>\n<li><a href=\"https://www.github.com/alisenai\">GitHub</a></li>\n</ul>\n<p>For questions or information, you may contact me at:</p>\n<ul>\n<li>Discord: @Alien#5438</li>\n<li>This site’s <a href=\"https://github.com/Sunglasses-At-Night/Sunglasses-At-Night.github.io\">repo</a>.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Framework-and-Theme\"><a href=\"#Framework-and-Theme\" class=\"headerlink\" title=\"Framework and Theme\"></a>Framework and Theme</h1><p>This site was made using <a href=\"https://hexo.io/\">Hexo</a> and a custom theme.</p>\n<p>Currently, there are multiple authors working on posts for this site.</p>\n<hr>\n<p>Created, hosted, and maintained by Calin Gavriliuc.</p>\n<p>Some shameless plugs:</p>\n<ul>\n<li><a href=\"https://www.nekeko.com/\">Resume</a></li>\n<li><a href=\"https://www.github.com/alisenai\">GitHub</a></li>\n</ul>\n<p>For questions or information, you may contact me at:</p>\n<ul>\n<li>Discord: @Alien#5438</li>\n<li>This site’s <a href=\"https://github.com/Sunglasses-At-Night/Sunglasses-At-Night.github.io\">repo</a>.</li>\n</ul>\n"},{"title":"Modular ImGUI","author":"Calin Gavriliuc","date":"2021-01-24T01:01:01.000Z","_content":"\n# A More Modular ImGUI Method\n\n## Introduction\n\n[ImGUI](https://github.com/ocornut/imgui) is one of the most popular graphical user interface libraries available for content creation, debugging, and visualization tools. Since this library can be used for many applications, it often becomes highly entangled and messy to work with.\n\nAs a game developer, I was tasked with implementing the main framework and a large amount of ImGUI content for a game called [Arc Apellago](https://store.steampowered.com/app/1454430/Arc_Apellago/). It was overall a simple game, but it also contained a surprising amount of ImGUI content.\n\n![Arc Apellago ImGUI](/images/ModularImGUI/ArcApellagoImGUI.png)\n\n## Designing the Interface\n\nGiven the design of ImGUI, content separated across windows with some content on them, how can we clean the code up?\n\n<!-- <img src=\"/images/ModularImGUI/ImGuiWindow.png\" alt=\"ImGUI Window\" width=\"300px\"/> -->\n![Arc Apellago ImGUI Window](/images/ModularImGUI/ImGUIWindow.png)\n\nFor one, we can contain all the functionality and related information for our given window in its own object. So far, a window is just a context and some updated content. First, let us make a class that holds a `title`, a `showWindow_` class variable, and an `Update` to update this window's content.\n\nA parent class that follows these requirements could look as follows:\n\n```c++\nclass EditorWindow\n{\npublic:\n  explicit EditorWindow(std::string title);\n\n  virtual ~EditorWindow();\n\n  virtual void Update(float dt);\n\nprivate:\n    std::string title_;\n    bool showWindow_;\n};\n```\n\nWhen the previous image is reduced and grouped, you get the following:\n\n![Arc Apellago ImGUI Small Window](/images/ModularImGUI/ImGUIWindowSmall.png)\n\nThis reduced-content window contains three major pieces of content:\n\n- FPS / Display Statistics\n- Debug Settings\n- Collision Settings\n\nAs these are only related as configuration/stats content, we can break these up as well. To do so, let us create another class, `EditorBlock`, which can be attached to any `EditorWindow`.\n\n```c++\nclass EditorBlock\n{\npublic:\n  EditorBlock() = default;\n\n  virtual ~EditorBlock() = default;\n\n  virtual void Update(float dt) = 0;\n};\n```\n\nThese blocks of content are quite simple - just an update for the content they should display.\nThey both allow for separation of code and allows multiple teammates' content on the same window if you are working on a team.\n\nNext, we must adapt our current `EditorWindow` to store these `EditorBlock`s.\n\n```c++\nclass EditorWindow\n{\npublic:\n  explicit EditorWindow(std::string title);\n\n  virtual ~EditorWindow();\n\n  virtual void Update(float dt);\n\n  void AddBlock(EditorBlock* editorBlock);\n\nprivate:\n    std::string title_;\n    std::vector<EditorBlock*> blocks_;\n    bool showWindow_;\n};\n```\n\nIt should be noted that the `Update` function will now just call the `EditorBlock`s' `Update` functions.\n\n## Creating a Block\n\nAs an example of using the blocks, let's implement the `StatsEditorBlock` which displays the following:\n\n![Stats Editor Block](/images/ModularImGUI/ImGUIStatsBlock.png)\n\n**Note:** The `ImGUI FPS` stat has been omitted for simplicity.\n\n`StatsEditorBlock.h`\n\n```c++\n#include \"EditorBlock.h\"\n\nclass StatsEditorBlock : public EditorBlock\n{\npublic:\n    void Update(float dt) override;\n};\n```\n\nNote that creating a class for each block allows it to implement helper methods and have internal state variables - which are often useful.\n\n`StatsEditorBlock.cpp`\n\n```c++\n#include \"imgui.h\"\n#include \"StatsEditorBlock.h\"\n\nvoid StatsEditorBlock::Update(float dt)\n{\n    // Get the needed information from ImGUI\n    auto io = ImGui::GetIO();\n    // Display the FPS\n    ImGui::Text(\"FPS: %f\", io.Framerate);\n    // Display the display size\n    ImGui::Text(\"Display X:%d\", static_cast<int>(io.DisplaySize.x));\n    ImGui::Text(\"Display Y:%d\", static_cast<int>(io.DisplaySize.y));\n}\n```\n\n## Using the Interface\n\nNow that all the functionality is abstracted out and self-contained in other classes, the interface is as simple as choosing which blocks go where.\n\n![Arc Apellago ImGUI Window Sections](/images/ModularImGUI/ImGUIWindowBlocks.png)\n\n```c++\n// Create a window and give it a title\nauto statsConfigWindow = new EditorWindow(\"Stats and Config\");\n// Add a stats block, debug draw config block, and collision config block to the window\nstatsConfigWindow->AddBlock(new StatsEditorBlock());\nstatsConfigWindow->AddBlock(new DebugDrawConfigBlock());\nstatsConfigWindow->AddBlock(new CollisionConfigBlock());\n// Add the window to the main ImGUI update list\nwindows_.emplace_back(statsConfigWindow);\n```\n\n## Conclusion\n\nThis layout separates unrelated code into manageable blocks to allow for easier layout planning and code decoupling. With ImGUI's initialization and update code out of the way, it will be much easier for your teammates to create ImGUI blocks or windows as they require - this played a large role in my team's final ImGUI implementation.\n\n---\n\n**Some final notes and tips:**\n\n- Use the `ifdef` paradigm to compile-out ImGUI from your project if you don't want to ship with it and _test that this define works regularly_.\n- Check out the [docking](https://github.com/ocornut/imgui/tree/docking) branch of ImGUI to help organize your ImGUI windows further.\n\n---\n","source":"_posts/modular-imgui.md","raw":"---\ntitle: Modular ImGUI\nauthor: Calin Gavriliuc\ntags:\n- ImGUI\n- GameDev\ndate: 2021-01-24 01:01:01\n---\n\n# A More Modular ImGUI Method\n\n## Introduction\n\n[ImGUI](https://github.com/ocornut/imgui) is one of the most popular graphical user interface libraries available for content creation, debugging, and visualization tools. Since this library can be used for many applications, it often becomes highly entangled and messy to work with.\n\nAs a game developer, I was tasked with implementing the main framework and a large amount of ImGUI content for a game called [Arc Apellago](https://store.steampowered.com/app/1454430/Arc_Apellago/). It was overall a simple game, but it also contained a surprising amount of ImGUI content.\n\n![Arc Apellago ImGUI](/images/ModularImGUI/ArcApellagoImGUI.png)\n\n## Designing the Interface\n\nGiven the design of ImGUI, content separated across windows with some content on them, how can we clean the code up?\n\n<!-- <img src=\"/images/ModularImGUI/ImGuiWindow.png\" alt=\"ImGUI Window\" width=\"300px\"/> -->\n![Arc Apellago ImGUI Window](/images/ModularImGUI/ImGUIWindow.png)\n\nFor one, we can contain all the functionality and related information for our given window in its own object. So far, a window is just a context and some updated content. First, let us make a class that holds a `title`, a `showWindow_` class variable, and an `Update` to update this window's content.\n\nA parent class that follows these requirements could look as follows:\n\n```c++\nclass EditorWindow\n{\npublic:\n  explicit EditorWindow(std::string title);\n\n  virtual ~EditorWindow();\n\n  virtual void Update(float dt);\n\nprivate:\n    std::string title_;\n    bool showWindow_;\n};\n```\n\nWhen the previous image is reduced and grouped, you get the following:\n\n![Arc Apellago ImGUI Small Window](/images/ModularImGUI/ImGUIWindowSmall.png)\n\nThis reduced-content window contains three major pieces of content:\n\n- FPS / Display Statistics\n- Debug Settings\n- Collision Settings\n\nAs these are only related as configuration/stats content, we can break these up as well. To do so, let us create another class, `EditorBlock`, which can be attached to any `EditorWindow`.\n\n```c++\nclass EditorBlock\n{\npublic:\n  EditorBlock() = default;\n\n  virtual ~EditorBlock() = default;\n\n  virtual void Update(float dt) = 0;\n};\n```\n\nThese blocks of content are quite simple - just an update for the content they should display.\nThey both allow for separation of code and allows multiple teammates' content on the same window if you are working on a team.\n\nNext, we must adapt our current `EditorWindow` to store these `EditorBlock`s.\n\n```c++\nclass EditorWindow\n{\npublic:\n  explicit EditorWindow(std::string title);\n\n  virtual ~EditorWindow();\n\n  virtual void Update(float dt);\n\n  void AddBlock(EditorBlock* editorBlock);\n\nprivate:\n    std::string title_;\n    std::vector<EditorBlock*> blocks_;\n    bool showWindow_;\n};\n```\n\nIt should be noted that the `Update` function will now just call the `EditorBlock`s' `Update` functions.\n\n## Creating a Block\n\nAs an example of using the blocks, let's implement the `StatsEditorBlock` which displays the following:\n\n![Stats Editor Block](/images/ModularImGUI/ImGUIStatsBlock.png)\n\n**Note:** The `ImGUI FPS` stat has been omitted for simplicity.\n\n`StatsEditorBlock.h`\n\n```c++\n#include \"EditorBlock.h\"\n\nclass StatsEditorBlock : public EditorBlock\n{\npublic:\n    void Update(float dt) override;\n};\n```\n\nNote that creating a class for each block allows it to implement helper methods and have internal state variables - which are often useful.\n\n`StatsEditorBlock.cpp`\n\n```c++\n#include \"imgui.h\"\n#include \"StatsEditorBlock.h\"\n\nvoid StatsEditorBlock::Update(float dt)\n{\n    // Get the needed information from ImGUI\n    auto io = ImGui::GetIO();\n    // Display the FPS\n    ImGui::Text(\"FPS: %f\", io.Framerate);\n    // Display the display size\n    ImGui::Text(\"Display X:%d\", static_cast<int>(io.DisplaySize.x));\n    ImGui::Text(\"Display Y:%d\", static_cast<int>(io.DisplaySize.y));\n}\n```\n\n## Using the Interface\n\nNow that all the functionality is abstracted out and self-contained in other classes, the interface is as simple as choosing which blocks go where.\n\n![Arc Apellago ImGUI Window Sections](/images/ModularImGUI/ImGUIWindowBlocks.png)\n\n```c++\n// Create a window and give it a title\nauto statsConfigWindow = new EditorWindow(\"Stats and Config\");\n// Add a stats block, debug draw config block, and collision config block to the window\nstatsConfigWindow->AddBlock(new StatsEditorBlock());\nstatsConfigWindow->AddBlock(new DebugDrawConfigBlock());\nstatsConfigWindow->AddBlock(new CollisionConfigBlock());\n// Add the window to the main ImGUI update list\nwindows_.emplace_back(statsConfigWindow);\n```\n\n## Conclusion\n\nThis layout separates unrelated code into manageable blocks to allow for easier layout planning and code decoupling. With ImGUI's initialization and update code out of the way, it will be much easier for your teammates to create ImGUI blocks or windows as they require - this played a large role in my team's final ImGUI implementation.\n\n---\n\n**Some final notes and tips:**\n\n- Use the `ifdef` paradigm to compile-out ImGUI from your project if you don't want to ship with it and _test that this define works regularly_.\n- Check out the [docking](https://github.com/ocornut/imgui/tree/docking) branch of ImGUI to help organize your ImGUI windows further.\n\n---\n","slug":"modular-imgui","published":1,"updated":"2021-10-18T07:56:19.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuwd64yc00040bquasqp2je8","content":"<h1 id=\"A-More-Modular-ImGUI-Method\"><a href=\"#A-More-Modular-ImGUI-Method\" class=\"headerlink\" title=\"A More Modular ImGUI Method\"></a>A More Modular ImGUI Method</h1><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p><a href=\"https://github.com/ocornut/imgui\">ImGUI</a> is one of the most popular graphical user interface libraries available for content creation, debugging, and visualization tools. Since this library can be used for many applications, it often becomes highly entangled and messy to work with.</p>\n<p>As a game developer, I was tasked with implementing the main framework and a large amount of ImGUI content for a game called <a href=\"https://store.steampowered.com/app/1454430/Arc_Apellago/\">Arc Apellago</a>. It was overall a simple game, but it also contained a surprising amount of ImGUI content.</p>\n<p><img src=\"/images/ModularImGUI/ArcApellagoImGUI.png\" alt=\"Arc Apellago ImGUI\"></p>\n<h2 id=\"Designing-the-Interface\"><a href=\"#Designing-the-Interface\" class=\"headerlink\" title=\"Designing the Interface\"></a>Designing the Interface</h2><p>Given the design of ImGUI, content separated across windows with some content on them, how can we clean the code up?</p>\n<!-- <img src=\"/images/ModularImGUI/ImGuiWindow.png\" alt=\"ImGUI Window\" width=\"300px\"/> -->\n<p><img src=\"/images/ModularImGUI/ImGUIWindow.png\" alt=\"Arc Apellago ImGUI Window\"></p>\n<p>For one, we can contain all the functionality and related information for our given window in its own object. So far, a window is just a context and some updated content. First, let us make a class that holds a <code>title</code>, a <code>showWindow_</code> class variable, and an <code>Update</code> to update this window’s content.</p>\n<p>A parent class that follows these requirements could look as follows:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorWindow</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">EditorWindow</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title_;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> showWindow_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>When the previous image is reduced and grouped, you get the following:</p>\n<p><img src=\"/images/ModularImGUI/ImGUIWindowSmall.png\" alt=\"Arc Apellago ImGUI Small Window\"></p>\n<p>This reduced-content window contains three major pieces of content:</p>\n<ul>\n<li>FPS / Display Statistics</li>\n<li>Debug Settings</li>\n<li>Collision Settings</li>\n</ul>\n<p>As these are only related as configuration/stats content, we can break these up as well. To do so, let us create another class, <code>EditorBlock</code>, which can be attached to any <code>EditorWindow</code>.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorBlock</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  EditorBlock() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorBlock() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>These blocks of content are quite simple - just an update for the content they should display.<br>They both allow for separation of code and allows multiple teammates’ content on the same window if you are working on a team.</p>\n<p>Next, we must adapt our current <code>EditorWindow</code> to store these <code>EditorBlock</code>s.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorWindow</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">EditorWindow</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AddBlock</span><span class=\"params\">(EditorBlock* editorBlock)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title_;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;EditorBlock*&gt; blocks_;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> showWindow_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>It should be noted that the <code>Update</code> function will now just call the <code>EditorBlock</code>s’ <code>Update</code> functions.</p>\n<h2 id=\"Creating-a-Block\"><a href=\"#Creating-a-Block\" class=\"headerlink\" title=\"Creating a Block\"></a>Creating a Block</h2><p>As an example of using the blocks, let’s implement the <code>StatsEditorBlock</code> which displays the following:</p>\n<p><img src=\"/images/ModularImGUI/ImGUIStatsBlock.png\" alt=\"Stats Editor Block\"></p>\n<p><strong>Note:</strong> The <code>ImGUI FPS</code> stat has been omitted for simplicity.</p>\n<p><code>StatsEditorBlock.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;EditorBlock.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StatsEditorBlock</span> :</span> <span class=\"keyword\">public</span> EditorBlock</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Note that creating a class for each block allows it to implement helper methods and have internal state variables - which are often useful.</p>\n<p><code>StatsEditorBlock.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;imgui.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;StatsEditorBlock.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StatsEditorBlock::Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Get the needed information from ImGUI</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> io = ImGui::GetIO();</span><br><span class=\"line\">    <span class=\"comment\">// Display the FPS</span></span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;FPS: %f&quot;</span>, io.Framerate);</span><br><span class=\"line\">    <span class=\"comment\">// Display the display size</span></span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;Display X:%d&quot;</span>, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(io.DisplaySize.x));</span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;Display Y:%d&quot;</span>, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(io.DisplaySize.y));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Using-the-Interface\"><a href=\"#Using-the-Interface\" class=\"headerlink\" title=\"Using the Interface\"></a>Using the Interface</h2><p>Now that all the functionality is abstracted out and self-contained in other classes, the interface is as simple as choosing which blocks go where.</p>\n<p><img src=\"/images/ModularImGUI/ImGUIWindowBlocks.png\" alt=\"Arc Apellago ImGUI Window Sections\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a window and give it a title</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> statsConfigWindow = <span class=\"keyword\">new</span> EditorWindow(<span class=\"string\">&quot;Stats and Config&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Add a stats block, debug draw config block, and collision config block to the window</span></span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> StatsEditorBlock());</span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> DebugDrawConfigBlock());</span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> CollisionConfigBlock());</span><br><span class=\"line\"><span class=\"comment\">// Add the window to the main ImGUI update list</span></span><br><span class=\"line\">windows_.emplace_back(statsConfigWindow);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This layout separates unrelated code into manageable blocks to allow for easier layout planning and code decoupling. With ImGUI’s initialization and update code out of the way, it will be much easier for your teammates to create ImGUI blocks or windows as they require - this played a large role in my team’s final ImGUI implementation.</p>\n<hr>\n<p><strong>Some final notes and tips:</strong></p>\n<ul>\n<li>Use the <code>ifdef</code> paradigm to compile-out ImGUI from your project if you don’t want to ship with it and <em>test that this define works regularly</em>.</li>\n<li>Check out the <a href=\"https://github.com/ocornut/imgui/tree/docking\">docking</a> branch of ImGUI to help organize your ImGUI windows further.</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"A-More-Modular-ImGUI-Method\"><a href=\"#A-More-Modular-ImGUI-Method\" class=\"headerlink\" title=\"A More Modular ImGUI Method\"></a>A More Modular ImGUI Method</h1><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p><a href=\"https://github.com/ocornut/imgui\">ImGUI</a> is one of the most popular graphical user interface libraries available for content creation, debugging, and visualization tools. Since this library can be used for many applications, it often becomes highly entangled and messy to work with.</p>\n<p>As a game developer, I was tasked with implementing the main framework and a large amount of ImGUI content for a game called <a href=\"https://store.steampowered.com/app/1454430/Arc_Apellago/\">Arc Apellago</a>. It was overall a simple game, but it also contained a surprising amount of ImGUI content.</p>\n<p><img src=\"/images/ModularImGUI/ArcApellagoImGUI.png\" alt=\"Arc Apellago ImGUI\"></p>\n<h2 id=\"Designing-the-Interface\"><a href=\"#Designing-the-Interface\" class=\"headerlink\" title=\"Designing the Interface\"></a>Designing the Interface</h2><p>Given the design of ImGUI, content separated across windows with some content on them, how can we clean the code up?</p>\n<!-- <img src=\"/images/ModularImGUI/ImGuiWindow.png\" alt=\"ImGUI Window\" width=\"300px\"/> -->\n<p><img src=\"/images/ModularImGUI/ImGUIWindow.png\" alt=\"Arc Apellago ImGUI Window\"></p>\n<p>For one, we can contain all the functionality and related information for our given window in its own object. So far, a window is just a context and some updated content. First, let us make a class that holds a <code>title</code>, a <code>showWindow_</code> class variable, and an <code>Update</code> to update this window’s content.</p>\n<p>A parent class that follows these requirements could look as follows:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorWindow</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">EditorWindow</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title_;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> showWindow_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>When the previous image is reduced and grouped, you get the following:</p>\n<p><img src=\"/images/ModularImGUI/ImGUIWindowSmall.png\" alt=\"Arc Apellago ImGUI Small Window\"></p>\n<p>This reduced-content window contains three major pieces of content:</p>\n<ul>\n<li>FPS / Display Statistics</li>\n<li>Debug Settings</li>\n<li>Collision Settings</li>\n</ul>\n<p>As these are only related as configuration/stats content, we can break these up as well. To do so, let us create another class, <code>EditorBlock</code>, which can be attached to any <code>EditorWindow</code>.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorBlock</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  EditorBlock() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorBlock() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>These blocks of content are quite simple - just an update for the content they should display.<br>They both allow for separation of code and allows multiple teammates’ content on the same window if you are working on a team.</p>\n<p>Next, we must adapt our current <code>EditorWindow</code> to store these <code>EditorBlock</code>s.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorWindow</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">EditorWindow</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AddBlock</span><span class=\"params\">(EditorBlock* editorBlock)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title_;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;EditorBlock*&gt; blocks_;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> showWindow_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>It should be noted that the <code>Update</code> function will now just call the <code>EditorBlock</code>s’ <code>Update</code> functions.</p>\n<h2 id=\"Creating-a-Block\"><a href=\"#Creating-a-Block\" class=\"headerlink\" title=\"Creating a Block\"></a>Creating a Block</h2><p>As an example of using the blocks, let’s implement the <code>StatsEditorBlock</code> which displays the following:</p>\n<p><img src=\"/images/ModularImGUI/ImGUIStatsBlock.png\" alt=\"Stats Editor Block\"></p>\n<p><strong>Note:</strong> The <code>ImGUI FPS</code> stat has been omitted for simplicity.</p>\n<p><code>StatsEditorBlock.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;EditorBlock.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StatsEditorBlock</span> :</span> <span class=\"keyword\">public</span> EditorBlock</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Note that creating a class for each block allows it to implement helper methods and have internal state variables - which are often useful.</p>\n<p><code>StatsEditorBlock.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;imgui.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;StatsEditorBlock.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StatsEditorBlock::Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Get the needed information from ImGUI</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> io = ImGui::GetIO();</span><br><span class=\"line\">    <span class=\"comment\">// Display the FPS</span></span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;FPS: %f&quot;</span>, io.Framerate);</span><br><span class=\"line\">    <span class=\"comment\">// Display the display size</span></span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;Display X:%d&quot;</span>, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(io.DisplaySize.x));</span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;Display Y:%d&quot;</span>, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(io.DisplaySize.y));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Using-the-Interface\"><a href=\"#Using-the-Interface\" class=\"headerlink\" title=\"Using the Interface\"></a>Using the Interface</h2><p>Now that all the functionality is abstracted out and self-contained in other classes, the interface is as simple as choosing which blocks go where.</p>\n<p><img src=\"/images/ModularImGUI/ImGUIWindowBlocks.png\" alt=\"Arc Apellago ImGUI Window Sections\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a window and give it a title</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> statsConfigWindow = <span class=\"keyword\">new</span> EditorWindow(<span class=\"string\">&quot;Stats and Config&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Add a stats block, debug draw config block, and collision config block to the window</span></span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> StatsEditorBlock());</span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> DebugDrawConfigBlock());</span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> CollisionConfigBlock());</span><br><span class=\"line\"><span class=\"comment\">// Add the window to the main ImGUI update list</span></span><br><span class=\"line\">windows_.emplace_back(statsConfigWindow);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This layout separates unrelated code into manageable blocks to allow for easier layout planning and code decoupling. With ImGUI’s initialization and update code out of the way, it will be much easier for your teammates to create ImGUI blocks or windows as they require - this played a large role in my team’s final ImGUI implementation.</p>\n<hr>\n<p><strong>Some final notes and tips:</strong></p>\n<ul>\n<li>Use the <code>ifdef</code> paradigm to compile-out ImGUI from your project if you don’t want to ship with it and <em>test that this define works regularly</em>.</li>\n<li>Check out the <a href=\"https://github.com/ocornut/imgui/tree/docking\">docking</a> branch of ImGUI to help organize your ImGUI windows further.</li>\n</ul>\n<hr>\n"},{"title":"Why MVC?","author":"Roland Shum","date":"2021-01-27T01:01:01.000Z","_content":"\n# What is MVC?\n\n## Introduction\n\nHey everyone, lets talk about the Model-View-Controller (MVC) architecture. Writing programs has always been a combat against rising complexity. MVC exploded in popularity around\nthe 2000s when web programming became popular. Today I'll be talking about how MVC can be a toolkit in your development. The traditional approach of programming works on\nInput -> Process -> Output approach while MVC works on Controller → Model -> View.\n\nUnfortunately, the traditional approach usually means the UI coding, the module data, and the module functions are all written in one file. As one can imagine, as the file grows\nthe costs of maintaining all three parts of the code grows, not to mention its lack of testability. This is where MVC comes in. MVC splits the logic three ways: Input, UI, and Data.\nThe UI logic belongs in the View, the input in the Controller, and the data in the Model.\n\nThis separation helps tremendously as each file is dedicated to implementing one thing. So now instead of implementing a ball of spitfire, you're implementing three different\nparts of it, then joining them together.\n\n## MVC Parts\n\n* **Model**: This is the main logic of the module. Anything that deals with backend stuff that only programmers care about belongs here.\n* **View**: Views are components that display the UI. Any logic to do with UI goes here. Typically, this reads the model data, and generates the UI based off that.\n* **Controller**: This component handles user interactions, work with the model, and ultimately select a view to render that displays UI. In an MVC application, the view only displays information;\nthe controller handles and responds to user input and interaction.\n\nThe core concepts of MVC are to split things such that they are not dependent on each other. As such, the Model, View, and Controller can be swapped out anytime.\nFor example, if the View were to be swapped out, it would still be referencing the same Model and Controller.\n\nThe diagram below shows what model takes data from, and is aware of, whom. The Controller takes data from both View and Model, while the View takes data from the Model.\n\n![MVC Diagram](/images/mvc.png)\n\n## Variants\n\nMVC has been around for a long time now, and there are many variants of MVC flying around. In game development, a popular model is the M-VC (Model - ViewController). In this model,\nthe View and Controller are mixed together because its been implemented in the Engine (Unity for example). So your UI script would be a ViewController, and it will have a reference\nto the Model it needs to modify.\n\nAnother popular model is the MVVM (Model-View-ViewModel). This model abstracts the View from the Model, putting a ViewModel class in between.\n\nAs with other software patterns, MVC expresses the \"core of the solution\" to a problem while allowing it to be adapted for each system.\nParticular MVC designs can vary significantly from the traditional description.\n\n## Pros and Cons\n\nPros:\n\n* **Parallel Development** - The MVC modules are all separate from each other, meaning they can be simultaneously developed.\n* **Better prediction of schedule** - By splitting apart one giant module, a programmer has an easier time estimating the development time of such module.\n* **Low Coupling** - By its architecture, there is low coupling between all three modules. Swap the View, and you have a UI completely different.\n* **Scalability** - Responsibility of code is clear, thus it is much easier to maintain and scale the individual modules.\n\nCons:\n\n* **Low navigability** - The code is now harder to navigate because of a new abstraction, and this abstraction requires the user to first understand how responsibility each part\nof MVC takes.\n* **Scattering of code** - Code is now more scattered. Developing a consistent representation in three different compositions can be harder.\n\n## Conclusion\n\nAt the end of the day, MVC is a tool to help decouple features and navigate complexity in code. A hallmark of bad MVC are hacks that allow the Module and View to talk to each\nother. This is *very* frowned upon as it completely breaks the reason why the architecture is used. A proper implementation would mean the Model does not even need to be\naware of the View, as long as the View is fed a Model.\n","source":"_posts/why_mvc.md","raw":"---\ntitle: Why MVC?\nauthor: Roland Shum\ntags:\n- GameDev\n- UI\ndate: 2021-01-27 01:01:01\n---\n\n# What is MVC?\n\n## Introduction\n\nHey everyone, lets talk about the Model-View-Controller (MVC) architecture. Writing programs has always been a combat against rising complexity. MVC exploded in popularity around\nthe 2000s when web programming became popular. Today I'll be talking about how MVC can be a toolkit in your development. The traditional approach of programming works on\nInput -> Process -> Output approach while MVC works on Controller → Model -> View.\n\nUnfortunately, the traditional approach usually means the UI coding, the module data, and the module functions are all written in one file. As one can imagine, as the file grows\nthe costs of maintaining all three parts of the code grows, not to mention its lack of testability. This is where MVC comes in. MVC splits the logic three ways: Input, UI, and Data.\nThe UI logic belongs in the View, the input in the Controller, and the data in the Model.\n\nThis separation helps tremendously as each file is dedicated to implementing one thing. So now instead of implementing a ball of spitfire, you're implementing three different\nparts of it, then joining them together.\n\n## MVC Parts\n\n* **Model**: This is the main logic of the module. Anything that deals with backend stuff that only programmers care about belongs here.\n* **View**: Views are components that display the UI. Any logic to do with UI goes here. Typically, this reads the model data, and generates the UI based off that.\n* **Controller**: This component handles user interactions, work with the model, and ultimately select a view to render that displays UI. In an MVC application, the view only displays information;\nthe controller handles and responds to user input and interaction.\n\nThe core concepts of MVC are to split things such that they are not dependent on each other. As such, the Model, View, and Controller can be swapped out anytime.\nFor example, if the View were to be swapped out, it would still be referencing the same Model and Controller.\n\nThe diagram below shows what model takes data from, and is aware of, whom. The Controller takes data from both View and Model, while the View takes data from the Model.\n\n![MVC Diagram](/images/mvc.png)\n\n## Variants\n\nMVC has been around for a long time now, and there are many variants of MVC flying around. In game development, a popular model is the M-VC (Model - ViewController). In this model,\nthe View and Controller are mixed together because its been implemented in the Engine (Unity for example). So your UI script would be a ViewController, and it will have a reference\nto the Model it needs to modify.\n\nAnother popular model is the MVVM (Model-View-ViewModel). This model abstracts the View from the Model, putting a ViewModel class in between.\n\nAs with other software patterns, MVC expresses the \"core of the solution\" to a problem while allowing it to be adapted for each system.\nParticular MVC designs can vary significantly from the traditional description.\n\n## Pros and Cons\n\nPros:\n\n* **Parallel Development** - The MVC modules are all separate from each other, meaning they can be simultaneously developed.\n* **Better prediction of schedule** - By splitting apart one giant module, a programmer has an easier time estimating the development time of such module.\n* **Low Coupling** - By its architecture, there is low coupling between all three modules. Swap the View, and you have a UI completely different.\n* **Scalability** - Responsibility of code is clear, thus it is much easier to maintain and scale the individual modules.\n\nCons:\n\n* **Low navigability** - The code is now harder to navigate because of a new abstraction, and this abstraction requires the user to first understand how responsibility each part\nof MVC takes.\n* **Scattering of code** - Code is now more scattered. Developing a consistent representation in three different compositions can be harder.\n\n## Conclusion\n\nAt the end of the day, MVC is a tool to help decouple features and navigate complexity in code. A hallmark of bad MVC are hacks that allow the Module and View to talk to each\nother. This is *very* frowned upon as it completely breaks the reason why the architecture is used. A proper implementation would mean the Model does not even need to be\naware of the View, as long as the View is fed a Model.\n","slug":"why_mvc","published":1,"updated":"2021-10-18T07:56:19.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuwd64yd00050bqu5tx14f1d","content":"<h1 id=\"What-is-MVC\"><a href=\"#What-is-MVC\" class=\"headerlink\" title=\"What is MVC?\"></a>What is MVC?</h1><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Hey everyone, lets talk about the Model-View-Controller (MVC) architecture. Writing programs has always been a combat against rising complexity. MVC exploded in popularity around<br>the 2000s when web programming became popular. Today I’ll be talking about how MVC can be a toolkit in your development. The traditional approach of programming works on<br>Input -&gt; Process -&gt; Output approach while MVC works on Controller → Model -&gt; View.</p>\n<p>Unfortunately, the traditional approach usually means the UI coding, the module data, and the module functions are all written in one file. As one can imagine, as the file grows<br>the costs of maintaining all three parts of the code grows, not to mention its lack of testability. This is where MVC comes in. MVC splits the logic three ways: Input, UI, and Data.<br>The UI logic belongs in the View, the input in the Controller, and the data in the Model.</p>\n<p>This separation helps tremendously as each file is dedicated to implementing one thing. So now instead of implementing a ball of spitfire, you’re implementing three different<br>parts of it, then joining them together.</p>\n<h2 id=\"MVC-Parts\"><a href=\"#MVC-Parts\" class=\"headerlink\" title=\"MVC Parts\"></a>MVC Parts</h2><ul>\n<li><strong>Model</strong>: This is the main logic of the module. Anything that deals with backend stuff that only programmers care about belongs here.</li>\n<li><strong>View</strong>: Views are components that display the UI. Any logic to do with UI goes here. Typically, this reads the model data, and generates the UI based off that.</li>\n<li><strong>Controller</strong>: This component handles user interactions, work with the model, and ultimately select a view to render that displays UI. In an MVC application, the view only displays information;<br>the controller handles and responds to user input and interaction.</li>\n</ul>\n<p>The core concepts of MVC are to split things such that they are not dependent on each other. As such, the Model, View, and Controller can be swapped out anytime.<br>For example, if the View were to be swapped out, it would still be referencing the same Model and Controller.</p>\n<p>The diagram below shows what model takes data from, and is aware of, whom. The Controller takes data from both View and Model, while the View takes data from the Model.</p>\n<p><img src=\"/images/mvc.png\" alt=\"MVC Diagram\"></p>\n<h2 id=\"Variants\"><a href=\"#Variants\" class=\"headerlink\" title=\"Variants\"></a>Variants</h2><p>MVC has been around for a long time now, and there are many variants of MVC flying around. In game development, a popular model is the M-VC (Model - ViewController). In this model,<br>the View and Controller are mixed together because its been implemented in the Engine (Unity for example). So your UI script would be a ViewController, and it will have a reference<br>to the Model it needs to modify.</p>\n<p>Another popular model is the MVVM (Model-View-ViewModel). This model abstracts the View from the Model, putting a ViewModel class in between.</p>\n<p>As with other software patterns, MVC expresses the “core of the solution” to a problem while allowing it to be adapted for each system.<br>Particular MVC designs can vary significantly from the traditional description.</p>\n<h2 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h2><p>Pros:</p>\n<ul>\n<li><strong>Parallel Development</strong> - The MVC modules are all separate from each other, meaning they can be simultaneously developed.</li>\n<li><strong>Better prediction of schedule</strong> - By splitting apart one giant module, a programmer has an easier time estimating the development time of such module.</li>\n<li><strong>Low Coupling</strong> - By its architecture, there is low coupling between all three modules. Swap the View, and you have a UI completely different.</li>\n<li><strong>Scalability</strong> - Responsibility of code is clear, thus it is much easier to maintain and scale the individual modules.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li><strong>Low navigability</strong> - The code is now harder to navigate because of a new abstraction, and this abstraction requires the user to first understand how responsibility each part<br>of MVC takes.</li>\n<li><strong>Scattering of code</strong> - Code is now more scattered. Developing a consistent representation in three different compositions can be harder.</li>\n</ul>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>At the end of the day, MVC is a tool to help decouple features and navigate complexity in code. A hallmark of bad MVC are hacks that allow the Module and View to talk to each<br>other. This is <em>very</em> frowned upon as it completely breaks the reason why the architecture is used. A proper implementation would mean the Model does not even need to be<br>aware of the View, as long as the View is fed a Model.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What-is-MVC\"><a href=\"#What-is-MVC\" class=\"headerlink\" title=\"What is MVC?\"></a>What is MVC?</h1><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Hey everyone, lets talk about the Model-View-Controller (MVC) architecture. Writing programs has always been a combat against rising complexity. MVC exploded in popularity around<br>the 2000s when web programming became popular. Today I’ll be talking about how MVC can be a toolkit in your development. The traditional approach of programming works on<br>Input -&gt; Process -&gt; Output approach while MVC works on Controller → Model -&gt; View.</p>\n<p>Unfortunately, the traditional approach usually means the UI coding, the module data, and the module functions are all written in one file. As one can imagine, as the file grows<br>the costs of maintaining all three parts of the code grows, not to mention its lack of testability. This is where MVC comes in. MVC splits the logic three ways: Input, UI, and Data.<br>The UI logic belongs in the View, the input in the Controller, and the data in the Model.</p>\n<p>This separation helps tremendously as each file is dedicated to implementing one thing. So now instead of implementing a ball of spitfire, you’re implementing three different<br>parts of it, then joining them together.</p>\n<h2 id=\"MVC-Parts\"><a href=\"#MVC-Parts\" class=\"headerlink\" title=\"MVC Parts\"></a>MVC Parts</h2><ul>\n<li><strong>Model</strong>: This is the main logic of the module. Anything that deals with backend stuff that only programmers care about belongs here.</li>\n<li><strong>View</strong>: Views are components that display the UI. Any logic to do with UI goes here. Typically, this reads the model data, and generates the UI based off that.</li>\n<li><strong>Controller</strong>: This component handles user interactions, work with the model, and ultimately select a view to render that displays UI. In an MVC application, the view only displays information;<br>the controller handles and responds to user input and interaction.</li>\n</ul>\n<p>The core concepts of MVC are to split things such that they are not dependent on each other. As such, the Model, View, and Controller can be swapped out anytime.<br>For example, if the View were to be swapped out, it would still be referencing the same Model and Controller.</p>\n<p>The diagram below shows what model takes data from, and is aware of, whom. The Controller takes data from both View and Model, while the View takes data from the Model.</p>\n<p><img src=\"/images/mvc.png\" alt=\"MVC Diagram\"></p>\n<h2 id=\"Variants\"><a href=\"#Variants\" class=\"headerlink\" title=\"Variants\"></a>Variants</h2><p>MVC has been around for a long time now, and there are many variants of MVC flying around. In game development, a popular model is the M-VC (Model - ViewController). In this model,<br>the View and Controller are mixed together because its been implemented in the Engine (Unity for example). So your UI script would be a ViewController, and it will have a reference<br>to the Model it needs to modify.</p>\n<p>Another popular model is the MVVM (Model-View-ViewModel). This model abstracts the View from the Model, putting a ViewModel class in between.</p>\n<p>As with other software patterns, MVC expresses the “core of the solution” to a problem while allowing it to be adapted for each system.<br>Particular MVC designs can vary significantly from the traditional description.</p>\n<h2 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h2><p>Pros:</p>\n<ul>\n<li><strong>Parallel Development</strong> - The MVC modules are all separate from each other, meaning they can be simultaneously developed.</li>\n<li><strong>Better prediction of schedule</strong> - By splitting apart one giant module, a programmer has an easier time estimating the development time of such module.</li>\n<li><strong>Low Coupling</strong> - By its architecture, there is low coupling between all three modules. Swap the View, and you have a UI completely different.</li>\n<li><strong>Scalability</strong> - Responsibility of code is clear, thus it is much easier to maintain and scale the individual modules.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li><strong>Low navigability</strong> - The code is now harder to navigate because of a new abstraction, and this abstraction requires the user to first understand how responsibility each part<br>of MVC takes.</li>\n<li><strong>Scattering of code</strong> - Code is now more scattered. Developing a consistent representation in three different compositions can be harder.</li>\n</ul>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>At the end of the day, MVC is a tool to help decouple features and navigate complexity in code. A hallmark of bad MVC are hacks that allow the Module and View to talk to each<br>other. This is <em>very</em> frowned upon as it completely breaks the reason why the architecture is used. A proper implementation would mean the Model does not even need to be<br>aware of the View, as long as the View is fed a Model.</p>\n"},{"title":"Unity Marching Cubes Terrain Generation","author":"Jonathan Bourim, Calin Gavriliuc","date":"2021-01-02T01:01:01.000Z","_content":"\n# Background\n\n---\n\n<style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n## About the Authors\n\nCalin Gavriliuc: Engine Programmer  \nJonathan Bourim: Graphics Engineer & Engine Programmer\n\nWe are Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.\n\n[Here](https://store.steampowered.com/search/?developer=Handshake%20Firm) are some game we have worked on:\n\n![ArcApellago](/images/TerrainGeneration/ArcApellago.jpg)\n![DeltaBlade2700](/images/TerrainGeneration/DeltaBlade2700.jpg)\n\n## Introduction\n\nProject Cleanser is a year-long team game project that we've been working on together. It's a sandbox game set on a large planet, where the player hunts, digs, and upgrades their equipment to challenge the core at the center of the world.\n\nWhile we were brainstorming ideas for our new, year-long game project, we encountered many interesting videos showcasing voxel techniques, such as procedural world generation and deformation.\n\nInspired by Astroneer, we decided to implement a similar method of terrain generation and deformation for our project.\n\n[Some Inspiration](https://www.youtube.com/watch?v=NG1gJvdCE4Q)\n\n## What Is It\n\n### Voxels\n\nVoxels are a volumetric representation of a point in 3D space. While pixels are representative of data in a small **area**, voxels are representative of data in a small **volume**. These values exist on a 3D grid, and have each point in that grid set to a value. With our goal being to make terrain, we used these values to determine the density of the terrain at that point.\nDensity for our volume means it exists in one of two states, **filled** (part of the ground), or **empty** (air).\n\n### Cube Marched Terrain Generation\n\nThe marching cubes algorithm is a fast way to generate a polygonal mesh from a height/density field. This algorithm is used to generate triangles for a mesh from a density field. It is a relatively simple, fast, and efficient algorithm that has been used in many applications.\n\nThe end result can be seen in the following video.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-50-mobile-100\">\n  <source src=\"/images/TerrainGeneration/CubeMarchingSculpting.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n## Goals & Constraints\n\nFor our terrain to function in our environment, we constructed our systems with several priorities in mind:\n\n- Multi-threading\n- Load Balancing\n- Dynamic Loading\n- Determinism / Seeding\n- Spherical Terrain\n\n**Multi-threading:**\n\n- Due to the number of math operations that occur when our terrain is generated or modified, performance is the primary concern of this implementation.\n- We must leverage Unity's Job system for multi-threading to maximize the performance of our terrain generation.\n\n**Load Balancing:**\n\n- As we are generating terrain for a game, it is important to load terrain quickly but also throttle operations as to not overload the user's hardware and reduce FPS to an unplayable level.\n\n**Dynamic Loading:**\n\n- Our world is a large, planet-like, environment. As voxels are stored values representing our world, those values must be stored somewhere.\n- We quickly approach the limitations of modern hardware if we store all of these values in our active memory.  \n\n**Determinism / Seeding:**\n\n- We generate terrain with the use of randomization tools such as noise functions. With that, there is a decision between a uniquely generated new world, and a randomly generated world that is made consistent by the seed that it is given.\n- Our target was the consistent world, as it allows us to leverage Unity's editor to place objects into our world non-procedurally.\n\n**Spherical Terrain:**\n\n- As our world is a spherical planet, we needed the ability generate terrain in a radial manner. This includes developing a spherical, mountainous, surface with a cavernous core.\n\n# Implementation\n\n---\nThe following is a simplified overview of the pipeline:\n![Terrain Manager Flow Chart](/images/TerrainGeneration/TerrainManagerFlowChart.png)\n\n## Chunks\n\nIn the above examples, we have shown visual representations of our density values, but what is assigning them their mesh and position in the world?\nWe use a type we call **Chunks** to store this data and to pass it through our pipelines. In essence, a chunk is a single cube that contains a batch of voxels in the world.\nChunks contain the following information:  \n\n```cs\n// Chunk coordinate\npublic int3 position;\n\n// Density of each voxel (0.0f to 1.0f)\npublic NativeArray<float> densities;\n// Resource type of each voxel (iron, stone, etc)\npublic NativeArray<Resource.Type> resources;\n\n// Mesh data\npublic NativeList<float3> vertices;\npublic NativeList<int> triangles;\npublic NativeList<float3> normals;\npublic NativeList<Color> colors;\n\n// For sorting mesh data into sub-meshes\npublic NativeList<Resource.Type> resourceMap;\n\n// If the chunk has been changed since it was loaded\npublic bool hasChanged;\n```\n\nThe data buffers are using Unity's Native structures (C++ InterOp) to allow us to make use of the Burst Compiler.\n\n## Marching Cubes Algorithm\n\n### Triangulation\n\nAs mentioned above, the marching cube algorithm utilizes voxels to determine the density of a particular volume. This is interpreted as whether or not that point is part of the surface of our terrain. If we take the base case, a single voxel, we can look at its corner points to determine the triangle configuration of the cube that the voxel encompasses.\n\nThere exist 2^8 triangle configurations. Some can be seen below:\n\n<img src=\"/images/TerrainGeneration/MarchingCubesConfigs.png\" width=\"60%\"/>\n\nThe orange points at the corners indicate that they are part of the ground, while the empty corners are air. If we extend this idea to a larger grid, these triangles will connect with one another to form the basis of the terrain depending on the configuration of these values.  \n\n![Marching Example](/images/TerrainGeneration/MarchingExample.png)\n\nThe above image was constructed by setting all the voxels' density values within a spherical radius of the center of the sphere to +1 (ground / filled state), and outside of the radius to 0 (air / empty state). The algorithm considers the transition between the ground and the air to be where the surface manifests, which is why our surface is a radial shape from the center of the sphere.\n\n### Smoothing\n\nYou get a blocky sphere when you treat your values as a boolean, either representing a value below the surface or above it. However, if we use a gradient of density values from one voxel to the next, we can utilize interpolation to alter the angle of the triangles we are constructing.\n\n**Smoothing Method 1:**\n\nOne method of doing so is by setting the density values to a gradient ranging from +1 to 0, where +1 is the center of the sphere, 0.5 is the surface, and 0 is the boundary of our voxel grid. In this case, the boundary would be `2 * radius` or the `diameter` of the \"world sphere\".\n\n![Marching Cubes Density Gradient](/images/TerrainGeneration/MarchingCubesDensityGradient.png)\n\n**Smoothing Method 2:**\n\nAnother method of achieving this effect is through a similar technique. Instead of treating the whole \"world sphere\" as a gradient, only treat the region around the surface as a gradient. This becomes especially useful when applied in a game setting since most nodes are either `1` or `0` and not a floating point value.\n\n![Marching Cubes Density Gradient](/images/TerrainGeneration/MarchingCubesDensityGradientEnhanced.png)\n\n**Final Result:**\n\nRegardless of which method is chosen, you get the following:\n\n![Marching Example Smooth](/images/TerrainGeneration/MarchingExampleSmooth.png)\n\nThis diagram shows how a surface is interpolated between two vertices with varying density values.\n\n<img src=\"/images/TerrainGeneration/MarchingCubesInterpolation.png\" width=\"60%\"/>\n<!--- Source link for the image above --->\n<a href=\"http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/\">\n  <p style=\"text-align:center\">\n  Image Source\n  </p>\n</a>\n\nThe following interpolation code, will achieve the smoothing shown above:\n\n```cs\n// Smooths densities between 0.0f and 1.0f\n// ISO Level / Height is 0.5f\nprivate float3 InterpolateVerts(float3 v1, float3 v2, \n                                float  s1, float s2)\n{\n    const float ISOLevel = 0.5f;\n    const float epsilon = 0.00001f;\n    // Account for edge case using above epsilon value\n    if (Mathf.Abs(ISOLevel - s1) < epsilon ||\n        Mathf.Abs(ISOLevel - s2) < epsilon ||\n        Mathf.Abs(s1 - s2) < epsilon)\n        return v1 + (v2 - v1) * (s1 - s2);\n    // Lerp the point using the density values\n    float t2 = (ISOLevel - s1) / (s2 - s1);\n    return v1 + t2 * (v2 - v1);\n}\n```\n\n## Chunk Generation\n\n![Terrain Manager Flow Chart](/images/TerrainGeneration/TerrainManagerFlowChartRequestChunk.png)\n\nNow that we have our data container, and a method to convert that data to a mesh, we need to populate the container with data. Upon being requested, the chunk's density values are generated and the chunk goes through a two-step process of executing the marching cubes algorithm and mesh construction.\n\n### Stitching and Sharing Chunk Edge Data\n\nIn a multithreaded environment, it is important to package chunks as self-contained structures as to prevent read & write race conditions between threads. Since the cube marching algorithm generates triangles for the regions _between_ nodes, voxels, it is not trivial to split up a 3D space into chunks of nodes.\n\nThe solution to this is to share data between chunks in some way. In our case, we went with duplicating node in the positive x,y,z axis. This was a memory vs multithreading complexity tradeoff.\n\nWith this system, we needed to be careful when modifying shared nodes between chunks. An example of where one would need to be careful with duplication of data is **deformation**. If you deform on the corner of several chunks sharing an edge at inconsistent rates, that would break the consistency of the duplicated values. What results visually is a tearing effect, a gap in between the chunks. This requires additional attention to the synchronicity of the logic operating on the voxel data. \n\n![Voxel Tearing](/images/TerrainGeneration/VoxelTearing.png)\n\nDuplicated edge data also comes with the requirement of having to edit chunk edges only when all neighboring chunks are loaded as well.\n\n\n### Chunk Terrain Generation\n\n**Coming Soon**\n\n### Chunk Loading\n\n![Chunk Loader Flow Chart](/images/TerrainGeneration/TerrainManagerFlowChartChunkLoader.png)\n\nNow that we can generate chunks that also look like interesting terrain, we need a way to selectively pick which chunks to load as to not overwhelm a user's computer with generating an entire world and expecting it all to fit in their RAM. We call this chunk loading. Similarly, this is also applied to unloading chunks.\n\nWe do this by loading a `2n` by `2n` by `2n` cube around the player. You can take `n` number of chunks in each axis (`[x+n, x-n]`, `[y+n, y-n]`, and `[z+n, z-n]`) outward from the player and request them to be loaded.  \nSimilarly if a loaded chunk falls outside of this cube, unload it.\n\n![Chunk Loading Distances](/images/TerrainGeneration/ChunkLoadingDistances.png)\n\nWhen loading and unloading chunks, it was important to remember that chunks share edge data so borders of chunks cannot be edited without neighboring chunks being loaded first to preserve this \"synced\" state.\n\nInitial implementations of chunk loading a small region around the player produces the following:\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/InitialChunkLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n### Chunk Serialization\n\n![Terrain Manager Flow Chart Terrain Serializer](/images/TerrainGeneration/TerrainManagerFlowChartTerrainSerializer.png)\n\nFor our implementation, we used a simple approach for storing chunks to a file. Given a known size of a chunk (n by n by n nodes), we can read and write entire 3D arrays of data as their binary representation. This is done for both the density and resource values.\n\nIt should be noted that, as a trivial form of optimization, only chunks changed by the player are saved to the disk. Since our terrain generation is deterministic and faster than loading chunks, it is faster to re-generate the chunk on request compared to loading that chunk from the disk. This, in return, also saves on disk space.\n\nThese load and unload requests are performed within Unity Jobs to further utilize the player's CPU cores from a multithreaded approach and to keep consistency with the rest of the systems.\n\n### Performance\n\nDue to real-time gameplay restrictions and the amount of terrain a player is required to load, chunk generation/loading/marching needs to be highly optimized.\n\nAs this is one of the most performance-critical portions of our game, we use Unity's Job system to multi-thread the execution of this code. Originally, we had experimented with compute shader pipelines, which are faster in normal circumstances. However, after performance testing, Unity's Burst Compiler in conjunction with the job system has outpaced these compute pipelines due to the overhead of large data buffer I/O with the GPU. The overhead of I/O was larger than the time for operations to be performed on that buffer, ultimately resulting in CPU-based computation being faster.\n\n#### Optimization\n\n**Major sources of optimization:**\n\n- Chunk Stages\n- Cross-Frame Work\n- Maximizing Usage & Throttling\n- Priority Queueing\n- Level Of Detail (LOD)\n\nThe following is frame-by-frame profiling of the chunk processing system using multiple distinct job stages and cross-frame job completion of the chunk request pipeline (after optimization):\n![Terrain Manager Flow Chart](/images/TerrainGeneration/TerrainManagerJobSystem.png)\n\nYou can see the main thread running horizontally across the top, and seven more threads running the jobs in parallel - in this case. \n\n#### Chunk Stages\n\nKey Terms:\n\n- **Frame**: One game processing frame / update loop.\n- **Work State**: One of three stages a chunk will go through to be processed fully.\n- **Work State Loop**: One loop of all three work state steps.\n\nOur system uses three work states for processing chunks. These work states only allow a certain type, and by extension a certain amount, of work to be done on chunks for any given grouping of frames.\nThis technique greatly reduces lag spikes a user will experience from loading chunks.\n\nIf a work state is completed early, the system will move on to the next work state without waiting for the full-frame count.\n\nFor any given frame, only process one of three work states:\n\n```cs\n// Do the required work for this frame\nProcessChunks();\n\n// If the current \"work state\" is still being processed, do not move to the next work state\nif (!ProcessingChunks())\n{ \n  // Move on to the next \"work state\" for next frame\n  _workState = _workState switch {\n    WORK_STATE.FILL => WORK_STATE.MARCH, // Generate/Load/Populate chunk with data\n    WORK_STATE.MARCH => WORK_STATE.MESH, // Cube march the chunk\n    WORK_STATE.MESH => WORK_STATE.FILL,  // Generate the chunk's mesh\n    _ => _workState\n  };\n}\n```\n\nProvided is a visual example of breaking up two sets of jobs across two frames:\n\n![Breaking Up Terrain Jobs](/images/TerrainGeneration/BreakingUpJobs.png)\n\nIt should be noted that, despite this optimization being applied, the nature of this game requires some chunks to be processed immediately. For example, if a player deforms/destroys part of the terrain, the changed chunks must be processed immediately as to not produce visual lag to the user. These chunks are \"fast-forwarded\" through this system and are processed within one frame.\n\n#### Cross-Frame Work\n\nKey Terms:\n\n- **Processing Spike**: A period of higher stress on the CPU, often causing visual lag/\"jumps\" to the user.\n\nIn general, each work stage will take a maximum of three frames. This technique gives jobs the ability to span across multiple frames, if needed, causing processing spikes on the CPU to \"average out\".\n\nAfter allowing cross-frame jobs, after this optimization is applied, you can see the job (`GenerateHeightJob` in purple) running across two game frames as to not hold the main gameplay thread:\n\n![Cross-Frame Jobs](/images/TerrainGeneration/CrossFrameJobs.png)\n\n#### Maximizing Usage & Throttling\n\nKey Terms:\n\n- **Job's Average Processing Requirements**: The amount of work/time a given job takes/requires when being processed by the CPU. Generally, this is a rough estimate.\n\nAs with the previously mentioned techniques, it is important to maximize usage of the CPU while also not overloading it. Given a set of chunks to be processed, instead of computing all of them in one go, breaking up that set into batches based on CPU speed / CPU core count / a job's average processing requirements is a good way to determine how many chunks to process in one complete work state loop.\n\nThis optimization technique is most effective when the user loads _many_ chunks at once, such as when they first load the world.\\\nThe following image shows all chunks around the player being populated with height values in one go:\n\n![Job System Overload](/images/TerrainGeneration/JobSystemOverload.png)\n\nWhile this maximizes CPU usage, this ends up halting any single chunk from loading/rendering for a player until _all_ chunks have been processed - which far from ideal. This also has the side effect of preventing those threads from being used by any other job(s) during their processing.\n\nInstead, using a per-frame burst of one-job-per-thread (or more, depending on a job's average length) paradigm allows for maximizing thread usage without blocking other jobs or preventing rendering/loading. \n\nUsing one job on each thread in per frame, a much more reasonable result is produced:\n\n![Single Frame Burst](/images/TerrainGeneration/SingleFrameJobBurst.png)\n\n#### Priority Queueing\n\nKey Terms:\n\n- **High Priority Chunk Request**: A chunk that needs to be processed by the end of the _current_ frame.\n- **Low Priority Chunk Request**: A chunk that needs to be processed as fast as possible, with minimal lag.\n\nDeciding which chunks should be processed first was briefly mentioned above with fast-forwarding, but it is, in reality, more complicated.\n\nOnce a chunk is requested (either high or low priority), the system then sorts it into a queue based on current queued chunk priorities and will update priorities each frame, as needed.\n\nThe following is a general set of rules we followed when implementing chunk processing priority queueing:\n\n- High priority chunks:\n  - No need to sort these requested chunks as they are _all_ processing that frame.\n  - Always pulled from the queue by the system _before_ low priority chunks\n- Low priority chunks:\n  - Sorted by a weight which is usually the squared distance to the player as these chunks usually come from chunk loading\n  - Pulled from the queue by the system when there are not enough high priority chunks to process\n\nThe following code reflects these set of rules:\n\n```cs\n// Grab high priority chunks (processed this frame)\nwhile (_chunksToRegenerate.HighPriorityCount > 0)\n  // Grab any high priority chunk\n  _chunksToRegeneratePriorityBatch.Add(_chunksToRegenerate.Pop());\n\n// If at the start of a new work state loop\nif (_workState == WORK_STATE.FILL)\n  // While there is still space to fill for the max job count - high priority chunk count\n  while (_chunksToRegenerateBatch.Count < _maxJobCount && _chunksToRegenerate.LowPriorityCount > 0)\n    // Pop the next item from the priority queue, sorted by distance to player\n    _chunksToRegenerateBatch.Add(_chunksToRegenerate.Pop());\n```\n\nA rough example of 2D priority queueing, a cross-section of the 3D chunk loaded cube, is demonstrated as an interactive demo below. Move your cursor around to see which chunks have priority to be loaded relative to your cursor.\n\n**Note:** This demo's source code does not reflect the project's implementation. It is purely for a visual understanding of the chunk loading concept.\n\n<div style=\"text-align: center\">\n <button class=\"btn btn-primary\" onclick=\" window.open('https://openprocessing.org/sketch/1052217/embed','_blank')\">2D Priority Queue Demo</button>\n</div>\n\nThe maximum number of chunks a three-stage loop can process is given by the following: \n`Max(Number Of High Priority Chunk Count, Number Of Reasonable Chunks Per Stage Loop)`  \nThat is to say that high priority chunks are always processed with low priority chunks filling in any free slots in CPU cores.\n\nUsing a priority queue and updating weights as needed, you get responsive chunk loading that can adapt quickly to, for example, changes in player position:\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/TerrainChunkPriorityLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nOnce applying a similar technique to chunk unloading, you get fluid and responsive terrain.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/TerrainChunkPriorityLoadingUnloading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n#### Level Of Detail (LOD)\n\nKey Terms:\n\n- **Level of Detail**: Also known as LOD, it is the amount (level) of data (detail) you are choosing to display to the user. This is often used on far-away objects since it is the same to the user visually but faster to compute.\n\nGiven our grid-based voxel terrain, LOD was trivial to implement on a basic level. Since our chunks are 16x16x16, LOD can be a power of two to reduce the amount of data that needs to be computed/rendered out of this chunk.\n\nAs a simple example, take the following 2D grid of 16 voxels, 17 nodes:\n\n**Key:**\n\n- **Purple Circles**: Density data nodes.\n- **Black Squares**: Voxels generated from corner nodes.\n\n<table width=\"100%\">\n  <tr>\n    <th>LOD of 1:</th>\n    <th>LOD of 2:</th>\n    <th>LOD of 4:</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD1.png\" alt=\"Cube Marching LOD 1\" width=\"100%\"/></td>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD2.png\" alt=\"Cube Marching LOD 2\" width=\"100%\"/></td>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD4.png\" alt=\"Cube Marching LOD 4\" width=\"100%\"/></td>\n  </tr>\n</table>\n\nAs can be seen, voxels sample from fewer nodes, but are scaled to take up the same amount of space.\n\nThe LOD gradients shown below demonstrate this logic applied to the terrain.\n\n<table width=\"100%\">\n  <tr>\n    <th>Smooth Sphere LOD Gradient:</th>\n    <th>Noisy Sphere LOD Gradient</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/TerrainGeneration/LODSmoothSphere.png\" alt=\"Smooth Sphere LOD Gradient:\" width=\"500px\"/></td>\n    <td><img src=\"/images/TerrainGeneration/LODNoisySphere.png\" alt=\"Noisy Sphere LOD Gradient\" width=\"500px\"/></td>\n  </tr>\n</table>\n\nDespite promising results, you would need to apply an algorithm similar to [TransVoxel](https://transvoxel.org/) to implement a more sophisticated solution that doesn't generate holes between differing LOD levels. As of currently, we do not implement this algorithm.\n\n<!--\nTODO:\n- Resource collection\n-->\n\n## Terrain Features\n\n### Terrain / Voxel Manipulation\n\nWhen we manipulate our voxel terrain, we alter the density values in an area of influence.\nIn our game, we use a spherical brush to accomplish this, resulting in spherical cutouts of the terrain at the target area.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/VoxelManipulation.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nIn the example above, you can see both additive and subtractive operations. Thankfully, these translate straightforwardly to adding and subtracting from the density values in our target area in a radial gradient.\n\nBelow is an interactive demo of the logic functioning in a 2D variant. Mouse over the area to subtract or add from a given area, altering the terrain. These values are either 1 or -1, representing a filled or unfilled area, respectively. As there is no gradient, this will result in unsmooth terrain.\n\nClick the left mouse button to toggle addition/subtraction.\n\n<div style=\"text-align: center\">\n <button class=\"btn btn-primary\" onclick=\" window.open('https://www.openprocessing.org/sketch/1051758/embed/','_blank')\">Brush Deformation Demo</button>\n</div>\n\n### Editor Mode\n\nProcedural generation is typically executed at runtime. In other words, our voxel terrain would only be visible upon launching the game into Play Mode.\nHowever, this is problematic in the case where we would like to edit our scene. How would we determine where to place a sign sticking out of the ground, or a treasure chest?\nWe'd need a way to edit the scene with the world already constructed. Our solution is editor-time world loading.  \n\nBy using proximity loading of our chunks as found at runtime, we may move the player around in the scene to load whichever portion is needed to us.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/EditorMode.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nWe track the current state of the Unity editor to determine when to dispose of the memory or create it anew.\nEntering play mode or edit mode will reconstruct the necessary memory for the voxel terrain.\n\n<!--\n# Final Notes\n***TODO***\n~~In conclusion, this project produced an impressive and responsive terrain that makes for great gameplay.~~\n\n## Further Implementations\n- Hot-loading\n- \n-->\n\n<!---\n# ---- OTHER: ----\n## Spherical\n\n# EXTRA\n## Process of Creating a Chunk\n\nOnce a chunk entity is created and its position is assigned, it will enter the system chain to be processed in the following order\n\n## Data Generation\n## Cube Marching\n### Solution Lookup\n### Smoothing\n## Mesh Generation\nThe process of mesh generation is split into three steps:\n1) **Create Chunk Mesh**: Create the mesh object, and copy the data to the new mesh\n1) **Bake Chunk Mesh**: Bake the mesh using Unity\\'s `Physics.BakeMesh`\n1) **Set Chunk Mesh**: Create a GameObject, and assign it the new mesh.\nThe reason mesh generation is split into three distinct steps is due to the inability of steps #1 & #3 to be parallelized with burst compilation, while step #2 can be.\n### Creating the Chunk\\'s Mesh\nThis step simply creates the mesh and copies the data from the `IBufferElementData` components to the new mesh.\n\nThis is done without burst and sequentially - due to Unity\\'s `Mesh` being non-blittable.\n### Baking the Chunk\\'s Mesh\n### Setting the Chunk\\'s Mesh\n## Live Editing With Unity Atoms\n## Post Mortem\n\n- Burst-Compiled Unity Jobs\n- Chunk Loading\n- Marching Cubes\n- Unity Atoms\n---\n**NOTE**\nThe cost of using components as flags is not insignificant! The trade-off is knowing what stage any given chunk is at for debugging.\n---\n## Post Mortem\n## Unity ECS\n### Setup\nTo utilize the speed of Unity\\'s provided ECS, chunks were entities that consist of data components and their associated GameObject to store + render the mesh. Along the way, they also get tagged/untagged with \"Flag\" components to tell the next system to operate on them.\nThe ECS chunk, after processing, would contain the following component data:\n![Chunk Components](/images/TerrainGeneration/ChunkComponents.png)\n\n### Why It Didn't Work \nAfter all the work setting up systems, components, and way more, it seemed like the team was constantly fighting Unity ECS to make it fit our needs. System order was impossible to configure, command buffers wouldn't execute on the frames we needed, adding and removing components correctly was complex to manage, and what could run within a system was very restrictive.\n\nDespite this, these problems were not the deal-breaker. Even if all these problems were alleviated, we needed all these systems to process chunk entities within one frame. When the player deforms the terrain, the \"frame rate of deformation\" should run at the same rate as the rest of the game. This was not the case when the systems ran across multiple frames as the deformation would run at a perceived FPS of Frame-Rate / System-Frame-Count and would look choppy.\n\n### The Fix\nLuckily, systems are very similar to Unity's job system which allowed up to transfer over easily.\n-->\n","source":"_posts/terrain-generation.md","raw":"---\ntitle: Unity Marching Cubes Terrain Generation\nauthor: Jonathan Bourim, Calin Gavriliuc\ntags:\n- Unity\n- GameDev\ndate: 2021-01-02 01:01:01\n---\n\n# Background\n\n---\n\n<style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n## About the Authors\n\nCalin Gavriliuc: Engine Programmer  \nJonathan Bourim: Graphics Engineer & Engine Programmer\n\nWe are Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.\n\n[Here](https://store.steampowered.com/search/?developer=Handshake%20Firm) are some game we have worked on:\n\n![ArcApellago](/images/TerrainGeneration/ArcApellago.jpg)\n![DeltaBlade2700](/images/TerrainGeneration/DeltaBlade2700.jpg)\n\n## Introduction\n\nProject Cleanser is a year-long team game project that we've been working on together. It's a sandbox game set on a large planet, where the player hunts, digs, and upgrades their equipment to challenge the core at the center of the world.\n\nWhile we were brainstorming ideas for our new, year-long game project, we encountered many interesting videos showcasing voxel techniques, such as procedural world generation and deformation.\n\nInspired by Astroneer, we decided to implement a similar method of terrain generation and deformation for our project.\n\n[Some Inspiration](https://www.youtube.com/watch?v=NG1gJvdCE4Q)\n\n## What Is It\n\n### Voxels\n\nVoxels are a volumetric representation of a point in 3D space. While pixels are representative of data in a small **area**, voxels are representative of data in a small **volume**. These values exist on a 3D grid, and have each point in that grid set to a value. With our goal being to make terrain, we used these values to determine the density of the terrain at that point.\nDensity for our volume means it exists in one of two states, **filled** (part of the ground), or **empty** (air).\n\n### Cube Marched Terrain Generation\n\nThe marching cubes algorithm is a fast way to generate a polygonal mesh from a height/density field. This algorithm is used to generate triangles for a mesh from a density field. It is a relatively simple, fast, and efficient algorithm that has been used in many applications.\n\nThe end result can be seen in the following video.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-50-mobile-100\">\n  <source src=\"/images/TerrainGeneration/CubeMarchingSculpting.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n## Goals & Constraints\n\nFor our terrain to function in our environment, we constructed our systems with several priorities in mind:\n\n- Multi-threading\n- Load Balancing\n- Dynamic Loading\n- Determinism / Seeding\n- Spherical Terrain\n\n**Multi-threading:**\n\n- Due to the number of math operations that occur when our terrain is generated or modified, performance is the primary concern of this implementation.\n- We must leverage Unity's Job system for multi-threading to maximize the performance of our terrain generation.\n\n**Load Balancing:**\n\n- As we are generating terrain for a game, it is important to load terrain quickly but also throttle operations as to not overload the user's hardware and reduce FPS to an unplayable level.\n\n**Dynamic Loading:**\n\n- Our world is a large, planet-like, environment. As voxels are stored values representing our world, those values must be stored somewhere.\n- We quickly approach the limitations of modern hardware if we store all of these values in our active memory.  \n\n**Determinism / Seeding:**\n\n- We generate terrain with the use of randomization tools such as noise functions. With that, there is a decision between a uniquely generated new world, and a randomly generated world that is made consistent by the seed that it is given.\n- Our target was the consistent world, as it allows us to leverage Unity's editor to place objects into our world non-procedurally.\n\n**Spherical Terrain:**\n\n- As our world is a spherical planet, we needed the ability generate terrain in a radial manner. This includes developing a spherical, mountainous, surface with a cavernous core.\n\n# Implementation\n\n---\nThe following is a simplified overview of the pipeline:\n![Terrain Manager Flow Chart](/images/TerrainGeneration/TerrainManagerFlowChart.png)\n\n## Chunks\n\nIn the above examples, we have shown visual representations of our density values, but what is assigning them their mesh and position in the world?\nWe use a type we call **Chunks** to store this data and to pass it through our pipelines. In essence, a chunk is a single cube that contains a batch of voxels in the world.\nChunks contain the following information:  \n\n```cs\n// Chunk coordinate\npublic int3 position;\n\n// Density of each voxel (0.0f to 1.0f)\npublic NativeArray<float> densities;\n// Resource type of each voxel (iron, stone, etc)\npublic NativeArray<Resource.Type> resources;\n\n// Mesh data\npublic NativeList<float3> vertices;\npublic NativeList<int> triangles;\npublic NativeList<float3> normals;\npublic NativeList<Color> colors;\n\n// For sorting mesh data into sub-meshes\npublic NativeList<Resource.Type> resourceMap;\n\n// If the chunk has been changed since it was loaded\npublic bool hasChanged;\n```\n\nThe data buffers are using Unity's Native structures (C++ InterOp) to allow us to make use of the Burst Compiler.\n\n## Marching Cubes Algorithm\n\n### Triangulation\n\nAs mentioned above, the marching cube algorithm utilizes voxels to determine the density of a particular volume. This is interpreted as whether or not that point is part of the surface of our terrain. If we take the base case, a single voxel, we can look at its corner points to determine the triangle configuration of the cube that the voxel encompasses.\n\nThere exist 2^8 triangle configurations. Some can be seen below:\n\n<img src=\"/images/TerrainGeneration/MarchingCubesConfigs.png\" width=\"60%\"/>\n\nThe orange points at the corners indicate that they are part of the ground, while the empty corners are air. If we extend this idea to a larger grid, these triangles will connect with one another to form the basis of the terrain depending on the configuration of these values.  \n\n![Marching Example](/images/TerrainGeneration/MarchingExample.png)\n\nThe above image was constructed by setting all the voxels' density values within a spherical radius of the center of the sphere to +1 (ground / filled state), and outside of the radius to 0 (air / empty state). The algorithm considers the transition between the ground and the air to be where the surface manifests, which is why our surface is a radial shape from the center of the sphere.\n\n### Smoothing\n\nYou get a blocky sphere when you treat your values as a boolean, either representing a value below the surface or above it. However, if we use a gradient of density values from one voxel to the next, we can utilize interpolation to alter the angle of the triangles we are constructing.\n\n**Smoothing Method 1:**\n\nOne method of doing so is by setting the density values to a gradient ranging from +1 to 0, where +1 is the center of the sphere, 0.5 is the surface, and 0 is the boundary of our voxel grid. In this case, the boundary would be `2 * radius` or the `diameter` of the \"world sphere\".\n\n![Marching Cubes Density Gradient](/images/TerrainGeneration/MarchingCubesDensityGradient.png)\n\n**Smoothing Method 2:**\n\nAnother method of achieving this effect is through a similar technique. Instead of treating the whole \"world sphere\" as a gradient, only treat the region around the surface as a gradient. This becomes especially useful when applied in a game setting since most nodes are either `1` or `0` and not a floating point value.\n\n![Marching Cubes Density Gradient](/images/TerrainGeneration/MarchingCubesDensityGradientEnhanced.png)\n\n**Final Result:**\n\nRegardless of which method is chosen, you get the following:\n\n![Marching Example Smooth](/images/TerrainGeneration/MarchingExampleSmooth.png)\n\nThis diagram shows how a surface is interpolated between two vertices with varying density values.\n\n<img src=\"/images/TerrainGeneration/MarchingCubesInterpolation.png\" width=\"60%\"/>\n<!--- Source link for the image above --->\n<a href=\"http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/\">\n  <p style=\"text-align:center\">\n  Image Source\n  </p>\n</a>\n\nThe following interpolation code, will achieve the smoothing shown above:\n\n```cs\n// Smooths densities between 0.0f and 1.0f\n// ISO Level / Height is 0.5f\nprivate float3 InterpolateVerts(float3 v1, float3 v2, \n                                float  s1, float s2)\n{\n    const float ISOLevel = 0.5f;\n    const float epsilon = 0.00001f;\n    // Account for edge case using above epsilon value\n    if (Mathf.Abs(ISOLevel - s1) < epsilon ||\n        Mathf.Abs(ISOLevel - s2) < epsilon ||\n        Mathf.Abs(s1 - s2) < epsilon)\n        return v1 + (v2 - v1) * (s1 - s2);\n    // Lerp the point using the density values\n    float t2 = (ISOLevel - s1) / (s2 - s1);\n    return v1 + t2 * (v2 - v1);\n}\n```\n\n## Chunk Generation\n\n![Terrain Manager Flow Chart](/images/TerrainGeneration/TerrainManagerFlowChartRequestChunk.png)\n\nNow that we have our data container, and a method to convert that data to a mesh, we need to populate the container with data. Upon being requested, the chunk's density values are generated and the chunk goes through a two-step process of executing the marching cubes algorithm and mesh construction.\n\n### Stitching and Sharing Chunk Edge Data\n\nIn a multithreaded environment, it is important to package chunks as self-contained structures as to prevent read & write race conditions between threads. Since the cube marching algorithm generates triangles for the regions _between_ nodes, voxels, it is not trivial to split up a 3D space into chunks of nodes.\n\nThe solution to this is to share data between chunks in some way. In our case, we went with duplicating node in the positive x,y,z axis. This was a memory vs multithreading complexity tradeoff.\n\nWith this system, we needed to be careful when modifying shared nodes between chunks. An example of where one would need to be careful with duplication of data is **deformation**. If you deform on the corner of several chunks sharing an edge at inconsistent rates, that would break the consistency of the duplicated values. What results visually is a tearing effect, a gap in between the chunks. This requires additional attention to the synchronicity of the logic operating on the voxel data. \n\n![Voxel Tearing](/images/TerrainGeneration/VoxelTearing.png)\n\nDuplicated edge data also comes with the requirement of having to edit chunk edges only when all neighboring chunks are loaded as well.\n\n\n### Chunk Terrain Generation\n\n**Coming Soon**\n\n### Chunk Loading\n\n![Chunk Loader Flow Chart](/images/TerrainGeneration/TerrainManagerFlowChartChunkLoader.png)\n\nNow that we can generate chunks that also look like interesting terrain, we need a way to selectively pick which chunks to load as to not overwhelm a user's computer with generating an entire world and expecting it all to fit in their RAM. We call this chunk loading. Similarly, this is also applied to unloading chunks.\n\nWe do this by loading a `2n` by `2n` by `2n` cube around the player. You can take `n` number of chunks in each axis (`[x+n, x-n]`, `[y+n, y-n]`, and `[z+n, z-n]`) outward from the player and request them to be loaded.  \nSimilarly if a loaded chunk falls outside of this cube, unload it.\n\n![Chunk Loading Distances](/images/TerrainGeneration/ChunkLoadingDistances.png)\n\nWhen loading and unloading chunks, it was important to remember that chunks share edge data so borders of chunks cannot be edited without neighboring chunks being loaded first to preserve this \"synced\" state.\n\nInitial implementations of chunk loading a small region around the player produces the following:\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/InitialChunkLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n### Chunk Serialization\n\n![Terrain Manager Flow Chart Terrain Serializer](/images/TerrainGeneration/TerrainManagerFlowChartTerrainSerializer.png)\n\nFor our implementation, we used a simple approach for storing chunks to a file. Given a known size of a chunk (n by n by n nodes), we can read and write entire 3D arrays of data as their binary representation. This is done for both the density and resource values.\n\nIt should be noted that, as a trivial form of optimization, only chunks changed by the player are saved to the disk. Since our terrain generation is deterministic and faster than loading chunks, it is faster to re-generate the chunk on request compared to loading that chunk from the disk. This, in return, also saves on disk space.\n\nThese load and unload requests are performed within Unity Jobs to further utilize the player's CPU cores from a multithreaded approach and to keep consistency with the rest of the systems.\n\n### Performance\n\nDue to real-time gameplay restrictions and the amount of terrain a player is required to load, chunk generation/loading/marching needs to be highly optimized.\n\nAs this is one of the most performance-critical portions of our game, we use Unity's Job system to multi-thread the execution of this code. Originally, we had experimented with compute shader pipelines, which are faster in normal circumstances. However, after performance testing, Unity's Burst Compiler in conjunction with the job system has outpaced these compute pipelines due to the overhead of large data buffer I/O with the GPU. The overhead of I/O was larger than the time for operations to be performed on that buffer, ultimately resulting in CPU-based computation being faster.\n\n#### Optimization\n\n**Major sources of optimization:**\n\n- Chunk Stages\n- Cross-Frame Work\n- Maximizing Usage & Throttling\n- Priority Queueing\n- Level Of Detail (LOD)\n\nThe following is frame-by-frame profiling of the chunk processing system using multiple distinct job stages and cross-frame job completion of the chunk request pipeline (after optimization):\n![Terrain Manager Flow Chart](/images/TerrainGeneration/TerrainManagerJobSystem.png)\n\nYou can see the main thread running horizontally across the top, and seven more threads running the jobs in parallel - in this case. \n\n#### Chunk Stages\n\nKey Terms:\n\n- **Frame**: One game processing frame / update loop.\n- **Work State**: One of three stages a chunk will go through to be processed fully.\n- **Work State Loop**: One loop of all three work state steps.\n\nOur system uses three work states for processing chunks. These work states only allow a certain type, and by extension a certain amount, of work to be done on chunks for any given grouping of frames.\nThis technique greatly reduces lag spikes a user will experience from loading chunks.\n\nIf a work state is completed early, the system will move on to the next work state without waiting for the full-frame count.\n\nFor any given frame, only process one of three work states:\n\n```cs\n// Do the required work for this frame\nProcessChunks();\n\n// If the current \"work state\" is still being processed, do not move to the next work state\nif (!ProcessingChunks())\n{ \n  // Move on to the next \"work state\" for next frame\n  _workState = _workState switch {\n    WORK_STATE.FILL => WORK_STATE.MARCH, // Generate/Load/Populate chunk with data\n    WORK_STATE.MARCH => WORK_STATE.MESH, // Cube march the chunk\n    WORK_STATE.MESH => WORK_STATE.FILL,  // Generate the chunk's mesh\n    _ => _workState\n  };\n}\n```\n\nProvided is a visual example of breaking up two sets of jobs across two frames:\n\n![Breaking Up Terrain Jobs](/images/TerrainGeneration/BreakingUpJobs.png)\n\nIt should be noted that, despite this optimization being applied, the nature of this game requires some chunks to be processed immediately. For example, if a player deforms/destroys part of the terrain, the changed chunks must be processed immediately as to not produce visual lag to the user. These chunks are \"fast-forwarded\" through this system and are processed within one frame.\n\n#### Cross-Frame Work\n\nKey Terms:\n\n- **Processing Spike**: A period of higher stress on the CPU, often causing visual lag/\"jumps\" to the user.\n\nIn general, each work stage will take a maximum of three frames. This technique gives jobs the ability to span across multiple frames, if needed, causing processing spikes on the CPU to \"average out\".\n\nAfter allowing cross-frame jobs, after this optimization is applied, you can see the job (`GenerateHeightJob` in purple) running across two game frames as to not hold the main gameplay thread:\n\n![Cross-Frame Jobs](/images/TerrainGeneration/CrossFrameJobs.png)\n\n#### Maximizing Usage & Throttling\n\nKey Terms:\n\n- **Job's Average Processing Requirements**: The amount of work/time a given job takes/requires when being processed by the CPU. Generally, this is a rough estimate.\n\nAs with the previously mentioned techniques, it is important to maximize usage of the CPU while also not overloading it. Given a set of chunks to be processed, instead of computing all of them in one go, breaking up that set into batches based on CPU speed / CPU core count / a job's average processing requirements is a good way to determine how many chunks to process in one complete work state loop.\n\nThis optimization technique is most effective when the user loads _many_ chunks at once, such as when they first load the world.\\\nThe following image shows all chunks around the player being populated with height values in one go:\n\n![Job System Overload](/images/TerrainGeneration/JobSystemOverload.png)\n\nWhile this maximizes CPU usage, this ends up halting any single chunk from loading/rendering for a player until _all_ chunks have been processed - which far from ideal. This also has the side effect of preventing those threads from being used by any other job(s) during their processing.\n\nInstead, using a per-frame burst of one-job-per-thread (or more, depending on a job's average length) paradigm allows for maximizing thread usage without blocking other jobs or preventing rendering/loading. \n\nUsing one job on each thread in per frame, a much more reasonable result is produced:\n\n![Single Frame Burst](/images/TerrainGeneration/SingleFrameJobBurst.png)\n\n#### Priority Queueing\n\nKey Terms:\n\n- **High Priority Chunk Request**: A chunk that needs to be processed by the end of the _current_ frame.\n- **Low Priority Chunk Request**: A chunk that needs to be processed as fast as possible, with minimal lag.\n\nDeciding which chunks should be processed first was briefly mentioned above with fast-forwarding, but it is, in reality, more complicated.\n\nOnce a chunk is requested (either high or low priority), the system then sorts it into a queue based on current queued chunk priorities and will update priorities each frame, as needed.\n\nThe following is a general set of rules we followed when implementing chunk processing priority queueing:\n\n- High priority chunks:\n  - No need to sort these requested chunks as they are _all_ processing that frame.\n  - Always pulled from the queue by the system _before_ low priority chunks\n- Low priority chunks:\n  - Sorted by a weight which is usually the squared distance to the player as these chunks usually come from chunk loading\n  - Pulled from the queue by the system when there are not enough high priority chunks to process\n\nThe following code reflects these set of rules:\n\n```cs\n// Grab high priority chunks (processed this frame)\nwhile (_chunksToRegenerate.HighPriorityCount > 0)\n  // Grab any high priority chunk\n  _chunksToRegeneratePriorityBatch.Add(_chunksToRegenerate.Pop());\n\n// If at the start of a new work state loop\nif (_workState == WORK_STATE.FILL)\n  // While there is still space to fill for the max job count - high priority chunk count\n  while (_chunksToRegenerateBatch.Count < _maxJobCount && _chunksToRegenerate.LowPriorityCount > 0)\n    // Pop the next item from the priority queue, sorted by distance to player\n    _chunksToRegenerateBatch.Add(_chunksToRegenerate.Pop());\n```\n\nA rough example of 2D priority queueing, a cross-section of the 3D chunk loaded cube, is demonstrated as an interactive demo below. Move your cursor around to see which chunks have priority to be loaded relative to your cursor.\n\n**Note:** This demo's source code does not reflect the project's implementation. It is purely for a visual understanding of the chunk loading concept.\n\n<div style=\"text-align: center\">\n <button class=\"btn btn-primary\" onclick=\" window.open('https://openprocessing.org/sketch/1052217/embed','_blank')\">2D Priority Queue Demo</button>\n</div>\n\nThe maximum number of chunks a three-stage loop can process is given by the following: \n`Max(Number Of High Priority Chunk Count, Number Of Reasonable Chunks Per Stage Loop)`  \nThat is to say that high priority chunks are always processed with low priority chunks filling in any free slots in CPU cores.\n\nUsing a priority queue and updating weights as needed, you get responsive chunk loading that can adapt quickly to, for example, changes in player position:\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/TerrainChunkPriorityLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nOnce applying a similar technique to chunk unloading, you get fluid and responsive terrain.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/TerrainChunkPriorityLoadingUnloading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n#### Level Of Detail (LOD)\n\nKey Terms:\n\n- **Level of Detail**: Also known as LOD, it is the amount (level) of data (detail) you are choosing to display to the user. This is often used on far-away objects since it is the same to the user visually but faster to compute.\n\nGiven our grid-based voxel terrain, LOD was trivial to implement on a basic level. Since our chunks are 16x16x16, LOD can be a power of two to reduce the amount of data that needs to be computed/rendered out of this chunk.\n\nAs a simple example, take the following 2D grid of 16 voxels, 17 nodes:\n\n**Key:**\n\n- **Purple Circles**: Density data nodes.\n- **Black Squares**: Voxels generated from corner nodes.\n\n<table width=\"100%\">\n  <tr>\n    <th>LOD of 1:</th>\n    <th>LOD of 2:</th>\n    <th>LOD of 4:</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD1.png\" alt=\"Cube Marching LOD 1\" width=\"100%\"/></td>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD2.png\" alt=\"Cube Marching LOD 2\" width=\"100%\"/></td>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD4.png\" alt=\"Cube Marching LOD 4\" width=\"100%\"/></td>\n  </tr>\n</table>\n\nAs can be seen, voxels sample from fewer nodes, but are scaled to take up the same amount of space.\n\nThe LOD gradients shown below demonstrate this logic applied to the terrain.\n\n<table width=\"100%\">\n  <tr>\n    <th>Smooth Sphere LOD Gradient:</th>\n    <th>Noisy Sphere LOD Gradient</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/TerrainGeneration/LODSmoothSphere.png\" alt=\"Smooth Sphere LOD Gradient:\" width=\"500px\"/></td>\n    <td><img src=\"/images/TerrainGeneration/LODNoisySphere.png\" alt=\"Noisy Sphere LOD Gradient\" width=\"500px\"/></td>\n  </tr>\n</table>\n\nDespite promising results, you would need to apply an algorithm similar to [TransVoxel](https://transvoxel.org/) to implement a more sophisticated solution that doesn't generate holes between differing LOD levels. As of currently, we do not implement this algorithm.\n\n<!--\nTODO:\n- Resource collection\n-->\n\n## Terrain Features\n\n### Terrain / Voxel Manipulation\n\nWhen we manipulate our voxel terrain, we alter the density values in an area of influence.\nIn our game, we use a spherical brush to accomplish this, resulting in spherical cutouts of the terrain at the target area.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/VoxelManipulation.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nIn the example above, you can see both additive and subtractive operations. Thankfully, these translate straightforwardly to adding and subtracting from the density values in our target area in a radial gradient.\n\nBelow is an interactive demo of the logic functioning in a 2D variant. Mouse over the area to subtract or add from a given area, altering the terrain. These values are either 1 or -1, representing a filled or unfilled area, respectively. As there is no gradient, this will result in unsmooth terrain.\n\nClick the left mouse button to toggle addition/subtraction.\n\n<div style=\"text-align: center\">\n <button class=\"btn btn-primary\" onclick=\" window.open('https://www.openprocessing.org/sketch/1051758/embed/','_blank')\">Brush Deformation Demo</button>\n</div>\n\n### Editor Mode\n\nProcedural generation is typically executed at runtime. In other words, our voxel terrain would only be visible upon launching the game into Play Mode.\nHowever, this is problematic in the case where we would like to edit our scene. How would we determine where to place a sign sticking out of the ground, or a treasure chest?\nWe'd need a way to edit the scene with the world already constructed. Our solution is editor-time world loading.  \n\nBy using proximity loading of our chunks as found at runtime, we may move the player around in the scene to load whichever portion is needed to us.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/EditorMode.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nWe track the current state of the Unity editor to determine when to dispose of the memory or create it anew.\nEntering play mode or edit mode will reconstruct the necessary memory for the voxel terrain.\n\n<!--\n# Final Notes\n***TODO***\n~~In conclusion, this project produced an impressive and responsive terrain that makes for great gameplay.~~\n\n## Further Implementations\n- Hot-loading\n- \n-->\n\n<!---\n# ---- OTHER: ----\n## Spherical\n\n# EXTRA\n## Process of Creating a Chunk\n\nOnce a chunk entity is created and its position is assigned, it will enter the system chain to be processed in the following order\n\n## Data Generation\n## Cube Marching\n### Solution Lookup\n### Smoothing\n## Mesh Generation\nThe process of mesh generation is split into three steps:\n1) **Create Chunk Mesh**: Create the mesh object, and copy the data to the new mesh\n1) **Bake Chunk Mesh**: Bake the mesh using Unity\\'s `Physics.BakeMesh`\n1) **Set Chunk Mesh**: Create a GameObject, and assign it the new mesh.\nThe reason mesh generation is split into three distinct steps is due to the inability of steps #1 & #3 to be parallelized with burst compilation, while step #2 can be.\n### Creating the Chunk\\'s Mesh\nThis step simply creates the mesh and copies the data from the `IBufferElementData` components to the new mesh.\n\nThis is done without burst and sequentially - due to Unity\\'s `Mesh` being non-blittable.\n### Baking the Chunk\\'s Mesh\n### Setting the Chunk\\'s Mesh\n## Live Editing With Unity Atoms\n## Post Mortem\n\n- Burst-Compiled Unity Jobs\n- Chunk Loading\n- Marching Cubes\n- Unity Atoms\n---\n**NOTE**\nThe cost of using components as flags is not insignificant! The trade-off is knowing what stage any given chunk is at for debugging.\n---\n## Post Mortem\n## Unity ECS\n### Setup\nTo utilize the speed of Unity\\'s provided ECS, chunks were entities that consist of data components and their associated GameObject to store + render the mesh. Along the way, they also get tagged/untagged with \"Flag\" components to tell the next system to operate on them.\nThe ECS chunk, after processing, would contain the following component data:\n![Chunk Components](/images/TerrainGeneration/ChunkComponents.png)\n\n### Why It Didn't Work \nAfter all the work setting up systems, components, and way more, it seemed like the team was constantly fighting Unity ECS to make it fit our needs. System order was impossible to configure, command buffers wouldn't execute on the frames we needed, adding and removing components correctly was complex to manage, and what could run within a system was very restrictive.\n\nDespite this, these problems were not the deal-breaker. Even if all these problems were alleviated, we needed all these systems to process chunk entities within one frame. When the player deforms the terrain, the \"frame rate of deformation\" should run at the same rate as the rest of the game. This was not the case when the systems ran across multiple frames as the deformation would run at a perceived FPS of Frame-Rate / System-Frame-Count and would look choppy.\n\n### The Fix\nLuckily, systems are very similar to Unity's job system which allowed up to transfer over easily.\n-->\n","slug":"terrain-generation","published":1,"updated":"2021-10-18T07:56:19.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuwd64yr000k0bqu8cz2fn3z","content":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><hr>\n<style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n<h2 id=\"About-the-Authors\"><a href=\"#About-the-Authors\" class=\"headerlink\" title=\"About the Authors\"></a>About the Authors</h2><p>Calin Gavriliuc: Engine Programmer<br>Jonathan Bourim: Graphics Engineer &amp; Engine Programmer</p>\n<p>We are Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.</p>\n<p><a href=\"https://store.steampowered.com/search/?developer=Handshake%20Firm\">Here</a> are some game we have worked on:</p>\n<p><img src=\"/images/TerrainGeneration/ArcApellago.jpg\" alt=\"ArcApellago\"><br><img src=\"/images/TerrainGeneration/DeltaBlade2700.jpg\" alt=\"DeltaBlade2700\"></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Project Cleanser is a year-long team game project that we’ve been working on together. It’s a sandbox game set on a large planet, where the player hunts, digs, and upgrades their equipment to challenge the core at the center of the world.</p>\n<p>While we were brainstorming ideas for our new, year-long game project, we encountered many interesting videos showcasing voxel techniques, such as procedural world generation and deformation.</p>\n<p>Inspired by Astroneer, we decided to implement a similar method of terrain generation and deformation for our project.</p>\n<p><a href=\"https://www.youtube.com/watch?v=NG1gJvdCE4Q\">Some Inspiration</a></p>\n<h2 id=\"What-Is-It\"><a href=\"#What-Is-It\" class=\"headerlink\" title=\"What Is It\"></a>What Is It</h2><h3 id=\"Voxels\"><a href=\"#Voxels\" class=\"headerlink\" title=\"Voxels\"></a>Voxels</h3><p>Voxels are a volumetric representation of a point in 3D space. While pixels are representative of data in a small <strong>area</strong>, voxels are representative of data in a small <strong>volume</strong>. These values exist on a 3D grid, and have each point in that grid set to a value. With our goal being to make terrain, we used these values to determine the density of the terrain at that point.<br>Density for our volume means it exists in one of two states, <strong>filled</strong> (part of the ground), or <strong>empty</strong> (air).</p>\n<h3 id=\"Cube-Marched-Terrain-Generation\"><a href=\"#Cube-Marched-Terrain-Generation\" class=\"headerlink\" title=\"Cube Marched Terrain Generation\"></a>Cube Marched Terrain Generation</h3><p>The marching cubes algorithm is a fast way to generate a polygonal mesh from a height/density field. This algorithm is used to generate triangles for a mesh from a density field. It is a relatively simple, fast, and efficient algorithm that has been used in many applications.</p>\n<p>The end result can be seen in the following video.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-50-mobile-100\">\n  <source src=\"/images/TerrainGeneration/CubeMarchingSculpting.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<h2 id=\"Goals-amp-Constraints\"><a href=\"#Goals-amp-Constraints\" class=\"headerlink\" title=\"Goals &amp; Constraints\"></a>Goals &amp; Constraints</h2><p>For our terrain to function in our environment, we constructed our systems with several priorities in mind:</p>\n<ul>\n<li>Multi-threading</li>\n<li>Load Balancing</li>\n<li>Dynamic Loading</li>\n<li>Determinism / Seeding</li>\n<li>Spherical Terrain</li>\n</ul>\n<p><strong>Multi-threading:</strong></p>\n<ul>\n<li>Due to the number of math operations that occur when our terrain is generated or modified, performance is the primary concern of this implementation.</li>\n<li>We must leverage Unity’s Job system for multi-threading to maximize the performance of our terrain generation.</li>\n</ul>\n<p><strong>Load Balancing:</strong></p>\n<ul>\n<li>As we are generating terrain for a game, it is important to load terrain quickly but also throttle operations as to not overload the user’s hardware and reduce FPS to an unplayable level.</li>\n</ul>\n<p><strong>Dynamic Loading:</strong></p>\n<ul>\n<li>Our world is a large, planet-like, environment. As voxels are stored values representing our world, those values must be stored somewhere.</li>\n<li>We quickly approach the limitations of modern hardware if we store all of these values in our active memory.  </li>\n</ul>\n<p><strong>Determinism / Seeding:</strong></p>\n<ul>\n<li>We generate terrain with the use of randomization tools such as noise functions. With that, there is a decision between a uniquely generated new world, and a randomly generated world that is made consistent by the seed that it is given.</li>\n<li>Our target was the consistent world, as it allows us to leverage Unity’s editor to place objects into our world non-procedurally.</li>\n</ul>\n<p><strong>Spherical Terrain:</strong></p>\n<ul>\n<li>As our world is a spherical planet, we needed the ability generate terrain in a radial manner. This includes developing a spherical, mountainous, surface with a cavernous core.</li>\n</ul>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><hr>\n<p>The following is a simplified overview of the pipeline:<br><img src=\"/images/TerrainGeneration/TerrainManagerFlowChart.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<h2 id=\"Chunks\"><a href=\"#Chunks\" class=\"headerlink\" title=\"Chunks\"></a>Chunks</h2><p>In the above examples, we have shown visual representations of our density values, but what is assigning them their mesh and position in the world?<br>We use a type we call <strong>Chunks</strong> to store this data and to pass it through our pipelines. In essence, a chunk is a single cube that contains a batch of voxels in the world.<br>Chunks contain the following information:  </p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Chunk coordinate</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> int3 position;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Density of each voxel (0.0f to 1.0f)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeArray&lt;<span class=\"keyword\">float</span>&gt; densities;</span><br><span class=\"line\"><span class=\"comment\">// Resource type of each voxel (iron, stone, etc)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeArray&lt;Resource.Type&gt; resources;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mesh data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;float3&gt; vertices;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;<span class=\"keyword\">int</span>&gt; triangles;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;float3&gt; normals;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;Color&gt; colors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// For sorting mesh data into sub-meshes</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;Resource.Type&gt; resourceMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If the chunk has been changed since it was loaded</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> hasChanged;</span><br></pre></td></tr></table></figure>\n\n<p>The data buffers are using Unity’s Native structures (C++ InterOp) to allow us to make use of the Burst Compiler.</p>\n<h2 id=\"Marching-Cubes-Algorithm\"><a href=\"#Marching-Cubes-Algorithm\" class=\"headerlink\" title=\"Marching Cubes Algorithm\"></a>Marching Cubes Algorithm</h2><h3 id=\"Triangulation\"><a href=\"#Triangulation\" class=\"headerlink\" title=\"Triangulation\"></a>Triangulation</h3><p>As mentioned above, the marching cube algorithm utilizes voxels to determine the density of a particular volume. This is interpreted as whether or not that point is part of the surface of our terrain. If we take the base case, a single voxel, we can look at its corner points to determine the triangle configuration of the cube that the voxel encompasses.</p>\n<p>There exist 2^8 triangle configurations. Some can be seen below:</p>\n<img src=\"/images/TerrainGeneration/MarchingCubesConfigs.png\" width=\"60%\"/>\n\n<p>The orange points at the corners indicate that they are part of the ground, while the empty corners are air. If we extend this idea to a larger grid, these triangles will connect with one another to form the basis of the terrain depending on the configuration of these values.  </p>\n<p><img src=\"/images/TerrainGeneration/MarchingExample.png\" alt=\"Marching Example\"></p>\n<p>The above image was constructed by setting all the voxels’ density values within a spherical radius of the center of the sphere to +1 (ground / filled state), and outside of the radius to 0 (air / empty state). The algorithm considers the transition between the ground and the air to be where the surface manifests, which is why our surface is a radial shape from the center of the sphere.</p>\n<h3 id=\"Smoothing\"><a href=\"#Smoothing\" class=\"headerlink\" title=\"Smoothing\"></a>Smoothing</h3><p>You get a blocky sphere when you treat your values as a boolean, either representing a value below the surface or above it. However, if we use a gradient of density values from one voxel to the next, we can utilize interpolation to alter the angle of the triangles we are constructing.</p>\n<p><strong>Smoothing Method 1:</strong></p>\n<p>One method of doing so is by setting the density values to a gradient ranging from +1 to 0, where +1 is the center of the sphere, 0.5 is the surface, and 0 is the boundary of our voxel grid. In this case, the boundary would be <code>2 * radius</code> or the <code>diameter</code> of the “world sphere”.</p>\n<p><img src=\"/images/TerrainGeneration/MarchingCubesDensityGradient.png\" alt=\"Marching Cubes Density Gradient\"></p>\n<p><strong>Smoothing Method 2:</strong></p>\n<p>Another method of achieving this effect is through a similar technique. Instead of treating the whole “world sphere” as a gradient, only treat the region around the surface as a gradient. This becomes especially useful when applied in a game setting since most nodes are either <code>1</code> or <code>0</code> and not a floating point value.</p>\n<p><img src=\"/images/TerrainGeneration/MarchingCubesDensityGradientEnhanced.png\" alt=\"Marching Cubes Density Gradient\"></p>\n<p><strong>Final Result:</strong></p>\n<p>Regardless of which method is chosen, you get the following:</p>\n<p><img src=\"/images/TerrainGeneration/MarchingExampleSmooth.png\" alt=\"Marching Example Smooth\"></p>\n<p>This diagram shows how a surface is interpolated between two vertices with varying density values.</p>\n<img src=\"/images/TerrainGeneration/MarchingCubesInterpolation.png\" width=\"60%\"/>\n<!--- Source link for the image above --->\n<a href=\"http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/\">\n  <p style=\"text-align:center\">\n  Image Source\n  </p>\n</a>\n\n<p>The following interpolation code, will achieve the smoothing shown above:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Smooths densities between 0.0f and 1.0f</span></span><br><span class=\"line\"><span class=\"comment\">// ISO Level / Height is 0.5f</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> float3 <span class=\"title\">InterpolateVerts</span>(<span class=\"params\">float3 v1, float3 v2, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">float</span>  s1, <span class=\"keyword\">float</span> s2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> ISOLevel = <span class=\"number\">0.5f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> epsilon = <span class=\"number\">0.00001f</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Account for edge case using above epsilon value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Mathf.Abs(ISOLevel - s1) &lt; epsilon ||</span><br><span class=\"line\">        Mathf.Abs(ISOLevel - s2) &lt; epsilon ||</span><br><span class=\"line\">        Mathf.Abs(s1 - s2) &lt; epsilon)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v1 + (v2 - v1) * (s1 - s2);</span><br><span class=\"line\">    <span class=\"comment\">// Lerp the point using the density values</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> t2 = (ISOLevel - s1) / (s2 - s1);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v1 + t2 * (v2 - v1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Chunk-Generation\"><a href=\"#Chunk-Generation\" class=\"headerlink\" title=\"Chunk Generation\"></a>Chunk Generation</h2><p><img src=\"/images/TerrainGeneration/TerrainManagerFlowChartRequestChunk.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<p>Now that we have our data container, and a method to convert that data to a mesh, we need to populate the container with data. Upon being requested, the chunk’s density values are generated and the chunk goes through a two-step process of executing the marching cubes algorithm and mesh construction.</p>\n<h3 id=\"Stitching-and-Sharing-Chunk-Edge-Data\"><a href=\"#Stitching-and-Sharing-Chunk-Edge-Data\" class=\"headerlink\" title=\"Stitching and Sharing Chunk Edge Data\"></a>Stitching and Sharing Chunk Edge Data</h3><p>In a multithreaded environment, it is important to package chunks as self-contained structures as to prevent read &amp; write race conditions between threads. Since the cube marching algorithm generates triangles for the regions <em>between</em> nodes, voxels, it is not trivial to split up a 3D space into chunks of nodes.</p>\n<p>The solution to this is to share data between chunks in some way. In our case, we went with duplicating node in the positive x,y,z axis. This was a memory vs multithreading complexity tradeoff.</p>\n<p>With this system, we needed to be careful when modifying shared nodes between chunks. An example of where one would need to be careful with duplication of data is <strong>deformation</strong>. If you deform on the corner of several chunks sharing an edge at inconsistent rates, that would break the consistency of the duplicated values. What results visually is a tearing effect, a gap in between the chunks. This requires additional attention to the synchronicity of the logic operating on the voxel data. </p>\n<p><img src=\"/images/TerrainGeneration/VoxelTearing.png\" alt=\"Voxel Tearing\"></p>\n<p>Duplicated edge data also comes with the requirement of having to edit chunk edges only when all neighboring chunks are loaded as well.</p>\n<h3 id=\"Chunk-Terrain-Generation\"><a href=\"#Chunk-Terrain-Generation\" class=\"headerlink\" title=\"Chunk Terrain Generation\"></a>Chunk Terrain Generation</h3><p><strong>Coming Soon</strong></p>\n<h3 id=\"Chunk-Loading\"><a href=\"#Chunk-Loading\" class=\"headerlink\" title=\"Chunk Loading\"></a>Chunk Loading</h3><p><img src=\"/images/TerrainGeneration/TerrainManagerFlowChartChunkLoader.png\" alt=\"Chunk Loader Flow Chart\"></p>\n<p>Now that we can generate chunks that also look like interesting terrain, we need a way to selectively pick which chunks to load as to not overwhelm a user’s computer with generating an entire world and expecting it all to fit in their RAM. We call this chunk loading. Similarly, this is also applied to unloading chunks.</p>\n<p>We do this by loading a <code>2n</code> by <code>2n</code> by <code>2n</code> cube around the player. You can take <code>n</code> number of chunks in each axis (<code>[x+n, x-n]</code>, <code>[y+n, y-n]</code>, and <code>[z+n, z-n]</code>) outward from the player and request them to be loaded.<br>Similarly if a loaded chunk falls outside of this cube, unload it.</p>\n<p><img src=\"/images/TerrainGeneration/ChunkLoadingDistances.png\" alt=\"Chunk Loading Distances\"></p>\n<p>When loading and unloading chunks, it was important to remember that chunks share edge data so borders of chunks cannot be edited without neighboring chunks being loaded first to preserve this “synced” state.</p>\n<p>Initial implementations of chunk loading a small region around the player produces the following:</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/InitialChunkLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<h3 id=\"Chunk-Serialization\"><a href=\"#Chunk-Serialization\" class=\"headerlink\" title=\"Chunk Serialization\"></a>Chunk Serialization</h3><p><img src=\"/images/TerrainGeneration/TerrainManagerFlowChartTerrainSerializer.png\" alt=\"Terrain Manager Flow Chart Terrain Serializer\"></p>\n<p>For our implementation, we used a simple approach for storing chunks to a file. Given a known size of a chunk (n by n by n nodes), we can read and write entire 3D arrays of data as their binary representation. This is done for both the density and resource values.</p>\n<p>It should be noted that, as a trivial form of optimization, only chunks changed by the player are saved to the disk. Since our terrain generation is deterministic and faster than loading chunks, it is faster to re-generate the chunk on request compared to loading that chunk from the disk. This, in return, also saves on disk space.</p>\n<p>These load and unload requests are performed within Unity Jobs to further utilize the player’s CPU cores from a multithreaded approach and to keep consistency with the rest of the systems.</p>\n<h3 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h3><p>Due to real-time gameplay restrictions and the amount of terrain a player is required to load, chunk generation/loading/marching needs to be highly optimized.</p>\n<p>As this is one of the most performance-critical portions of our game, we use Unity’s Job system to multi-thread the execution of this code. Originally, we had experimented with compute shader pipelines, which are faster in normal circumstances. However, after performance testing, Unity’s Burst Compiler in conjunction with the job system has outpaced these compute pipelines due to the overhead of large data buffer I/O with the GPU. The overhead of I/O was larger than the time for operations to be performed on that buffer, ultimately resulting in CPU-based computation being faster.</p>\n<h4 id=\"Optimization\"><a href=\"#Optimization\" class=\"headerlink\" title=\"Optimization\"></a>Optimization</h4><p><strong>Major sources of optimization:</strong></p>\n<ul>\n<li>Chunk Stages</li>\n<li>Cross-Frame Work</li>\n<li>Maximizing Usage &amp; Throttling</li>\n<li>Priority Queueing</li>\n<li>Level Of Detail (LOD)</li>\n</ul>\n<p>The following is frame-by-frame profiling of the chunk processing system using multiple distinct job stages and cross-frame job completion of the chunk request pipeline (after optimization):<br><img src=\"/images/TerrainGeneration/TerrainManagerJobSystem.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<p>You can see the main thread running horizontally across the top, and seven more threads running the jobs in parallel - in this case. </p>\n<h4 id=\"Chunk-Stages\"><a href=\"#Chunk-Stages\" class=\"headerlink\" title=\"Chunk Stages\"></a>Chunk Stages</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Frame</strong>: One game processing frame / update loop.</li>\n<li><strong>Work State</strong>: One of three stages a chunk will go through to be processed fully.</li>\n<li><strong>Work State Loop</strong>: One loop of all three work state steps.</li>\n</ul>\n<p>Our system uses three work states for processing chunks. These work states only allow a certain type, and by extension a certain amount, of work to be done on chunks for any given grouping of frames.<br>This technique greatly reduces lag spikes a user will experience from loading chunks.</p>\n<p>If a work state is completed early, the system will move on to the next work state without waiting for the full-frame count.</p>\n<p>For any given frame, only process one of three work states:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Do the required work for this frame</span></span><br><span class=\"line\">ProcessChunks();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If the current &quot;work state&quot; is still being processed, do not move to the next work state</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!ProcessingChunks())</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"comment\">// Move on to the next &quot;work state&quot; for next frame</span></span><br><span class=\"line\">  _workState = _workState <span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">    WORK_STATE.FILL =&gt; WORK_STATE.MARCH, <span class=\"comment\">// Generate/Load/Populate chunk with data</span></span><br><span class=\"line\">    WORK_STATE.MARCH =&gt; WORK_STATE.MESH, <span class=\"comment\">// Cube march the chunk</span></span><br><span class=\"line\">    WORK_STATE.MESH =&gt; WORK_STATE.FILL,  <span class=\"comment\">// Generate the chunk&#x27;s mesh</span></span><br><span class=\"line\">    _ =&gt; _workState</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Provided is a visual example of breaking up two sets of jobs across two frames:</p>\n<p><img src=\"/images/TerrainGeneration/BreakingUpJobs.png\" alt=\"Breaking Up Terrain Jobs\"></p>\n<p>It should be noted that, despite this optimization being applied, the nature of this game requires some chunks to be processed immediately. For example, if a player deforms/destroys part of the terrain, the changed chunks must be processed immediately as to not produce visual lag to the user. These chunks are “fast-forwarded” through this system and are processed within one frame.</p>\n<h4 id=\"Cross-Frame-Work\"><a href=\"#Cross-Frame-Work\" class=\"headerlink\" title=\"Cross-Frame Work\"></a>Cross-Frame Work</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Processing Spike</strong>: A period of higher stress on the CPU, often causing visual lag/“jumps” to the user.</li>\n</ul>\n<p>In general, each work stage will take a maximum of three frames. This technique gives jobs the ability to span across multiple frames, if needed, causing processing spikes on the CPU to “average out”.</p>\n<p>After allowing cross-frame jobs, after this optimization is applied, you can see the job (<code>GenerateHeightJob</code> in purple) running across two game frames as to not hold the main gameplay thread:</p>\n<p><img src=\"/images/TerrainGeneration/CrossFrameJobs.png\" alt=\"Cross-Frame Jobs\"></p>\n<h4 id=\"Maximizing-Usage-amp-Throttling\"><a href=\"#Maximizing-Usage-amp-Throttling\" class=\"headerlink\" title=\"Maximizing Usage &amp; Throttling\"></a>Maximizing Usage &amp; Throttling</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Job’s Average Processing Requirements</strong>: The amount of work/time a given job takes/requires when being processed by the CPU. Generally, this is a rough estimate.</li>\n</ul>\n<p>As with the previously mentioned techniques, it is important to maximize usage of the CPU while also not overloading it. Given a set of chunks to be processed, instead of computing all of them in one go, breaking up that set into batches based on CPU speed / CPU core count / a job’s average processing requirements is a good way to determine how many chunks to process in one complete work state loop.</p>\n<p>This optimization technique is most effective when the user loads <em>many</em> chunks at once, such as when they first load the world.<br>The following image shows all chunks around the player being populated with height values in one go:</p>\n<p><img src=\"/images/TerrainGeneration/JobSystemOverload.png\" alt=\"Job System Overload\"></p>\n<p>While this maximizes CPU usage, this ends up halting any single chunk from loading/rendering for a player until <em>all</em> chunks have been processed - which far from ideal. This also has the side effect of preventing those threads from being used by any other job(s) during their processing.</p>\n<p>Instead, using a per-frame burst of one-job-per-thread (or more, depending on a job’s average length) paradigm allows for maximizing thread usage without blocking other jobs or preventing rendering/loading. </p>\n<p>Using one job on each thread in per frame, a much more reasonable result is produced:</p>\n<p><img src=\"/images/TerrainGeneration/SingleFrameJobBurst.png\" alt=\"Single Frame Burst\"></p>\n<h4 id=\"Priority-Queueing\"><a href=\"#Priority-Queueing\" class=\"headerlink\" title=\"Priority Queueing\"></a>Priority Queueing</h4><p>Key Terms:</p>\n<ul>\n<li><strong>High Priority Chunk Request</strong>: A chunk that needs to be processed by the end of the <em>current</em> frame.</li>\n<li><strong>Low Priority Chunk Request</strong>: A chunk that needs to be processed as fast as possible, with minimal lag.</li>\n</ul>\n<p>Deciding which chunks should be processed first was briefly mentioned above with fast-forwarding, but it is, in reality, more complicated.</p>\n<p>Once a chunk is requested (either high or low priority), the system then sorts it into a queue based on current queued chunk priorities and will update priorities each frame, as needed.</p>\n<p>The following is a general set of rules we followed when implementing chunk processing priority queueing:</p>\n<ul>\n<li>High priority chunks:<ul>\n<li>No need to sort these requested chunks as they are <em>all</em> processing that frame.</li>\n<li>Always pulled from the queue by the system <em>before</em> low priority chunks</li>\n</ul>\n</li>\n<li>Low priority chunks:<ul>\n<li>Sorted by a weight which is usually the squared distance to the player as these chunks usually come from chunk loading</li>\n<li>Pulled from the queue by the system when there are not enough high priority chunks to process</li>\n</ul>\n</li>\n</ul>\n<p>The following code reflects these set of rules:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Grab high priority chunks (processed this frame)</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (_chunksToRegenerate.HighPriorityCount &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"comment\">// Grab any high priority chunk</span></span><br><span class=\"line\">  _chunksToRegeneratePriorityBatch.Add(_chunksToRegenerate.Pop());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If at the start of a new work state loop</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (_workState == WORK_STATE.FILL)</span><br><span class=\"line\">  <span class=\"comment\">// While there is still space to fill for the max job count - high priority chunk count</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (_chunksToRegenerateBatch.Count &lt; _maxJobCount &amp;&amp; _chunksToRegenerate.LowPriorityCount &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Pop the next item from the priority queue, sorted by distance to player</span></span><br><span class=\"line\">    _chunksToRegenerateBatch.Add(_chunksToRegenerate.Pop());</span><br></pre></td></tr></table></figure>\n\n<p>A rough example of 2D priority queueing, a cross-section of the 3D chunk loaded cube, is demonstrated as an interactive demo below. Move your cursor around to see which chunks have priority to be loaded relative to your cursor.</p>\n<p><strong>Note:</strong> This demo’s source code does not reflect the project’s implementation. It is purely for a visual understanding of the chunk loading concept.</p>\n<div style=\"text-align: center\">\n <button class=\"btn btn-primary\" onclick=\" window.open('https://openprocessing.org/sketch/1052217/embed','_blank')\">2D Priority Queue Demo</button>\n</div>\n\n<p>The maximum number of chunks a three-stage loop can process is given by the following:<br><code>Max(Number Of High Priority Chunk Count, Number Of Reasonable Chunks Per Stage Loop)</code><br>That is to say that high priority chunks are always processed with low priority chunks filling in any free slots in CPU cores.</p>\n<p>Using a priority queue and updating weights as needed, you get responsive chunk loading that can adapt quickly to, for example, changes in player position:</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/TerrainChunkPriorityLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>Once applying a similar technique to chunk unloading, you get fluid and responsive terrain.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/TerrainChunkPriorityLoadingUnloading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<h4 id=\"Level-Of-Detail-LOD\"><a href=\"#Level-Of-Detail-LOD\" class=\"headerlink\" title=\"Level Of Detail (LOD)\"></a>Level Of Detail (LOD)</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Level of Detail</strong>: Also known as LOD, it is the amount (level) of data (detail) you are choosing to display to the user. This is often used on far-away objects since it is the same to the user visually but faster to compute.</li>\n</ul>\n<p>Given our grid-based voxel terrain, LOD was trivial to implement on a basic level. Since our chunks are 16x16x16, LOD can be a power of two to reduce the amount of data that needs to be computed/rendered out of this chunk.</p>\n<p>As a simple example, take the following 2D grid of 16 voxels, 17 nodes:</p>\n<p><strong>Key:</strong></p>\n<ul>\n<li><strong>Purple Circles</strong>: Density data nodes.</li>\n<li><strong>Black Squares</strong>: Voxels generated from corner nodes.</li>\n</ul>\n<table width=\"100%\">\n  <tr>\n    <th>LOD of 1:</th>\n    <th>LOD of 2:</th>\n    <th>LOD of 4:</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD1.png\" alt=\"Cube Marching LOD 1\" width=\"100%\"/></td>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD2.png\" alt=\"Cube Marching LOD 2\" width=\"100%\"/></td>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD4.png\" alt=\"Cube Marching LOD 4\" width=\"100%\"/></td>\n  </tr>\n</table>\n\n<p>As can be seen, voxels sample from fewer nodes, but are scaled to take up the same amount of space.</p>\n<p>The LOD gradients shown below demonstrate this logic applied to the terrain.</p>\n<table width=\"100%\">\n  <tr>\n    <th>Smooth Sphere LOD Gradient:</th>\n    <th>Noisy Sphere LOD Gradient</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/TerrainGeneration/LODSmoothSphere.png\" alt=\"Smooth Sphere LOD Gradient:\" width=\"500px\"/></td>\n    <td><img src=\"/images/TerrainGeneration/LODNoisySphere.png\" alt=\"Noisy Sphere LOD Gradient\" width=\"500px\"/></td>\n  </tr>\n</table>\n\n<p>Despite promising results, you would need to apply an algorithm similar to <a href=\"https://transvoxel.org/\">TransVoxel</a> to implement a more sophisticated solution that doesn’t generate holes between differing LOD levels. As of currently, we do not implement this algorithm.</p>\n<!--\nTODO:\n- Resource collection\n-->\n\n<h2 id=\"Terrain-Features\"><a href=\"#Terrain-Features\" class=\"headerlink\" title=\"Terrain Features\"></a>Terrain Features</h2><h3 id=\"Terrain-Voxel-Manipulation\"><a href=\"#Terrain-Voxel-Manipulation\" class=\"headerlink\" title=\"Terrain / Voxel Manipulation\"></a>Terrain / Voxel Manipulation</h3><p>When we manipulate our voxel terrain, we alter the density values in an area of influence.<br>In our game, we use a spherical brush to accomplish this, resulting in spherical cutouts of the terrain at the target area.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/VoxelManipulation.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>In the example above, you can see both additive and subtractive operations. Thankfully, these translate straightforwardly to adding and subtracting from the density values in our target area in a radial gradient.</p>\n<p>Below is an interactive demo of the logic functioning in a 2D variant. Mouse over the area to subtract or add from a given area, altering the terrain. These values are either 1 or -1, representing a filled or unfilled area, respectively. As there is no gradient, this will result in unsmooth terrain.</p>\n<p>Click the left mouse button to toggle addition/subtraction.</p>\n<div style=\"text-align: center\">\n <button class=\"btn btn-primary\" onclick=\" window.open('https://www.openprocessing.org/sketch/1051758/embed/','_blank')\">Brush Deformation Demo</button>\n</div>\n\n<h3 id=\"Editor-Mode\"><a href=\"#Editor-Mode\" class=\"headerlink\" title=\"Editor Mode\"></a>Editor Mode</h3><p>Procedural generation is typically executed at runtime. In other words, our voxel terrain would only be visible upon launching the game into Play Mode.<br>However, this is problematic in the case where we would like to edit our scene. How would we determine where to place a sign sticking out of the ground, or a treasure chest?<br>We’d need a way to edit the scene with the world already constructed. Our solution is editor-time world loading.  </p>\n<p>By using proximity loading of our chunks as found at runtime, we may move the player around in the scene to load whichever portion is needed to us.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/EditorMode.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>We track the current state of the Unity editor to determine when to dispose of the memory or create it anew.<br>Entering play mode or edit mode will reconstruct the necessary memory for the voxel terrain.</p>\n<!--\n# Final Notes\n***TODO***\n~~In conclusion, this project produced an impressive and responsive terrain that makes for great gameplay.~~\n\n## Further Implementations\n- Hot-loading\n- \n-->\n\n<!---\n# ---- OTHER: ----\n## Spherical\n\n# EXTRA\n## Process of Creating a Chunk\n\nOnce a chunk entity is created and its position is assigned, it will enter the system chain to be processed in the following order\n\n## Data Generation\n## Cube Marching\n### Solution Lookup\n### Smoothing\n## Mesh Generation\nThe process of mesh generation is split into three steps:\n1) **Create Chunk Mesh**: Create the mesh object, and copy the data to the new mesh\n1) **Bake Chunk Mesh**: Bake the mesh using Unity\\'s `Physics.BakeMesh`\n1) **Set Chunk Mesh**: Create a GameObject, and assign it the new mesh.\nThe reason mesh generation is split into three distinct steps is due to the inability of steps #1 & #3 to be parallelized with burst compilation, while step #2 can be.\n### Creating the Chunk\\'s Mesh\nThis step simply creates the mesh and copies the data from the `IBufferElementData` components to the new mesh.\n\nThis is done without burst and sequentially - due to Unity\\'s `Mesh` being non-blittable.\n### Baking the Chunk\\'s Mesh\n### Setting the Chunk\\'s Mesh\n## Live Editing With Unity Atoms\n## Post Mortem\n\n- Burst-Compiled Unity Jobs\n- Chunk Loading\n- Marching Cubes\n- Unity Atoms\n---\n**NOTE**\nThe cost of using components as flags is not insignificant! The trade-off is knowing what stage any given chunk is at for debugging.\n---\n## Post Mortem\n## Unity ECS\n### Setup\nTo utilize the speed of Unity\\'s provided ECS, chunks were entities that consist of data components and their associated GameObject to store + render the mesh. Along the way, they also get tagged/untagged with \"Flag\" components to tell the next system to operate on them.\nThe ECS chunk, after processing, would contain the following component data:\n![Chunk Components](/images/TerrainGeneration/ChunkComponents.png)\n\n### Why It Didn't Work \nAfter all the work setting up systems, components, and way more, it seemed like the team was constantly fighting Unity ECS to make it fit our needs. System order was impossible to configure, command buffers wouldn't execute on the frames we needed, adding and removing components correctly was complex to manage, and what could run within a system was very restrictive.\n\nDespite this, these problems were not the deal-breaker. Even if all these problems were alleviated, we needed all these systems to process chunk entities within one frame. When the player deforms the terrain, the \"frame rate of deformation\" should run at the same rate as the rest of the game. This was not the case when the systems ran across multiple frames as the deformation would run at a perceived FPS of Frame-Rate / System-Frame-Count and would look choppy.\n\n### The Fix\nLuckily, systems are very similar to Unity's job system which allowed up to transfer over easily.\n-->\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><hr>\n<style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n<h2 id=\"About-the-Authors\"><a href=\"#About-the-Authors\" class=\"headerlink\" title=\"About the Authors\"></a>About the Authors</h2><p>Calin Gavriliuc: Engine Programmer<br>Jonathan Bourim: Graphics Engineer &amp; Engine Programmer</p>\n<p>We are Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.</p>\n<p><a href=\"https://store.steampowered.com/search/?developer=Handshake%20Firm\">Here</a> are some game we have worked on:</p>\n<p><img src=\"/images/TerrainGeneration/ArcApellago.jpg\" alt=\"ArcApellago\"><br><img src=\"/images/TerrainGeneration/DeltaBlade2700.jpg\" alt=\"DeltaBlade2700\"></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Project Cleanser is a year-long team game project that we’ve been working on together. It’s a sandbox game set on a large planet, where the player hunts, digs, and upgrades their equipment to challenge the core at the center of the world.</p>\n<p>While we were brainstorming ideas for our new, year-long game project, we encountered many interesting videos showcasing voxel techniques, such as procedural world generation and deformation.</p>\n<p>Inspired by Astroneer, we decided to implement a similar method of terrain generation and deformation for our project.</p>\n<p><a href=\"https://www.youtube.com/watch?v=NG1gJvdCE4Q\">Some Inspiration</a></p>\n<h2 id=\"What-Is-It\"><a href=\"#What-Is-It\" class=\"headerlink\" title=\"What Is It\"></a>What Is It</h2><h3 id=\"Voxels\"><a href=\"#Voxels\" class=\"headerlink\" title=\"Voxels\"></a>Voxels</h3><p>Voxels are a volumetric representation of a point in 3D space. While pixels are representative of data in a small <strong>area</strong>, voxels are representative of data in a small <strong>volume</strong>. These values exist on a 3D grid, and have each point in that grid set to a value. With our goal being to make terrain, we used these values to determine the density of the terrain at that point.<br>Density for our volume means it exists in one of two states, <strong>filled</strong> (part of the ground), or <strong>empty</strong> (air).</p>\n<h3 id=\"Cube-Marched-Terrain-Generation\"><a href=\"#Cube-Marched-Terrain-Generation\" class=\"headerlink\" title=\"Cube Marched Terrain Generation\"></a>Cube Marched Terrain Generation</h3><p>The marching cubes algorithm is a fast way to generate a polygonal mesh from a height/density field. This algorithm is used to generate triangles for a mesh from a density field. It is a relatively simple, fast, and efficient algorithm that has been used in many applications.</p>\n<p>The end result can be seen in the following video.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-50-mobile-100\">\n  <source src=\"/images/TerrainGeneration/CubeMarchingSculpting.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<h2 id=\"Goals-amp-Constraints\"><a href=\"#Goals-amp-Constraints\" class=\"headerlink\" title=\"Goals &amp; Constraints\"></a>Goals &amp; Constraints</h2><p>For our terrain to function in our environment, we constructed our systems with several priorities in mind:</p>\n<ul>\n<li>Multi-threading</li>\n<li>Load Balancing</li>\n<li>Dynamic Loading</li>\n<li>Determinism / Seeding</li>\n<li>Spherical Terrain</li>\n</ul>\n<p><strong>Multi-threading:</strong></p>\n<ul>\n<li>Due to the number of math operations that occur when our terrain is generated or modified, performance is the primary concern of this implementation.</li>\n<li>We must leverage Unity’s Job system for multi-threading to maximize the performance of our terrain generation.</li>\n</ul>\n<p><strong>Load Balancing:</strong></p>\n<ul>\n<li>As we are generating terrain for a game, it is important to load terrain quickly but also throttle operations as to not overload the user’s hardware and reduce FPS to an unplayable level.</li>\n</ul>\n<p><strong>Dynamic Loading:</strong></p>\n<ul>\n<li>Our world is a large, planet-like, environment. As voxels are stored values representing our world, those values must be stored somewhere.</li>\n<li>We quickly approach the limitations of modern hardware if we store all of these values in our active memory.  </li>\n</ul>\n<p><strong>Determinism / Seeding:</strong></p>\n<ul>\n<li>We generate terrain with the use of randomization tools such as noise functions. With that, there is a decision between a uniquely generated new world, and a randomly generated world that is made consistent by the seed that it is given.</li>\n<li>Our target was the consistent world, as it allows us to leverage Unity’s editor to place objects into our world non-procedurally.</li>\n</ul>\n<p><strong>Spherical Terrain:</strong></p>\n<ul>\n<li>As our world is a spherical planet, we needed the ability generate terrain in a radial manner. This includes developing a spherical, mountainous, surface with a cavernous core.</li>\n</ul>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><hr>\n<p>The following is a simplified overview of the pipeline:<br><img src=\"/images/TerrainGeneration/TerrainManagerFlowChart.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<h2 id=\"Chunks\"><a href=\"#Chunks\" class=\"headerlink\" title=\"Chunks\"></a>Chunks</h2><p>In the above examples, we have shown visual representations of our density values, but what is assigning them their mesh and position in the world?<br>We use a type we call <strong>Chunks</strong> to store this data and to pass it through our pipelines. In essence, a chunk is a single cube that contains a batch of voxels in the world.<br>Chunks contain the following information:  </p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Chunk coordinate</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> int3 position;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Density of each voxel (0.0f to 1.0f)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeArray&lt;<span class=\"keyword\">float</span>&gt; densities;</span><br><span class=\"line\"><span class=\"comment\">// Resource type of each voxel (iron, stone, etc)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeArray&lt;Resource.Type&gt; resources;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mesh data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;float3&gt; vertices;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;<span class=\"keyword\">int</span>&gt; triangles;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;float3&gt; normals;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;Color&gt; colors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// For sorting mesh data into sub-meshes</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;Resource.Type&gt; resourceMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If the chunk has been changed since it was loaded</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> hasChanged;</span><br></pre></td></tr></table></figure>\n\n<p>The data buffers are using Unity’s Native structures (C++ InterOp) to allow us to make use of the Burst Compiler.</p>\n<h2 id=\"Marching-Cubes-Algorithm\"><a href=\"#Marching-Cubes-Algorithm\" class=\"headerlink\" title=\"Marching Cubes Algorithm\"></a>Marching Cubes Algorithm</h2><h3 id=\"Triangulation\"><a href=\"#Triangulation\" class=\"headerlink\" title=\"Triangulation\"></a>Triangulation</h3><p>As mentioned above, the marching cube algorithm utilizes voxels to determine the density of a particular volume. This is interpreted as whether or not that point is part of the surface of our terrain. If we take the base case, a single voxel, we can look at its corner points to determine the triangle configuration of the cube that the voxel encompasses.</p>\n<p>There exist 2^8 triangle configurations. Some can be seen below:</p>\n<img src=\"/images/TerrainGeneration/MarchingCubesConfigs.png\" width=\"60%\"/>\n\n<p>The orange points at the corners indicate that they are part of the ground, while the empty corners are air. If we extend this idea to a larger grid, these triangles will connect with one another to form the basis of the terrain depending on the configuration of these values.  </p>\n<p><img src=\"/images/TerrainGeneration/MarchingExample.png\" alt=\"Marching Example\"></p>\n<p>The above image was constructed by setting all the voxels’ density values within a spherical radius of the center of the sphere to +1 (ground / filled state), and outside of the radius to 0 (air / empty state). The algorithm considers the transition between the ground and the air to be where the surface manifests, which is why our surface is a radial shape from the center of the sphere.</p>\n<h3 id=\"Smoothing\"><a href=\"#Smoothing\" class=\"headerlink\" title=\"Smoothing\"></a>Smoothing</h3><p>You get a blocky sphere when you treat your values as a boolean, either representing a value below the surface or above it. However, if we use a gradient of density values from one voxel to the next, we can utilize interpolation to alter the angle of the triangles we are constructing.</p>\n<p><strong>Smoothing Method 1:</strong></p>\n<p>One method of doing so is by setting the density values to a gradient ranging from +1 to 0, where +1 is the center of the sphere, 0.5 is the surface, and 0 is the boundary of our voxel grid. In this case, the boundary would be <code>2 * radius</code> or the <code>diameter</code> of the “world sphere”.</p>\n<p><img src=\"/images/TerrainGeneration/MarchingCubesDensityGradient.png\" alt=\"Marching Cubes Density Gradient\"></p>\n<p><strong>Smoothing Method 2:</strong></p>\n<p>Another method of achieving this effect is through a similar technique. Instead of treating the whole “world sphere” as a gradient, only treat the region around the surface as a gradient. This becomes especially useful when applied in a game setting since most nodes are either <code>1</code> or <code>0</code> and not a floating point value.</p>\n<p><img src=\"/images/TerrainGeneration/MarchingCubesDensityGradientEnhanced.png\" alt=\"Marching Cubes Density Gradient\"></p>\n<p><strong>Final Result:</strong></p>\n<p>Regardless of which method is chosen, you get the following:</p>\n<p><img src=\"/images/TerrainGeneration/MarchingExampleSmooth.png\" alt=\"Marching Example Smooth\"></p>\n<p>This diagram shows how a surface is interpolated between two vertices with varying density values.</p>\n<img src=\"/images/TerrainGeneration/MarchingCubesInterpolation.png\" width=\"60%\"/>\n<!--- Source link for the image above --->\n<a href=\"http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/\">\n  <p style=\"text-align:center\">\n  Image Source\n  </p>\n</a>\n\n<p>The following interpolation code, will achieve the smoothing shown above:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Smooths densities between 0.0f and 1.0f</span></span><br><span class=\"line\"><span class=\"comment\">// ISO Level / Height is 0.5f</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> float3 <span class=\"title\">InterpolateVerts</span>(<span class=\"params\">float3 v1, float3 v2, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">float</span>  s1, <span class=\"keyword\">float</span> s2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> ISOLevel = <span class=\"number\">0.5f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> epsilon = <span class=\"number\">0.00001f</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Account for edge case using above epsilon value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Mathf.Abs(ISOLevel - s1) &lt; epsilon ||</span><br><span class=\"line\">        Mathf.Abs(ISOLevel - s2) &lt; epsilon ||</span><br><span class=\"line\">        Mathf.Abs(s1 - s2) &lt; epsilon)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v1 + (v2 - v1) * (s1 - s2);</span><br><span class=\"line\">    <span class=\"comment\">// Lerp the point using the density values</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> t2 = (ISOLevel - s1) / (s2 - s1);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v1 + t2 * (v2 - v1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Chunk-Generation\"><a href=\"#Chunk-Generation\" class=\"headerlink\" title=\"Chunk Generation\"></a>Chunk Generation</h2><p><img src=\"/images/TerrainGeneration/TerrainManagerFlowChartRequestChunk.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<p>Now that we have our data container, and a method to convert that data to a mesh, we need to populate the container with data. Upon being requested, the chunk’s density values are generated and the chunk goes through a two-step process of executing the marching cubes algorithm and mesh construction.</p>\n<h3 id=\"Stitching-and-Sharing-Chunk-Edge-Data\"><a href=\"#Stitching-and-Sharing-Chunk-Edge-Data\" class=\"headerlink\" title=\"Stitching and Sharing Chunk Edge Data\"></a>Stitching and Sharing Chunk Edge Data</h3><p>In a multithreaded environment, it is important to package chunks as self-contained structures as to prevent read &amp; write race conditions between threads. Since the cube marching algorithm generates triangles for the regions <em>between</em> nodes, voxels, it is not trivial to split up a 3D space into chunks of nodes.</p>\n<p>The solution to this is to share data between chunks in some way. In our case, we went with duplicating node in the positive x,y,z axis. This was a memory vs multithreading complexity tradeoff.</p>\n<p>With this system, we needed to be careful when modifying shared nodes between chunks. An example of where one would need to be careful with duplication of data is <strong>deformation</strong>. If you deform on the corner of several chunks sharing an edge at inconsistent rates, that would break the consistency of the duplicated values. What results visually is a tearing effect, a gap in between the chunks. This requires additional attention to the synchronicity of the logic operating on the voxel data. </p>\n<p><img src=\"/images/TerrainGeneration/VoxelTearing.png\" alt=\"Voxel Tearing\"></p>\n<p>Duplicated edge data also comes with the requirement of having to edit chunk edges only when all neighboring chunks are loaded as well.</p>\n<h3 id=\"Chunk-Terrain-Generation\"><a href=\"#Chunk-Terrain-Generation\" class=\"headerlink\" title=\"Chunk Terrain Generation\"></a>Chunk Terrain Generation</h3><p><strong>Coming Soon</strong></p>\n<h3 id=\"Chunk-Loading\"><a href=\"#Chunk-Loading\" class=\"headerlink\" title=\"Chunk Loading\"></a>Chunk Loading</h3><p><img src=\"/images/TerrainGeneration/TerrainManagerFlowChartChunkLoader.png\" alt=\"Chunk Loader Flow Chart\"></p>\n<p>Now that we can generate chunks that also look like interesting terrain, we need a way to selectively pick which chunks to load as to not overwhelm a user’s computer with generating an entire world and expecting it all to fit in their RAM. We call this chunk loading. Similarly, this is also applied to unloading chunks.</p>\n<p>We do this by loading a <code>2n</code> by <code>2n</code> by <code>2n</code> cube around the player. You can take <code>n</code> number of chunks in each axis (<code>[x+n, x-n]</code>, <code>[y+n, y-n]</code>, and <code>[z+n, z-n]</code>) outward from the player and request them to be loaded.<br>Similarly if a loaded chunk falls outside of this cube, unload it.</p>\n<p><img src=\"/images/TerrainGeneration/ChunkLoadingDistances.png\" alt=\"Chunk Loading Distances\"></p>\n<p>When loading and unloading chunks, it was important to remember that chunks share edge data so borders of chunks cannot be edited without neighboring chunks being loaded first to preserve this “synced” state.</p>\n<p>Initial implementations of chunk loading a small region around the player produces the following:</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/InitialChunkLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<h3 id=\"Chunk-Serialization\"><a href=\"#Chunk-Serialization\" class=\"headerlink\" title=\"Chunk Serialization\"></a>Chunk Serialization</h3><p><img src=\"/images/TerrainGeneration/TerrainManagerFlowChartTerrainSerializer.png\" alt=\"Terrain Manager Flow Chart Terrain Serializer\"></p>\n<p>For our implementation, we used a simple approach for storing chunks to a file. Given a known size of a chunk (n by n by n nodes), we can read and write entire 3D arrays of data as their binary representation. This is done for both the density and resource values.</p>\n<p>It should be noted that, as a trivial form of optimization, only chunks changed by the player are saved to the disk. Since our terrain generation is deterministic and faster than loading chunks, it is faster to re-generate the chunk on request compared to loading that chunk from the disk. This, in return, also saves on disk space.</p>\n<p>These load and unload requests are performed within Unity Jobs to further utilize the player’s CPU cores from a multithreaded approach and to keep consistency with the rest of the systems.</p>\n<h3 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h3><p>Due to real-time gameplay restrictions and the amount of terrain a player is required to load, chunk generation/loading/marching needs to be highly optimized.</p>\n<p>As this is one of the most performance-critical portions of our game, we use Unity’s Job system to multi-thread the execution of this code. Originally, we had experimented with compute shader pipelines, which are faster in normal circumstances. However, after performance testing, Unity’s Burst Compiler in conjunction with the job system has outpaced these compute pipelines due to the overhead of large data buffer I/O with the GPU. The overhead of I/O was larger than the time for operations to be performed on that buffer, ultimately resulting in CPU-based computation being faster.</p>\n<h4 id=\"Optimization\"><a href=\"#Optimization\" class=\"headerlink\" title=\"Optimization\"></a>Optimization</h4><p><strong>Major sources of optimization:</strong></p>\n<ul>\n<li>Chunk Stages</li>\n<li>Cross-Frame Work</li>\n<li>Maximizing Usage &amp; Throttling</li>\n<li>Priority Queueing</li>\n<li>Level Of Detail (LOD)</li>\n</ul>\n<p>The following is frame-by-frame profiling of the chunk processing system using multiple distinct job stages and cross-frame job completion of the chunk request pipeline (after optimization):<br><img src=\"/images/TerrainGeneration/TerrainManagerJobSystem.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<p>You can see the main thread running horizontally across the top, and seven more threads running the jobs in parallel - in this case. </p>\n<h4 id=\"Chunk-Stages\"><a href=\"#Chunk-Stages\" class=\"headerlink\" title=\"Chunk Stages\"></a>Chunk Stages</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Frame</strong>: One game processing frame / update loop.</li>\n<li><strong>Work State</strong>: One of three stages a chunk will go through to be processed fully.</li>\n<li><strong>Work State Loop</strong>: One loop of all three work state steps.</li>\n</ul>\n<p>Our system uses three work states for processing chunks. These work states only allow a certain type, and by extension a certain amount, of work to be done on chunks for any given grouping of frames.<br>This technique greatly reduces lag spikes a user will experience from loading chunks.</p>\n<p>If a work state is completed early, the system will move on to the next work state without waiting for the full-frame count.</p>\n<p>For any given frame, only process one of three work states:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Do the required work for this frame</span></span><br><span class=\"line\">ProcessChunks();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If the current &quot;work state&quot; is still being processed, do not move to the next work state</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!ProcessingChunks())</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"comment\">// Move on to the next &quot;work state&quot; for next frame</span></span><br><span class=\"line\">  _workState = _workState <span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">    WORK_STATE.FILL =&gt; WORK_STATE.MARCH, <span class=\"comment\">// Generate/Load/Populate chunk with data</span></span><br><span class=\"line\">    WORK_STATE.MARCH =&gt; WORK_STATE.MESH, <span class=\"comment\">// Cube march the chunk</span></span><br><span class=\"line\">    WORK_STATE.MESH =&gt; WORK_STATE.FILL,  <span class=\"comment\">// Generate the chunk&#x27;s mesh</span></span><br><span class=\"line\">    _ =&gt; _workState</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Provided is a visual example of breaking up two sets of jobs across two frames:</p>\n<p><img src=\"/images/TerrainGeneration/BreakingUpJobs.png\" alt=\"Breaking Up Terrain Jobs\"></p>\n<p>It should be noted that, despite this optimization being applied, the nature of this game requires some chunks to be processed immediately. For example, if a player deforms/destroys part of the terrain, the changed chunks must be processed immediately as to not produce visual lag to the user. These chunks are “fast-forwarded” through this system and are processed within one frame.</p>\n<h4 id=\"Cross-Frame-Work\"><a href=\"#Cross-Frame-Work\" class=\"headerlink\" title=\"Cross-Frame Work\"></a>Cross-Frame Work</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Processing Spike</strong>: A period of higher stress on the CPU, often causing visual lag/“jumps” to the user.</li>\n</ul>\n<p>In general, each work stage will take a maximum of three frames. This technique gives jobs the ability to span across multiple frames, if needed, causing processing spikes on the CPU to “average out”.</p>\n<p>After allowing cross-frame jobs, after this optimization is applied, you can see the job (<code>GenerateHeightJob</code> in purple) running across two game frames as to not hold the main gameplay thread:</p>\n<p><img src=\"/images/TerrainGeneration/CrossFrameJobs.png\" alt=\"Cross-Frame Jobs\"></p>\n<h4 id=\"Maximizing-Usage-amp-Throttling\"><a href=\"#Maximizing-Usage-amp-Throttling\" class=\"headerlink\" title=\"Maximizing Usage &amp; Throttling\"></a>Maximizing Usage &amp; Throttling</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Job’s Average Processing Requirements</strong>: The amount of work/time a given job takes/requires when being processed by the CPU. Generally, this is a rough estimate.</li>\n</ul>\n<p>As with the previously mentioned techniques, it is important to maximize usage of the CPU while also not overloading it. Given a set of chunks to be processed, instead of computing all of them in one go, breaking up that set into batches based on CPU speed / CPU core count / a job’s average processing requirements is a good way to determine how many chunks to process in one complete work state loop.</p>\n<p>This optimization technique is most effective when the user loads <em>many</em> chunks at once, such as when they first load the world.<br>The following image shows all chunks around the player being populated with height values in one go:</p>\n<p><img src=\"/images/TerrainGeneration/JobSystemOverload.png\" alt=\"Job System Overload\"></p>\n<p>While this maximizes CPU usage, this ends up halting any single chunk from loading/rendering for a player until <em>all</em> chunks have been processed - which far from ideal. This also has the side effect of preventing those threads from being used by any other job(s) during their processing.</p>\n<p>Instead, using a per-frame burst of one-job-per-thread (or more, depending on a job’s average length) paradigm allows for maximizing thread usage without blocking other jobs or preventing rendering/loading. </p>\n<p>Using one job on each thread in per frame, a much more reasonable result is produced:</p>\n<p><img src=\"/images/TerrainGeneration/SingleFrameJobBurst.png\" alt=\"Single Frame Burst\"></p>\n<h4 id=\"Priority-Queueing\"><a href=\"#Priority-Queueing\" class=\"headerlink\" title=\"Priority Queueing\"></a>Priority Queueing</h4><p>Key Terms:</p>\n<ul>\n<li><strong>High Priority Chunk Request</strong>: A chunk that needs to be processed by the end of the <em>current</em> frame.</li>\n<li><strong>Low Priority Chunk Request</strong>: A chunk that needs to be processed as fast as possible, with minimal lag.</li>\n</ul>\n<p>Deciding which chunks should be processed first was briefly mentioned above with fast-forwarding, but it is, in reality, more complicated.</p>\n<p>Once a chunk is requested (either high or low priority), the system then sorts it into a queue based on current queued chunk priorities and will update priorities each frame, as needed.</p>\n<p>The following is a general set of rules we followed when implementing chunk processing priority queueing:</p>\n<ul>\n<li>High priority chunks:<ul>\n<li>No need to sort these requested chunks as they are <em>all</em> processing that frame.</li>\n<li>Always pulled from the queue by the system <em>before</em> low priority chunks</li>\n</ul>\n</li>\n<li>Low priority chunks:<ul>\n<li>Sorted by a weight which is usually the squared distance to the player as these chunks usually come from chunk loading</li>\n<li>Pulled from the queue by the system when there are not enough high priority chunks to process</li>\n</ul>\n</li>\n</ul>\n<p>The following code reflects these set of rules:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Grab high priority chunks (processed this frame)</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (_chunksToRegenerate.HighPriorityCount &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"comment\">// Grab any high priority chunk</span></span><br><span class=\"line\">  _chunksToRegeneratePriorityBatch.Add(_chunksToRegenerate.Pop());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If at the start of a new work state loop</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (_workState == WORK_STATE.FILL)</span><br><span class=\"line\">  <span class=\"comment\">// While there is still space to fill for the max job count - high priority chunk count</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (_chunksToRegenerateBatch.Count &lt; _maxJobCount &amp;&amp; _chunksToRegenerate.LowPriorityCount &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Pop the next item from the priority queue, sorted by distance to player</span></span><br><span class=\"line\">    _chunksToRegenerateBatch.Add(_chunksToRegenerate.Pop());</span><br></pre></td></tr></table></figure>\n\n<p>A rough example of 2D priority queueing, a cross-section of the 3D chunk loaded cube, is demonstrated as an interactive demo below. Move your cursor around to see which chunks have priority to be loaded relative to your cursor.</p>\n<p><strong>Note:</strong> This demo’s source code does not reflect the project’s implementation. It is purely for a visual understanding of the chunk loading concept.</p>\n<div style=\"text-align: center\">\n <button class=\"btn btn-primary\" onclick=\" window.open('https://openprocessing.org/sketch/1052217/embed','_blank')\">2D Priority Queue Demo</button>\n</div>\n\n<p>The maximum number of chunks a three-stage loop can process is given by the following:<br><code>Max(Number Of High Priority Chunk Count, Number Of Reasonable Chunks Per Stage Loop)</code><br>That is to say that high priority chunks are always processed with low priority chunks filling in any free slots in CPU cores.</p>\n<p>Using a priority queue and updating weights as needed, you get responsive chunk loading that can adapt quickly to, for example, changes in player position:</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/TerrainChunkPriorityLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>Once applying a similar technique to chunk unloading, you get fluid and responsive terrain.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/TerrainChunkPriorityLoadingUnloading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<h4 id=\"Level-Of-Detail-LOD\"><a href=\"#Level-Of-Detail-LOD\" class=\"headerlink\" title=\"Level Of Detail (LOD)\"></a>Level Of Detail (LOD)</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Level of Detail</strong>: Also known as LOD, it is the amount (level) of data (detail) you are choosing to display to the user. This is often used on far-away objects since it is the same to the user visually but faster to compute.</li>\n</ul>\n<p>Given our grid-based voxel terrain, LOD was trivial to implement on a basic level. Since our chunks are 16x16x16, LOD can be a power of two to reduce the amount of data that needs to be computed/rendered out of this chunk.</p>\n<p>As a simple example, take the following 2D grid of 16 voxels, 17 nodes:</p>\n<p><strong>Key:</strong></p>\n<ul>\n<li><strong>Purple Circles</strong>: Density data nodes.</li>\n<li><strong>Black Squares</strong>: Voxels generated from corner nodes.</li>\n</ul>\n<table width=\"100%\">\n  <tr>\n    <th>LOD of 1:</th>\n    <th>LOD of 2:</th>\n    <th>LOD of 4:</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD1.png\" alt=\"Cube Marching LOD 1\" width=\"100%\"/></td>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD2.png\" alt=\"Cube Marching LOD 2\" width=\"100%\"/></td>\n    <td><img src=\"/images/TerrainGeneration/CubeMarchingLOD4.png\" alt=\"Cube Marching LOD 4\" width=\"100%\"/></td>\n  </tr>\n</table>\n\n<p>As can be seen, voxels sample from fewer nodes, but are scaled to take up the same amount of space.</p>\n<p>The LOD gradients shown below demonstrate this logic applied to the terrain.</p>\n<table width=\"100%\">\n  <tr>\n    <th>Smooth Sphere LOD Gradient:</th>\n    <th>Noisy Sphere LOD Gradient</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/TerrainGeneration/LODSmoothSphere.png\" alt=\"Smooth Sphere LOD Gradient:\" width=\"500px\"/></td>\n    <td><img src=\"/images/TerrainGeneration/LODNoisySphere.png\" alt=\"Noisy Sphere LOD Gradient\" width=\"500px\"/></td>\n  </tr>\n</table>\n\n<p>Despite promising results, you would need to apply an algorithm similar to <a href=\"https://transvoxel.org/\">TransVoxel</a> to implement a more sophisticated solution that doesn’t generate holes between differing LOD levels. As of currently, we do not implement this algorithm.</p>\n<!--\nTODO:\n- Resource collection\n-->\n\n<h2 id=\"Terrain-Features\"><a href=\"#Terrain-Features\" class=\"headerlink\" title=\"Terrain Features\"></a>Terrain Features</h2><h3 id=\"Terrain-Voxel-Manipulation\"><a href=\"#Terrain-Voxel-Manipulation\" class=\"headerlink\" title=\"Terrain / Voxel Manipulation\"></a>Terrain / Voxel Manipulation</h3><p>When we manipulate our voxel terrain, we alter the density values in an area of influence.<br>In our game, we use a spherical brush to accomplish this, resulting in spherical cutouts of the terrain at the target area.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/VoxelManipulation.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>In the example above, you can see both additive and subtractive operations. Thankfully, these translate straightforwardly to adding and subtracting from the density values in our target area in a radial gradient.</p>\n<p>Below is an interactive demo of the logic functioning in a 2D variant. Mouse over the area to subtract or add from a given area, altering the terrain. These values are either 1 or -1, representing a filled or unfilled area, respectively. As there is no gradient, this will result in unsmooth terrain.</p>\n<p>Click the left mouse button to toggle addition/subtraction.</p>\n<div style=\"text-align: center\">\n <button class=\"btn btn-primary\" onclick=\" window.open('https://www.openprocessing.org/sketch/1051758/embed/','_blank')\">Brush Deformation Demo</button>\n</div>\n\n<h3 id=\"Editor-Mode\"><a href=\"#Editor-Mode\" class=\"headerlink\" title=\"Editor Mode\"></a>Editor Mode</h3><p>Procedural generation is typically executed at runtime. In other words, our voxel terrain would only be visible upon launching the game into Play Mode.<br>However, this is problematic in the case where we would like to edit our scene. How would we determine where to place a sign sticking out of the ground, or a treasure chest?<br>We’d need a way to edit the scene with the world already constructed. Our solution is editor-time world loading.  </p>\n<p>By using proximity loading of our chunks as found at runtime, we may move the player around in the scene to load whichever portion is needed to us.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainGeneration/EditorMode.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>We track the current state of the Unity editor to determine when to dispose of the memory or create it anew.<br>Entering play mode or edit mode will reconstruct the necessary memory for the voxel terrain.</p>\n<!--\n# Final Notes\n***TODO***\n~~In conclusion, this project produced an impressive and responsive terrain that makes for great gameplay.~~\n\n## Further Implementations\n- Hot-loading\n- \n-->\n\n<!---\n# ---- OTHER: ----\n## Spherical\n\n# EXTRA\n## Process of Creating a Chunk\n\nOnce a chunk entity is created and its position is assigned, it will enter the system chain to be processed in the following order\n\n## Data Generation\n## Cube Marching\n### Solution Lookup\n### Smoothing\n## Mesh Generation\nThe process of mesh generation is split into three steps:\n1) **Create Chunk Mesh**: Create the mesh object, and copy the data to the new mesh\n1) **Bake Chunk Mesh**: Bake the mesh using Unity\\'s `Physics.BakeMesh`\n1) **Set Chunk Mesh**: Create a GameObject, and assign it the new mesh.\nThe reason mesh generation is split into three distinct steps is due to the inability of steps #1 & #3 to be parallelized with burst compilation, while step #2 can be.\n### Creating the Chunk\\'s Mesh\nThis step simply creates the mesh and copies the data from the `IBufferElementData` components to the new mesh.\n\nThis is done without burst and sequentially - due to Unity\\'s `Mesh` being non-blittable.\n### Baking the Chunk\\'s Mesh\n### Setting the Chunk\\'s Mesh\n## Live Editing With Unity Atoms\n## Post Mortem\n\n- Burst-Compiled Unity Jobs\n- Chunk Loading\n- Marching Cubes\n- Unity Atoms\n---\n**NOTE**\nThe cost of using components as flags is not insignificant! The trade-off is knowing what stage any given chunk is at for debugging.\n---\n## Post Mortem\n## Unity ECS\n### Setup\nTo utilize the speed of Unity\\'s provided ECS, chunks were entities that consist of data components and their associated GameObject to store + render the mesh. Along the way, they also get tagged/untagged with \"Flag\" components to tell the next system to operate on them.\nThe ECS chunk, after processing, would contain the following component data:\n![Chunk Components](/images/TerrainGeneration/ChunkComponents.png)\n\n### Why It Didn't Work \nAfter all the work setting up systems, components, and way more, it seemed like the team was constantly fighting Unity ECS to make it fit our needs. System order was impossible to configure, command buffers wouldn't execute on the frames we needed, adding and removing components correctly was complex to manage, and what could run within a system was very restrictive.\n\nDespite this, these problems were not the deal-breaker. Even if all these problems were alleviated, we needed all these systems to process chunk entities within one frame. When the player deforms the terrain, the \"frame rate of deformation\" should run at the same rate as the rest of the game. This was not the case when the systems ran across multiple frames as the deformation would run at a perceived FPS of Frame-Rate / System-Frame-Count and would look choppy.\n\n### The Fix\nLuckily, systems are very similar to Unity's job system which allowed up to transfer over easily.\n-->\n"},{"title":"Writing a JSON serializer using C++ Reflection","author":"Roland Shum","date":"2021-10-17T01:01:01.000Z","_content":"# Background\n\n<style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n## About the Author\n\nRoland Shum: Engine Developer\n\nI am a Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.\n\n[Here](https://store.steampowered.com/search/?developer=Handshake%20Firm) are some games I have worked on and published:\n\n![ArcApellago](/images/TerrainGeneration/ArcApellago.jpg)\n![DeltaBlade2700](/images/TerrainGeneration/DeltaBlade2700.jpg)\n\n## Introduction\n\nArc Apellago was a year-long game project that I worked together with several members of the team. Its an action platformer with a focus on dash-attack and jumping around to get to the end of the level. We developed a C++ custom engine from scatch, integrating our own libraries and then using that engine to develop the game.\n\nParts of the engine I worked on\n- Integration of [Real Time Type Reflection (RTTR)](https://www.rttr.org/)\n- **[JSON](https://github.com/nlohmann/json) serialization using RTTR**\n- [ImGui](https://github.com/ocornut/imgui) Engine GUI generation using RTTR\n- Designing archetypes for entities\n\nIn addition, I worked on the game as well\n- Visual effects\n- Post processing effects\n- Player feedback\n\nAnd things outside of the engine\n- Configuring a student Azure VM to build our game on every push\n  - CI / CD\n- Configuring a student Amazon Web Service (AWS) VM to automatically sync the school's git repo to our internal private git server\n- Tracked and scoped technical tasks as part of co-producer work and making sure everyone's workflow was smooth\n\nToday I'll be talking about what I used RTTR for in the game engine; mainly for integrating **JSON serialization**. I will be describing a simplified version of what I did and omitting long talks into the many mistakes I've made; I'll only point out my mistakes from time to time. **I hope this will be useful for people trying to thread on the same path I did.** \n## What are you talking about?\n\nSo essentially what I did was\n\n1) Integrate reflection library (RTTR)\n2) Integrate JSON reading and writing data\n3) **For serialization**\n   - **Use reflection to generate the JSON object**\n   - **Use JSON object and JSON library to write to file**\n4) For deserialization\n   - Read JSON from file to read JSON object\n   - Use JSON object to read achetypes\n5) Use reflection data to generate editor GUIs for modifying values at runtime\n   \nThis blog will be focused on json serialization with reflection.\n\n### What is reflection\nReflection is the ability to inspect, modify, and call methods at runtime. Imagine being able to inspect your type of object, and getting information about it.\n\n\n![MyStruct](/images/Reflection-Serializer/CPPStruct.png)\n\nEssentially, you can get a MyStructType that describes \"Hey I have a string name, an int data, a float bigNumber, and two methods. My name is 'MyStruct'\".\n\n### Why did you need reflection?\nSo my team and I were thinking about serialization, and we realized we did not have much experience with it. \n\nMy goals for the serialization system\n- Be able to serialize any type of object to json with a common interface\n- Read archetypes from json files\n- Programmers do not need to write serialization code\n  - Fully abstracted and written for them, unless specified\n  - **This will save up to 1/3 of the time writing a script!**\n\nIn order to achieve the last goal, the only realistic way I could think of was to use a reflection system. I can iterate through an objects properties (picture above) and turn it into JSON something below.\n\n```json\n{\n  \"MyStruct\" : {\n\t\"name\" : \"Instance Name\",\n\t\"data\" : 2,\n\t\"bigNumber\" : 2.0\n  }\n}\n```\n\n\n# Goals and Constraints\nFor the serializer to function, I constructed the system with several things in mind.\n- Entity archetype saving and loading to Json\n- Abstracted from gameplay programmers\n  - Scripts don't have to care about serializing\n- Json file is readable to humans\n  - Designer can modify from json file\n\n\n> Learning point:\nThe above seems good right? This was actually a **bad** set of goals. One major thing I overlooked was **saving and loading from a scene**. I also screwed up thinking that the **designer modifying from the json file** is a good thing. You want a tool for that instead.\n\n# Implementation\n\nI started working on the json integration first as I wanted to fullfill the Course's requirement on serialization first, and then do the reflection and GUI as an add on.\n\n> Learning point: In hindsight, while in the short term this was the right decision,the long term was a bad one. Anyone can see once laid out that I should have worked with RTTR first, and then wrote the serializer and gui generator with it as a dependancy. Because of this mistake, I was straddled with legacy code that I had to write around.\n\n## Serializer 1.0\nThe following is the diagram describing the serializer.\n\n![Mind map of serializer](/images/Reflection-Serializer/serializermap.png)\n\nAt 1.0, the goal was to get serialization working ASAP and getting past the grading requirments for it. I used the simplest method I know.\n\n```c++\n// Sample object\nstruct Vector3{\n    float x, y, z;\n    JSON Serialize() const\n    {\n        JSON j;\n        j[\"x\"] = x;\n        j[\"y\"] = y;\n        j[\"z\"] = z;\n        return j;\n    }\n    static Vector3 Deserialize(JSON& json)\n    {\n        Vector3 vec;\n        vec.x = json[\"x\"];\n        vec.y = json[\"y\"];\n        vec.z = json[\"z\"];\n        return vec;\n    }\n}\n\nclass Serializer{\n    public:\n    template<typename T>\n    JSON SerializeToJSON(const T& obj)\n    {\n        return obj.Serialize();\n    }\n    template<typename T>\n    T DeserializeFromJSON(JSON& json)\n    {\n        return T::Deserialize(json);\n    }\n}\n\n// somewhere in code\nVector3 dir = {0,0,0};\nJSON j = Serializer::SerializeToJSON(dir);\nsave_to_file(j, \"dir.json\")\n```\nThere were mainly two ways I saw to go with this\n\n1) Use a template like what I am doing and call Serialize(). If T doesn't have this method compilation will fail.\n2) All types inherit ISerializble, and then use polymorphism.\n\nI went with option 1) because we were using glm::vec3 types and did not want to write an abstraction layer over them. Virtual functions also cause a cache miss, so I didn't want to lose out on performance.\n\n>Learning Point: The cache miss point was totally irrelevant. It would never have mattered since the perf I saved was so small. Furthermore, a bunch of these small code and legacy Json files became a massive headache later on development when I refused to just delete them. I should have called a team meeting and insist on removing the legacy code and data instead of putting two different architechture types together\n\n>Pondering Point: Should I have written an abstraction over glm (math library)? Common practice lean towards writing abstractions over every library you import, but a lot of glm functions only work because they expect glm functions. Writing our own abstraction just meant writing boilerplate code over the glm ones, and that seemed like a waste of time since we don't plan on using another math library.\n\n## Serializer 2.0\n\nYou may notice that the serializer 1.0 *does nothing*. It only gives ensures common interface of T (to have a method called Serialize()).\n**Currently the object is responsibly for *how* it serializes itself, what we want is for the *serializer* to be responsible for that.**\n\nWhat we currently have:\n![Serializer 1.0](/images/Reflection-Serializer/serializer_before.png)\n\nBut what we really want is:\n![Serializer 2.0](/images/Reflection-Serializer/serialize-after.png)\n\nI'll now walk through a simplified version of my Serializer 2.0 and explain the thought process behind it. \n\nThere are 3 main ideas crucial to bringing the initial algorithm together.\n1) Deconstructing a user-defined data type\n2) Understanding how things should be on the JSON side\n3) Dealing with pointers, data structures, and containers\n\nAnd after that I had to modify the algorithm to work with RTTR library. Lets drive right in.\n\n### Deconstructing a user-defined data type\nEvery type in C++ can be deconstructed to its fundamental types of int, char, pointer, etc.\n\n```c++\nstruct InnerClass\n{\n    int data;\n    float floatdata;\n}\n\nstruct OuterClass\n{\n    InnerClass innerClass;\n    const char * c_string;\n}\n////////////////////////////////////\n// Outerclass can be deconstructed into\nOuterClass\n{\n    int data;\n    float floatdata;\n    const char* c_string;\n}\n```\n\nSo the plan is to deconstruct a type *as much as possible*. Hence the general algorithm I used is\n\n```py\n# version 1\ndef Serialize(obj):\n    if obj is a basic type\n        serialize data as one of the basic types\n    else\n        for each property on obj:\n            Serialize(property)\n```\n\nSeems simple for now! Notice that I passed over what it means to be a basic type. While we understand in C++ those data types, what are the fundamental basic types in JSON? \n\n### Examining the JSON side\nJson has five data types\n\n1) Number\n   - No distinction between floats and ints and unsigned etc\n2) String\n3) Boolean\n4) Array\n5) Object\n   - Collection of name-value pairs\n6) null\n   - empty\n\nGiven these data types, it makes sense to store C++ user defined types as objects, and they would in turn recursively store things until its either \n\n1. A number\n2. A string\n3. A boolean\n4. Or an array\n\nI used the property name as the key, and the object itself as the value. This seemed most intuitive. You might notice that 'A number' doesn't describe the wide range of data types that can represent a number in C++. Thankfully, most JSON libraries can handle this. Thus when serialized OuterClass would look like \n\n```json\n{\n    \"OuterClass\" : {\n        \"innerClass\" : {\n            \"data\" : 0,\n            \"floatdata\": 0.0\n        },\n        \"c_string\" : \"cstring\"\n    }\n}\n```\n\n\n\n> Learning Point: One of the goals were to have the designer change the data from the json file. Thus I wanted the json file to be \"human readable\". This in turn led to some very poor choices like serializing Vec3 as an array of 3 floats etc. These edge cases piled up instantly and made my deseriailization work a mess. If I were to do this again I would just try to write the base code as intuitively (for a programmer) as possible, and then write a tool to modify  the json file.\n\n\nTake note that this was the *final* output that I have decided on. During the course of developement, there were three different outputs that I tried, and I finally settled on keeping the algorithm clean instead.\n\n```py\n# Version 2\n# Kickoff function\ndef Serialize(obj, name):\n    JSON jsonObj\n    SerializeRecur(obj, jsonObj[name])\n    return jsonObj\n\n# Arg0: object we want to serialize\n# Arg1: json object to add onto\ndef SerializeRecur(obj, jsonObj):\n    if obj is a basic type\n        SerializeBasicType(obj, jsonObj[obj.name()])\n    else\n        for each property on obj:\n            SerializeRecur(property, jsonObj[property.name()])\n\n// Possible usage\nOuterclass outerClass\nSerialize(outerClass, \"OuterClass\") \n```\n>The mentioned three different versions of output became a long lasting pain. I could never easily refactor my code without totally busting the previous versions. In hindsight, I should have gotten rid of them ASAP and swapped to the newer versions. Also, I should have given my Json files a version number to keep track of which version of the loader I was using. That way I could have kept my code clean instead of integrating them all into Frankenstien. \n\n### Dealing with C++'ness' issues\nI've explained the very high level general algorithm of deconstructing a C++ type into its base type, and how I translated that into JSON file. When it comes to the dirt though, there are lots of weird C++ issues to deal with, and I'm glad I used RTTR as a library instead of writing my own reflection system to deal with them.\n\nThis part really consists of deconstructing what it means to be a *fundamental type in the context of serialization*. \n\n#### Dealing with polymorphism\nHeres an example of some very reasonable code that would break our current algorithm.\n\n```c++\nstruct Base { RTTR_ENABLE() };\nstruct Middle : Base { RTTR_ENABLE(Base) };\nstruct Derived : Middle { RTTR_ENABLE(Middle) };\n\nstruct Foo { Base* bar = nullptr;};\n\nFoo foo;\nDerived derived;\n\nfoo.bar = &derived;\n// How do we serialize Derived when we have a pointer to Bar?\n```\nPolymorphism! And pointers! Pointers are a base data type, how do we deal with it? On the topic of pointers, what if it was a *shared* pointer? \n\n```c++\nstruct Foo {std::shared_ptr<Derived> ptr;}\n\nFoo foo;\nstd::shared_ptr<Derived> instance = std::make_shared<Derived>();\nfoo.ptr = instance;\n// How do we deal with this??\n```\n> At the start of the project, we were avoiding shared pointers because we were not doing multithreading and did not think we would need to manage our objects. This turns out to be completely false assumption when we realized our game code had behavior that references other behaviors. This caching became a classic dangling pointer problem. We only noticed this problem a quater of the way through the project, and decided to convert to smart pointers rather then deal with implementing some sort wrapper that acheived the same thing but specific to our engine. There was also a discussion about getting all the references every frame, but that was thrown out once we realized some behaviors *needed* references, like AIs need to know player and the search isn't cheap.\n\nSo lets revisit our high level algorithm, and modify it. We need to deal with getting, as RTTR defines it, the *raw type* of our object. A raw type is a type *without any qualifiers* (const, volatile, etc) nor any pointer.\nAfter that, we need to detect if it is a shared_ptr, or something that wraps a value. Luckily, RTTR provides [functionality](https://www.rttr.org/doc/master/classrttr_1_1type.html#ad17345a59c8e3cc8a754eb4ec124581e) that detects if a type is a wrapper type. \n\nAs for getting the derived type of a pointer, RTTR deals with that for us with [get_derived_type()](https://www.rttr.org/doc/master/classrttr_1_1instance.html#ab30381b954f8d8abc2da9c5162fb130d).\n\nI'll also swap the pseudocode for checking base type for an rttr function [is_class()](https://www.rttr.org/doc/master/classrttr_1_1type.html#a8bd100682c9b846f6da1c5c9fb96f8c6).\n\n```py\n# Version 3\n# Here I'm working in psuedo code with RTTR API\n\n# Kickstart function\ndef Serialize(obj, name):\n    JSON jsonObj\n    SerializeRecur(obj, jsonObj[name])\n    return jsonObj\n\n# Arg0: object we want to serialize\n# Arg1: json object to add onto\ndef SerializeRecur(obj, jsonObj):\n    # If object is a fundemental C++ type, we'll go straight to writing it\n    if not obj.is_class()\n        SerializeBasic(obj, jsonObj)\n\n    else\n        # Get the type of the object if it is a wrapper\n        if obj.type.get_raw_type().is_wrapper()\n            localObj = obj.get_wrapped_instance()\n        else\n            localObj = obj\n\n        # Deal with pointer issues by going to the derived class\n        derivedType = localObj.get_derived_type()\n        # Get property list from the derived type\n        var property_list = derivedType.get_properties()\n\n        # Iterate through the property list\n        for var property in property_list\n            # Get the value of the property\n            rttr::variant property_value = property.get_value(localObj)\n            # Keep serializing them based on property name\n            SerializeRecur(property_value, jsonObj[property.name()])\n\n\n// Possible usage\nOuterclass outerClass\nSerialize(outerClass, \"OuterClass\") \n```\n\n### Dealing with arrays and data structures\nSome very useful data structures that we want to serialize are arrays, vectors, and C++ maps (ordered or unordered). Thankfully they have pretty 1 : 1 conversions to JSON data.\n- C++ Arrays <-> JSON Arrays\n- C++ Vectors <-> JSON Arrays\n- C++ Maps <-> JSON Objects\n\nEven better, RTTR has two methods of identifying containers that cover your STL data containers. [is_associative_container()](https://www.rttr.org/doc/master/classrttr_1_1variant.html#aabe380968e1d9fcd27a2f3e77728b197) and [is_sequential_container()](https://www.rttr.org/doc/master/classrttr_1_1variant.html#a2d584cf950f15d1a52469b5f042488a3). [Associative containers](https://en.wikipedia.org/wiki/Associative_containers) are like maps, you map one thing to another. [Sequential containers](https://en.wikipedia.org/wiki/Sequence_container_(C%2B%2B)) are containers with memories laid out contigiously, like vectors and arrays. According to wikipedia, the current C++ data structures are below.\n- Sequential Container\n  - Array\n  - Vector\n  - List\n  - Forward_list\n  - Deque\n- Associative Container\n  - Set\n  - Map\n  - Multiset\n  - Multismap\n  \nAnd so we will have\n\n\n- C++ Array <-> Sequential Container <-> JSON Array\n- C++ Vector <-> Sequential Container <-> JSON Array\n- C++ Maps <-> Associative Container <-> JSON Objects\n- C++ Hash Maps (Unordered_*) <-> Associative Container <-> JSON Objects\n\nWhich simplifies to\n- Sequential Container <-> JSON Array\n- Associative Container <-> JSON Objects\n\nSo we will identify if the type of the object is sequential or associative, and if they are we will handle them.\n```py\n# Version 4\n# Here I'm working in psuedo code with RTTR API\n\n# Kickstart function\ndef Serialize(obj, name):\n    JSON jsonObj\n    Serialize(obj, jsonObj[name])\n    return jsonObj\n\n# Arg0: object we want to serialize\n# Arg1: json object to add onto\ndef SerializeRecur(obj, jsonObj):\n    # If object is a fundemental C++ type, we'll go straight to writing it\n    if not obj.is_class()\n        SerializeBasic(obj, jsonObj)\n    else if obj.is_associative_container()\n        SerializeAssociativeContainer(obj, jsonObj)\n    else if obj.is_sequential_container()\n        SerializeSequentialContainer(obj, jsonObj)\n    else\n        # Get the type of the object if it is a wrapper\n        if obj.type.get_raw_type().is_wrapper()\n            localObj = obj.get_wrapped_instance()\n        else\n            localObj = obj\n\n        # Deal with pointer issues by going to the derived class\n        derivedType = localObj.get_derived_type()\n        # Get property list from the derived type\n        var property_list = derivedType.get_properties()\n\n        # Iterate through the property list\n        for var property in property_list\n            # Get the value of the property\n            rttr::variant property_value = property.get_value(localObj)\n            # Keep serializing them based on property name\n            SerializeRecur(property_value, jsonObj[property.name()])\n\n\n// Possible usage\nOuterclass outerClass\nSerialize(outerClass, \"OuterClass\") \n```\n#### Sequential Container Seriailization \nAfter detecting whether it is an associative or a sequential container, we have to decide how to serialize it. We'll start with sequential since thats the simplest. Since sequential maps to Json arrays 1 to 1, this was pretty simple.\n\n```py\ndef WriteArray(obj, jsonObj):\n    jsonObj.WriteJsonArray()\n\n    for each item in obj, and counter start from 0:\n        WriteVariant(item, writer[counter])\n        counter += 1\n```\n\n```json\n{\n    \"array\" : [\n        a,\n        b,\n        c\n    ],\n}\n```\n#### Associative Container\nThis one is a *bit* more complicated. We want to store both key and value, and we know our object will have multiple key and value. So lets use a json array to indicate all the key-pair values as json objects. \n\n```py\ndef WriteAssociative(obj, jsonObj):\n    jsonObj.WriteJsonArray()\n\n    for each item in obj, and counter start from 0:\n        WriteVariant(item.first, writer[i][\"Key\"])\n        WriteVariant(item.second, writer[i][\"Value\"])\n```\nand we're expecting something like this.\n```json\n    \"dictionary\" : [\n        {\n            \"key\": \"red\",\n            \"value\": {\n                \"x\": 5,\n                \"y\": 6\n            }\n        },\n        {\n            \"key\": \"green\",\n            \"value\": {\n                \"x\": 1,\n                \"y\": 2\n            }\n        },\n    ]\n```\n\n\n### Wrangling RTTR\nIt was hard working with a library where I had no idea how it internally works. Let me explain some of the main concepts of RTTR that I had trouble understanding at first. This section will detail mainly how I coded the above psuedocodes in a C++ manner.\n\n- [Instance](https://www.rttr.org/doc/master/classrttr_1_1instance.html)\n  - Holds a reference to the given object.\n  - Think of it as a std::any<T&>\n- [Variant](https://www.rttr.org/doc/master/register_variant_page.html)\n  - Return value for properties and methods\n  - Content is ***copied*** over to new instance of content\n  - Think of it as a std::any<T>\n- [Properties](https://www.rttr.org/doc/master/register_properties_page.html)\n  - Pretty straight forward\n- [Policies](https://www.rttr.org/doc/master/register_policies_page.html)\n  - Control how RTTR creates your object\n  - This matters when the code starts running too slow\n  \n> One of the weirder things about the RTTR library is how *different* and how *little* an instance provides over a variant. I would expect an instance to have just as much to offer as a variant in terms of interface. It seems strange that I would need to copy an object anytime I wanted to query more information on it.\n\n> Also this sets a constraint that you need to use assignment operators for whatever you're serializing. And default constructors for compatibility with sequential and associative containers.\n\nWith those in mind, lets get to writing actual C++ code and we'll start with registering our class with RTTR\n#### Registration\nThis part is pretty straightforward, do it in the CPP with a couple of macros from RTTR. Here, we register InnerClass with properties innerClass and c_string. After that we register InnerClass with data and floatdata.\n```c++\nRTTR_REGISTRATION\n{\n\tusing namespace rttr;\n\tregistration::class_<InnerClass>(\"InnerClass\")\n\t\t.constructor<>()\n\t\t(\n\t\t\trttr::policy::ctor::as_raw_ptr // Construct as raw pointer instead of shared for simplicity's sake\n\t\t)\n\t\t.property(\"data\", &InnerClass::data)\n\t\t.property(\"floatdata\", &InnerClass::floatdata)\n\t;\n\n    registration::class_<OuterClass>(\"OuterClass\")\n\t\t.constructor<>()\n\t\t(\n\t\t\trttr::policy::ctor::as_raw_ptr // Construct as raw pointer instead of shared for simplicity's sake\n\t\t)\n\t\t.property(\"innerClass\", &OuterClass::innerClass)\n\t\t.property(\"c_string\", &OuterClass::c_string)\n\t;\n}\n\n```\n#### Writing the serialization code\nLets begin by taking in a name and a instance (reference) of the object.\n\n```c++\n// Kickstart function\nJSON ToJson(rttr::instance obj, const std::string& name)\n{\n    JSON writer;\n    ToJSonRecur(obj, writer[name]);\n    return writer;\n}\n```\n\n##### Improvements to fundemental type detection\nI was stuck here for a long time figuring out how wrangle the conversions between instances and variants and serialization. In the end, I implemented a function dedicated to writing variants, and then another function for writing basic types. Both of these work with a \"white list\"; that is if the function detects it cannot be serialized and return false.\n\n\n\nLets take a look at the recursive function from before.\n```c++\n// !Passing something that isn't supposed to be written as a Json Object will have issues\nvoid ToJsonRecur(rttr::instance obj, JSON& writer)\n{\n    if(WriteFundamentalType(obj, writer))\n    rttr::instance localObj;\n    // Get the type of the object if it is a wrapper\n    if(obj.get_type().get_raw_type().is_wrapper())\n        localObj = obj.get_wrapped_instance();\n    else\n        localObj = obj;\n\n    // Get the property list while dealing with polymorphism derived type\n    auto prop_list = obj.get_derived_type().get_properties();\n    \n    // Iterate through the property list\n    for (auto prop : prop_list)\n    {\n        // Get the value of the property\n        rttr::variant prop_value = prop.get_value(obj);\n        if (!prop_value)\n            continue; // cannot serialize, because we cannot retrieve the value\n        // Get the name of the property\n        const auto name = prop.get_name();\n        // Attempt to write the variant\n        if (!VariantSerializer(prop_value, writer[name.data()]))\n        {\n            std::cerr << \"cannot serialize property: \" << name << std::endl;\n        }\n    }\n}\n\n// Example use case\nOuterClass foo;\nJSON writer;\nToJsonRecur(foo, \"foo\", writer);\n```\nThe biggest difference is the use of rttr::instance as the object. This was chosen for the simple interface given. For some weird reason I **could not** convert an instance to a variant. It might make more sense to pass in a variant in that sense since variants have more functionality, but its also a copy which can be expensive. \n\nThis choice removed the possibility of checking whether the instance is a fundamental type, and all the checking for the the maps before we split it up. This actually helped writing the code in a certain way because I could seperate the code more clearly from an RTTR perspective.\n\nA second issue that came up was how to abstract the fundamental type seriailization detection out. In the end, I opted for a function that will attempt to serialize the object as a fundamental type, and if it fails it will return false. We will then test if it is any of the data containers, and then check how many properties the object has. If there it has  properties, then we can serialize it as a jsonObj.\n\nSo the plan is to deal with each RTTR abstraction at each level appropriately.\n![The new plan](/images/Reflection-Serializer/serialize_new_plan.png)\n\nAnd a fleshed out detail of the plan is on this image.   \n\n![The new plan with detail](/images/Reflection-Serializer/serialize_detail.png)\n\nWith the new algorithm, WriteVariant() is the crux of it all. It attempts to write the object, and if it can't have several fallbacks, and at the end of it will either return true or fail. Failing means a case we haven't dealt with yet(pointers for example).\n\nAnother side-effect of this version of the algorithm is that we can only kick off the serialization function if the object we're passing in has properties. Meaning the type has to be a jsonObj. However, we can easily use WriteVariant() as the entry point if required.\n\n> Learning Point: Typically, serialization code is paired with deserialization code. Hence the simpler your serialization code, the easier it will be to write your deserialization. For my engine code, I did my own serialization of many glm types, like glm::vec3, early on and this came back to haunt me as I had to keep creating edge cases for detecting a glm::vec3 in my deserialization code. Keep it simple, less things to worry about when writing deserialization.\n\n#### C++ code\nHeaded back to the code, lets show the changed toJsonRecur().\n\n```c++\nvoid toJsonRecursive(const instance& obj, json& writer)\n{\n    // Dealing with wrapped objects\n    instance localObj;\n    if(obj.get_type().get_raw_type().is_wrapper())\n        localObj = obj.get_wrapped_instance()\n    else\n        localObj = obj;\n    // Handling pointer polymorphism cases\n    auto prop_list = obj2.get_derived_type().get_properties();\n    for (auto prop : prop_list)\n    {\n        // Retrieving value from property\n        variant prop_value = prop.get_value(obj2);\n        if (!prop_value)\n            continue; // cannot serialize, because we cannot retrieve the value\n        // Retrieve name of property\n        const auto name = prop.get_name();\n        // Serialize value of property using name\n        if (!WriteVariant(prop_value, writer[name.data()]))\n        {\n            std::cerr << \"Failed to serialize\" << name << std::endl;\n        }\n    }\n}\n```\n\nPretty much the same thing as the initial algorithm, except without all the checking. The checking has now moved to WriteVariant(), and here is the crux of the algorithm.\n\n```c++\nbool WriteVariant(const variant& var, json& writer)\n{\n    // Deal with wrapped type\n    variant localVar = var;\n    type varType = var.get_type();\n    if(varType.is_wrapper())\n    {\n        varType = varType.get_wrapped_type();\n        localVar = localVar.extract_wrapped_value();\n    }\n\n    if (AttemptWriteFundementalType(varType, localVar, writer))\n    {\n        // Successful write!\n    }\n    // If its not a fundamental, is it a sequential?\n    else if (var.is_sequential_container())\n    {\n        WriteArray(var.create_sequential_view(), writer);\n    }\n    // Is it associative\n    else if (var.is_associative_container())\n    {\n        WriteAssociativeContainer(var.create_associative_view(), writer);\n    }\n    else\n    {\n        // Not a fundemental, or a container. Check if its an object\n        auto child_props = varType.get_properties();\n        if (!child_props.empty())\n        {\n            // We have properties, thus we can be serialized as an object\n            toJsonRecursive(var, writer);\n        }\n        else\n        {\n            // Assert\n            // Some unknown type that is not a fundamental, has no properties, and is not a data structure\n            // Probably some registration issue\n            // Or its a pointer! I handled pointers in here my game code\n            assert(\"Unknown RTTR serilization edge case that we haven't discovered\");\n            return false;\n        }\n    }\n\n    return true;\n}\n```\nI moved the data container checking and writing of fundamental types here. Pretty self-explanatory stuff here. The only thing really worth mentioning is that I had to create a *_container view to view the container for WriteArray() and WriteAssociativeContainer().\n\nNow lets take a look at the writing of fundamental types. One benefit here is that if we have more fundamental types to handle we can just put it in this function.\n\n```c++\nbool AttemptWriteFundementalType(const type& t, const variant& var, json& writer)\n{\n    // Json Number\n    if (t.is_arithmetic())\n    {\n        if (t == type::get<bool>())\n            writer = var.to_bool();\n        else if (t == type::get<char>())\n            writer = var.to_bool();\n        else if (t == type::get<int>())\n            writer = var.to_int();\n        else if (t == type::get<uint64_t>())\n            writer = var.to_uint64();\n        else if (t == type::get<float>())\n            writer = var.to_double();\n        else if (t == type::get<double>())\n            writer = var.to_double();\n        return true;\n    }\n    // Enumeration as string\n    else if (t.is_enumeration())\n    {\n        bool ok = false;\n        // Attempt to serialize as string\n        auto result = var.to_string(&ok);\n        if (ok)\n        {\n            writer = var.to_string();\n        }\n        else\n        {\n            // Attempt to serialize as number\n            auto value = var.to_uint64(&ok);\n            if (ok)\n                writer = uint64_t(value);\n            else\n                writer = nullptr;\n        }\n\n        return true;\n    }\n    // Strings!\n    else if (t == type::get<std::string>())\n    {\n        writer = var.to_string();\n        return true;\n    }\n\n    // Not a fundamental type we know how to process\n    return false;\n}\n```\nNotice that this function doesn't expect itself to handle all sorts of weird stuff like pointers, wrappers, or anything like that. Its very much a **\"If you have these I will serialize it. If not then good bye.\"**\n\nAs for the associative and sequential containers:\n```c++\nstatic void WriteArray(const variant_sequential_view& view, json& writer)\n{\n    // Init array\n    writer = json::array();\n    int i = 0;\n    for (const auto& item : view)\n    {\n        WriteVariant(item, writer[i]);\n        i++;\n    }\n}\n\nstatic void WriteAssociativeContainer(const variant_associative_view& view, json& writer)\n{\n    static const string_view key_name(\"key\");\n    static const string_view value_name(\"value\");\n\n    writer = json::array();\n    int i = 0;\n    // Dealing with keys = values containers like sets\n    if (view.is_key_only_type())\n    {\n        for (auto& item : view)\n        {\n            WriteVariant(item.first, writer[i]);\n            i++;\n        }\n    }\n    else\n    {\n        for (auto& item : view)\n        {\n            WriteVariant(item.first, writer[i][key_name.data()]);\n            WriteVariant(item.second, writer[i][value_name.data()]);\n            i++;\n        }\n    }\n}\n```\n\n# Conclusion\nYou usually have to pair a serialization function with a deserialization function, but with this the base is setup such that it'll be easier to do deserialization. If I have time, I'll talk about how to deserialize from the json file to memory; its not particularly hard now that we have a good base setup.\n\nI hope this helps description will help someone in the future doing something similar and avoid the pains I had to trod through.\n\n\nWith that this is the end of this small write up. I did not come up with the entire thing myself; I had to do quite a lot of research and looking up and seeing other people's code before coming to this solution. RTTR has its own example of how to do json serialization, and it was from their code that I solved the issues with instances and variants. \n\n[Here](https://github.com/ShumWengSang/Reflection-Json-Serializer) is the Github link to the source code used for examples here.","source":"_posts/reflection-serializer.md","raw":"---\ntitle: Writing a JSON serializer using C++ Reflection\nauthor: Roland Shum\ntags: \n- C++\n- GameEngine\n- GameDev\ndate: 2021-10-17 01:01:01\n---\n# Background\n\n<style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n## About the Author\n\nRoland Shum: Engine Developer\n\nI am a Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.\n\n[Here](https://store.steampowered.com/search/?developer=Handshake%20Firm) are some games I have worked on and published:\n\n![ArcApellago](/images/TerrainGeneration/ArcApellago.jpg)\n![DeltaBlade2700](/images/TerrainGeneration/DeltaBlade2700.jpg)\n\n## Introduction\n\nArc Apellago was a year-long game project that I worked together with several members of the team. Its an action platformer with a focus on dash-attack and jumping around to get to the end of the level. We developed a C++ custom engine from scatch, integrating our own libraries and then using that engine to develop the game.\n\nParts of the engine I worked on\n- Integration of [Real Time Type Reflection (RTTR)](https://www.rttr.org/)\n- **[JSON](https://github.com/nlohmann/json) serialization using RTTR**\n- [ImGui](https://github.com/ocornut/imgui) Engine GUI generation using RTTR\n- Designing archetypes for entities\n\nIn addition, I worked on the game as well\n- Visual effects\n- Post processing effects\n- Player feedback\n\nAnd things outside of the engine\n- Configuring a student Azure VM to build our game on every push\n  - CI / CD\n- Configuring a student Amazon Web Service (AWS) VM to automatically sync the school's git repo to our internal private git server\n- Tracked and scoped technical tasks as part of co-producer work and making sure everyone's workflow was smooth\n\nToday I'll be talking about what I used RTTR for in the game engine; mainly for integrating **JSON serialization**. I will be describing a simplified version of what I did and omitting long talks into the many mistakes I've made; I'll only point out my mistakes from time to time. **I hope this will be useful for people trying to thread on the same path I did.** \n## What are you talking about?\n\nSo essentially what I did was\n\n1) Integrate reflection library (RTTR)\n2) Integrate JSON reading and writing data\n3) **For serialization**\n   - **Use reflection to generate the JSON object**\n   - **Use JSON object and JSON library to write to file**\n4) For deserialization\n   - Read JSON from file to read JSON object\n   - Use JSON object to read achetypes\n5) Use reflection data to generate editor GUIs for modifying values at runtime\n   \nThis blog will be focused on json serialization with reflection.\n\n### What is reflection\nReflection is the ability to inspect, modify, and call methods at runtime. Imagine being able to inspect your type of object, and getting information about it.\n\n\n![MyStruct](/images/Reflection-Serializer/CPPStruct.png)\n\nEssentially, you can get a MyStructType that describes \"Hey I have a string name, an int data, a float bigNumber, and two methods. My name is 'MyStruct'\".\n\n### Why did you need reflection?\nSo my team and I were thinking about serialization, and we realized we did not have much experience with it. \n\nMy goals for the serialization system\n- Be able to serialize any type of object to json with a common interface\n- Read archetypes from json files\n- Programmers do not need to write serialization code\n  - Fully abstracted and written for them, unless specified\n  - **This will save up to 1/3 of the time writing a script!**\n\nIn order to achieve the last goal, the only realistic way I could think of was to use a reflection system. I can iterate through an objects properties (picture above) and turn it into JSON something below.\n\n```json\n{\n  \"MyStruct\" : {\n\t\"name\" : \"Instance Name\",\n\t\"data\" : 2,\n\t\"bigNumber\" : 2.0\n  }\n}\n```\n\n\n# Goals and Constraints\nFor the serializer to function, I constructed the system with several things in mind.\n- Entity archetype saving and loading to Json\n- Abstracted from gameplay programmers\n  - Scripts don't have to care about serializing\n- Json file is readable to humans\n  - Designer can modify from json file\n\n\n> Learning point:\nThe above seems good right? This was actually a **bad** set of goals. One major thing I overlooked was **saving and loading from a scene**. I also screwed up thinking that the **designer modifying from the json file** is a good thing. You want a tool for that instead.\n\n# Implementation\n\nI started working on the json integration first as I wanted to fullfill the Course's requirement on serialization first, and then do the reflection and GUI as an add on.\n\n> Learning point: In hindsight, while in the short term this was the right decision,the long term was a bad one. Anyone can see once laid out that I should have worked with RTTR first, and then wrote the serializer and gui generator with it as a dependancy. Because of this mistake, I was straddled with legacy code that I had to write around.\n\n## Serializer 1.0\nThe following is the diagram describing the serializer.\n\n![Mind map of serializer](/images/Reflection-Serializer/serializermap.png)\n\nAt 1.0, the goal was to get serialization working ASAP and getting past the grading requirments for it. I used the simplest method I know.\n\n```c++\n// Sample object\nstruct Vector3{\n    float x, y, z;\n    JSON Serialize() const\n    {\n        JSON j;\n        j[\"x\"] = x;\n        j[\"y\"] = y;\n        j[\"z\"] = z;\n        return j;\n    }\n    static Vector3 Deserialize(JSON& json)\n    {\n        Vector3 vec;\n        vec.x = json[\"x\"];\n        vec.y = json[\"y\"];\n        vec.z = json[\"z\"];\n        return vec;\n    }\n}\n\nclass Serializer{\n    public:\n    template<typename T>\n    JSON SerializeToJSON(const T& obj)\n    {\n        return obj.Serialize();\n    }\n    template<typename T>\n    T DeserializeFromJSON(JSON& json)\n    {\n        return T::Deserialize(json);\n    }\n}\n\n// somewhere in code\nVector3 dir = {0,0,0};\nJSON j = Serializer::SerializeToJSON(dir);\nsave_to_file(j, \"dir.json\")\n```\nThere were mainly two ways I saw to go with this\n\n1) Use a template like what I am doing and call Serialize(). If T doesn't have this method compilation will fail.\n2) All types inherit ISerializble, and then use polymorphism.\n\nI went with option 1) because we were using glm::vec3 types and did not want to write an abstraction layer over them. Virtual functions also cause a cache miss, so I didn't want to lose out on performance.\n\n>Learning Point: The cache miss point was totally irrelevant. It would never have mattered since the perf I saved was so small. Furthermore, a bunch of these small code and legacy Json files became a massive headache later on development when I refused to just delete them. I should have called a team meeting and insist on removing the legacy code and data instead of putting two different architechture types together\n\n>Pondering Point: Should I have written an abstraction over glm (math library)? Common practice lean towards writing abstractions over every library you import, but a lot of glm functions only work because they expect glm functions. Writing our own abstraction just meant writing boilerplate code over the glm ones, and that seemed like a waste of time since we don't plan on using another math library.\n\n## Serializer 2.0\n\nYou may notice that the serializer 1.0 *does nothing*. It only gives ensures common interface of T (to have a method called Serialize()).\n**Currently the object is responsibly for *how* it serializes itself, what we want is for the *serializer* to be responsible for that.**\n\nWhat we currently have:\n![Serializer 1.0](/images/Reflection-Serializer/serializer_before.png)\n\nBut what we really want is:\n![Serializer 2.0](/images/Reflection-Serializer/serialize-after.png)\n\nI'll now walk through a simplified version of my Serializer 2.0 and explain the thought process behind it. \n\nThere are 3 main ideas crucial to bringing the initial algorithm together.\n1) Deconstructing a user-defined data type\n2) Understanding how things should be on the JSON side\n3) Dealing with pointers, data structures, and containers\n\nAnd after that I had to modify the algorithm to work with RTTR library. Lets drive right in.\n\n### Deconstructing a user-defined data type\nEvery type in C++ can be deconstructed to its fundamental types of int, char, pointer, etc.\n\n```c++\nstruct InnerClass\n{\n    int data;\n    float floatdata;\n}\n\nstruct OuterClass\n{\n    InnerClass innerClass;\n    const char * c_string;\n}\n////////////////////////////////////\n// Outerclass can be deconstructed into\nOuterClass\n{\n    int data;\n    float floatdata;\n    const char* c_string;\n}\n```\n\nSo the plan is to deconstruct a type *as much as possible*. Hence the general algorithm I used is\n\n```py\n# version 1\ndef Serialize(obj):\n    if obj is a basic type\n        serialize data as one of the basic types\n    else\n        for each property on obj:\n            Serialize(property)\n```\n\nSeems simple for now! Notice that I passed over what it means to be a basic type. While we understand in C++ those data types, what are the fundamental basic types in JSON? \n\n### Examining the JSON side\nJson has five data types\n\n1) Number\n   - No distinction between floats and ints and unsigned etc\n2) String\n3) Boolean\n4) Array\n5) Object\n   - Collection of name-value pairs\n6) null\n   - empty\n\nGiven these data types, it makes sense to store C++ user defined types as objects, and they would in turn recursively store things until its either \n\n1. A number\n2. A string\n3. A boolean\n4. Or an array\n\nI used the property name as the key, and the object itself as the value. This seemed most intuitive. You might notice that 'A number' doesn't describe the wide range of data types that can represent a number in C++. Thankfully, most JSON libraries can handle this. Thus when serialized OuterClass would look like \n\n```json\n{\n    \"OuterClass\" : {\n        \"innerClass\" : {\n            \"data\" : 0,\n            \"floatdata\": 0.0\n        },\n        \"c_string\" : \"cstring\"\n    }\n}\n```\n\n\n\n> Learning Point: One of the goals were to have the designer change the data from the json file. Thus I wanted the json file to be \"human readable\". This in turn led to some very poor choices like serializing Vec3 as an array of 3 floats etc. These edge cases piled up instantly and made my deseriailization work a mess. If I were to do this again I would just try to write the base code as intuitively (for a programmer) as possible, and then write a tool to modify  the json file.\n\n\nTake note that this was the *final* output that I have decided on. During the course of developement, there were three different outputs that I tried, and I finally settled on keeping the algorithm clean instead.\n\n```py\n# Version 2\n# Kickoff function\ndef Serialize(obj, name):\n    JSON jsonObj\n    SerializeRecur(obj, jsonObj[name])\n    return jsonObj\n\n# Arg0: object we want to serialize\n# Arg1: json object to add onto\ndef SerializeRecur(obj, jsonObj):\n    if obj is a basic type\n        SerializeBasicType(obj, jsonObj[obj.name()])\n    else\n        for each property on obj:\n            SerializeRecur(property, jsonObj[property.name()])\n\n// Possible usage\nOuterclass outerClass\nSerialize(outerClass, \"OuterClass\") \n```\n>The mentioned three different versions of output became a long lasting pain. I could never easily refactor my code without totally busting the previous versions. In hindsight, I should have gotten rid of them ASAP and swapped to the newer versions. Also, I should have given my Json files a version number to keep track of which version of the loader I was using. That way I could have kept my code clean instead of integrating them all into Frankenstien. \n\n### Dealing with C++'ness' issues\nI've explained the very high level general algorithm of deconstructing a C++ type into its base type, and how I translated that into JSON file. When it comes to the dirt though, there are lots of weird C++ issues to deal with, and I'm glad I used RTTR as a library instead of writing my own reflection system to deal with them.\n\nThis part really consists of deconstructing what it means to be a *fundamental type in the context of serialization*. \n\n#### Dealing with polymorphism\nHeres an example of some very reasonable code that would break our current algorithm.\n\n```c++\nstruct Base { RTTR_ENABLE() };\nstruct Middle : Base { RTTR_ENABLE(Base) };\nstruct Derived : Middle { RTTR_ENABLE(Middle) };\n\nstruct Foo { Base* bar = nullptr;};\n\nFoo foo;\nDerived derived;\n\nfoo.bar = &derived;\n// How do we serialize Derived when we have a pointer to Bar?\n```\nPolymorphism! And pointers! Pointers are a base data type, how do we deal with it? On the topic of pointers, what if it was a *shared* pointer? \n\n```c++\nstruct Foo {std::shared_ptr<Derived> ptr;}\n\nFoo foo;\nstd::shared_ptr<Derived> instance = std::make_shared<Derived>();\nfoo.ptr = instance;\n// How do we deal with this??\n```\n> At the start of the project, we were avoiding shared pointers because we were not doing multithreading and did not think we would need to manage our objects. This turns out to be completely false assumption when we realized our game code had behavior that references other behaviors. This caching became a classic dangling pointer problem. We only noticed this problem a quater of the way through the project, and decided to convert to smart pointers rather then deal with implementing some sort wrapper that acheived the same thing but specific to our engine. There was also a discussion about getting all the references every frame, but that was thrown out once we realized some behaviors *needed* references, like AIs need to know player and the search isn't cheap.\n\nSo lets revisit our high level algorithm, and modify it. We need to deal with getting, as RTTR defines it, the *raw type* of our object. A raw type is a type *without any qualifiers* (const, volatile, etc) nor any pointer.\nAfter that, we need to detect if it is a shared_ptr, or something that wraps a value. Luckily, RTTR provides [functionality](https://www.rttr.org/doc/master/classrttr_1_1type.html#ad17345a59c8e3cc8a754eb4ec124581e) that detects if a type is a wrapper type. \n\nAs for getting the derived type of a pointer, RTTR deals with that for us with [get_derived_type()](https://www.rttr.org/doc/master/classrttr_1_1instance.html#ab30381b954f8d8abc2da9c5162fb130d).\n\nI'll also swap the pseudocode for checking base type for an rttr function [is_class()](https://www.rttr.org/doc/master/classrttr_1_1type.html#a8bd100682c9b846f6da1c5c9fb96f8c6).\n\n```py\n# Version 3\n# Here I'm working in psuedo code with RTTR API\n\n# Kickstart function\ndef Serialize(obj, name):\n    JSON jsonObj\n    SerializeRecur(obj, jsonObj[name])\n    return jsonObj\n\n# Arg0: object we want to serialize\n# Arg1: json object to add onto\ndef SerializeRecur(obj, jsonObj):\n    # If object is a fundemental C++ type, we'll go straight to writing it\n    if not obj.is_class()\n        SerializeBasic(obj, jsonObj)\n\n    else\n        # Get the type of the object if it is a wrapper\n        if obj.type.get_raw_type().is_wrapper()\n            localObj = obj.get_wrapped_instance()\n        else\n            localObj = obj\n\n        # Deal with pointer issues by going to the derived class\n        derivedType = localObj.get_derived_type()\n        # Get property list from the derived type\n        var property_list = derivedType.get_properties()\n\n        # Iterate through the property list\n        for var property in property_list\n            # Get the value of the property\n            rttr::variant property_value = property.get_value(localObj)\n            # Keep serializing them based on property name\n            SerializeRecur(property_value, jsonObj[property.name()])\n\n\n// Possible usage\nOuterclass outerClass\nSerialize(outerClass, \"OuterClass\") \n```\n\n### Dealing with arrays and data structures\nSome very useful data structures that we want to serialize are arrays, vectors, and C++ maps (ordered or unordered). Thankfully they have pretty 1 : 1 conversions to JSON data.\n- C++ Arrays <-> JSON Arrays\n- C++ Vectors <-> JSON Arrays\n- C++ Maps <-> JSON Objects\n\nEven better, RTTR has two methods of identifying containers that cover your STL data containers. [is_associative_container()](https://www.rttr.org/doc/master/classrttr_1_1variant.html#aabe380968e1d9fcd27a2f3e77728b197) and [is_sequential_container()](https://www.rttr.org/doc/master/classrttr_1_1variant.html#a2d584cf950f15d1a52469b5f042488a3). [Associative containers](https://en.wikipedia.org/wiki/Associative_containers) are like maps, you map one thing to another. [Sequential containers](https://en.wikipedia.org/wiki/Sequence_container_(C%2B%2B)) are containers with memories laid out contigiously, like vectors and arrays. According to wikipedia, the current C++ data structures are below.\n- Sequential Container\n  - Array\n  - Vector\n  - List\n  - Forward_list\n  - Deque\n- Associative Container\n  - Set\n  - Map\n  - Multiset\n  - Multismap\n  \nAnd so we will have\n\n\n- C++ Array <-> Sequential Container <-> JSON Array\n- C++ Vector <-> Sequential Container <-> JSON Array\n- C++ Maps <-> Associative Container <-> JSON Objects\n- C++ Hash Maps (Unordered_*) <-> Associative Container <-> JSON Objects\n\nWhich simplifies to\n- Sequential Container <-> JSON Array\n- Associative Container <-> JSON Objects\n\nSo we will identify if the type of the object is sequential or associative, and if they are we will handle them.\n```py\n# Version 4\n# Here I'm working in psuedo code with RTTR API\n\n# Kickstart function\ndef Serialize(obj, name):\n    JSON jsonObj\n    Serialize(obj, jsonObj[name])\n    return jsonObj\n\n# Arg0: object we want to serialize\n# Arg1: json object to add onto\ndef SerializeRecur(obj, jsonObj):\n    # If object is a fundemental C++ type, we'll go straight to writing it\n    if not obj.is_class()\n        SerializeBasic(obj, jsonObj)\n    else if obj.is_associative_container()\n        SerializeAssociativeContainer(obj, jsonObj)\n    else if obj.is_sequential_container()\n        SerializeSequentialContainer(obj, jsonObj)\n    else\n        # Get the type of the object if it is a wrapper\n        if obj.type.get_raw_type().is_wrapper()\n            localObj = obj.get_wrapped_instance()\n        else\n            localObj = obj\n\n        # Deal with pointer issues by going to the derived class\n        derivedType = localObj.get_derived_type()\n        # Get property list from the derived type\n        var property_list = derivedType.get_properties()\n\n        # Iterate through the property list\n        for var property in property_list\n            # Get the value of the property\n            rttr::variant property_value = property.get_value(localObj)\n            # Keep serializing them based on property name\n            SerializeRecur(property_value, jsonObj[property.name()])\n\n\n// Possible usage\nOuterclass outerClass\nSerialize(outerClass, \"OuterClass\") \n```\n#### Sequential Container Seriailization \nAfter detecting whether it is an associative or a sequential container, we have to decide how to serialize it. We'll start with sequential since thats the simplest. Since sequential maps to Json arrays 1 to 1, this was pretty simple.\n\n```py\ndef WriteArray(obj, jsonObj):\n    jsonObj.WriteJsonArray()\n\n    for each item in obj, and counter start from 0:\n        WriteVariant(item, writer[counter])\n        counter += 1\n```\n\n```json\n{\n    \"array\" : [\n        a,\n        b,\n        c\n    ],\n}\n```\n#### Associative Container\nThis one is a *bit* more complicated. We want to store both key and value, and we know our object will have multiple key and value. So lets use a json array to indicate all the key-pair values as json objects. \n\n```py\ndef WriteAssociative(obj, jsonObj):\n    jsonObj.WriteJsonArray()\n\n    for each item in obj, and counter start from 0:\n        WriteVariant(item.first, writer[i][\"Key\"])\n        WriteVariant(item.second, writer[i][\"Value\"])\n```\nand we're expecting something like this.\n```json\n    \"dictionary\" : [\n        {\n            \"key\": \"red\",\n            \"value\": {\n                \"x\": 5,\n                \"y\": 6\n            }\n        },\n        {\n            \"key\": \"green\",\n            \"value\": {\n                \"x\": 1,\n                \"y\": 2\n            }\n        },\n    ]\n```\n\n\n### Wrangling RTTR\nIt was hard working with a library where I had no idea how it internally works. Let me explain some of the main concepts of RTTR that I had trouble understanding at first. This section will detail mainly how I coded the above psuedocodes in a C++ manner.\n\n- [Instance](https://www.rttr.org/doc/master/classrttr_1_1instance.html)\n  - Holds a reference to the given object.\n  - Think of it as a std::any<T&>\n- [Variant](https://www.rttr.org/doc/master/register_variant_page.html)\n  - Return value for properties and methods\n  - Content is ***copied*** over to new instance of content\n  - Think of it as a std::any<T>\n- [Properties](https://www.rttr.org/doc/master/register_properties_page.html)\n  - Pretty straight forward\n- [Policies](https://www.rttr.org/doc/master/register_policies_page.html)\n  - Control how RTTR creates your object\n  - This matters when the code starts running too slow\n  \n> One of the weirder things about the RTTR library is how *different* and how *little* an instance provides over a variant. I would expect an instance to have just as much to offer as a variant in terms of interface. It seems strange that I would need to copy an object anytime I wanted to query more information on it.\n\n> Also this sets a constraint that you need to use assignment operators for whatever you're serializing. And default constructors for compatibility with sequential and associative containers.\n\nWith those in mind, lets get to writing actual C++ code and we'll start with registering our class with RTTR\n#### Registration\nThis part is pretty straightforward, do it in the CPP with a couple of macros from RTTR. Here, we register InnerClass with properties innerClass and c_string. After that we register InnerClass with data and floatdata.\n```c++\nRTTR_REGISTRATION\n{\n\tusing namespace rttr;\n\tregistration::class_<InnerClass>(\"InnerClass\")\n\t\t.constructor<>()\n\t\t(\n\t\t\trttr::policy::ctor::as_raw_ptr // Construct as raw pointer instead of shared for simplicity's sake\n\t\t)\n\t\t.property(\"data\", &InnerClass::data)\n\t\t.property(\"floatdata\", &InnerClass::floatdata)\n\t;\n\n    registration::class_<OuterClass>(\"OuterClass\")\n\t\t.constructor<>()\n\t\t(\n\t\t\trttr::policy::ctor::as_raw_ptr // Construct as raw pointer instead of shared for simplicity's sake\n\t\t)\n\t\t.property(\"innerClass\", &OuterClass::innerClass)\n\t\t.property(\"c_string\", &OuterClass::c_string)\n\t;\n}\n\n```\n#### Writing the serialization code\nLets begin by taking in a name and a instance (reference) of the object.\n\n```c++\n// Kickstart function\nJSON ToJson(rttr::instance obj, const std::string& name)\n{\n    JSON writer;\n    ToJSonRecur(obj, writer[name]);\n    return writer;\n}\n```\n\n##### Improvements to fundemental type detection\nI was stuck here for a long time figuring out how wrangle the conversions between instances and variants and serialization. In the end, I implemented a function dedicated to writing variants, and then another function for writing basic types. Both of these work with a \"white list\"; that is if the function detects it cannot be serialized and return false.\n\n\n\nLets take a look at the recursive function from before.\n```c++\n// !Passing something that isn't supposed to be written as a Json Object will have issues\nvoid ToJsonRecur(rttr::instance obj, JSON& writer)\n{\n    if(WriteFundamentalType(obj, writer))\n    rttr::instance localObj;\n    // Get the type of the object if it is a wrapper\n    if(obj.get_type().get_raw_type().is_wrapper())\n        localObj = obj.get_wrapped_instance();\n    else\n        localObj = obj;\n\n    // Get the property list while dealing with polymorphism derived type\n    auto prop_list = obj.get_derived_type().get_properties();\n    \n    // Iterate through the property list\n    for (auto prop : prop_list)\n    {\n        // Get the value of the property\n        rttr::variant prop_value = prop.get_value(obj);\n        if (!prop_value)\n            continue; // cannot serialize, because we cannot retrieve the value\n        // Get the name of the property\n        const auto name = prop.get_name();\n        // Attempt to write the variant\n        if (!VariantSerializer(prop_value, writer[name.data()]))\n        {\n            std::cerr << \"cannot serialize property: \" << name << std::endl;\n        }\n    }\n}\n\n// Example use case\nOuterClass foo;\nJSON writer;\nToJsonRecur(foo, \"foo\", writer);\n```\nThe biggest difference is the use of rttr::instance as the object. This was chosen for the simple interface given. For some weird reason I **could not** convert an instance to a variant. It might make more sense to pass in a variant in that sense since variants have more functionality, but its also a copy which can be expensive. \n\nThis choice removed the possibility of checking whether the instance is a fundamental type, and all the checking for the the maps before we split it up. This actually helped writing the code in a certain way because I could seperate the code more clearly from an RTTR perspective.\n\nA second issue that came up was how to abstract the fundamental type seriailization detection out. In the end, I opted for a function that will attempt to serialize the object as a fundamental type, and if it fails it will return false. We will then test if it is any of the data containers, and then check how many properties the object has. If there it has  properties, then we can serialize it as a jsonObj.\n\nSo the plan is to deal with each RTTR abstraction at each level appropriately.\n![The new plan](/images/Reflection-Serializer/serialize_new_plan.png)\n\nAnd a fleshed out detail of the plan is on this image.   \n\n![The new plan with detail](/images/Reflection-Serializer/serialize_detail.png)\n\nWith the new algorithm, WriteVariant() is the crux of it all. It attempts to write the object, and if it can't have several fallbacks, and at the end of it will either return true or fail. Failing means a case we haven't dealt with yet(pointers for example).\n\nAnother side-effect of this version of the algorithm is that we can only kick off the serialization function if the object we're passing in has properties. Meaning the type has to be a jsonObj. However, we can easily use WriteVariant() as the entry point if required.\n\n> Learning Point: Typically, serialization code is paired with deserialization code. Hence the simpler your serialization code, the easier it will be to write your deserialization. For my engine code, I did my own serialization of many glm types, like glm::vec3, early on and this came back to haunt me as I had to keep creating edge cases for detecting a glm::vec3 in my deserialization code. Keep it simple, less things to worry about when writing deserialization.\n\n#### C++ code\nHeaded back to the code, lets show the changed toJsonRecur().\n\n```c++\nvoid toJsonRecursive(const instance& obj, json& writer)\n{\n    // Dealing with wrapped objects\n    instance localObj;\n    if(obj.get_type().get_raw_type().is_wrapper())\n        localObj = obj.get_wrapped_instance()\n    else\n        localObj = obj;\n    // Handling pointer polymorphism cases\n    auto prop_list = obj2.get_derived_type().get_properties();\n    for (auto prop : prop_list)\n    {\n        // Retrieving value from property\n        variant prop_value = prop.get_value(obj2);\n        if (!prop_value)\n            continue; // cannot serialize, because we cannot retrieve the value\n        // Retrieve name of property\n        const auto name = prop.get_name();\n        // Serialize value of property using name\n        if (!WriteVariant(prop_value, writer[name.data()]))\n        {\n            std::cerr << \"Failed to serialize\" << name << std::endl;\n        }\n    }\n}\n```\n\nPretty much the same thing as the initial algorithm, except without all the checking. The checking has now moved to WriteVariant(), and here is the crux of the algorithm.\n\n```c++\nbool WriteVariant(const variant& var, json& writer)\n{\n    // Deal with wrapped type\n    variant localVar = var;\n    type varType = var.get_type();\n    if(varType.is_wrapper())\n    {\n        varType = varType.get_wrapped_type();\n        localVar = localVar.extract_wrapped_value();\n    }\n\n    if (AttemptWriteFundementalType(varType, localVar, writer))\n    {\n        // Successful write!\n    }\n    // If its not a fundamental, is it a sequential?\n    else if (var.is_sequential_container())\n    {\n        WriteArray(var.create_sequential_view(), writer);\n    }\n    // Is it associative\n    else if (var.is_associative_container())\n    {\n        WriteAssociativeContainer(var.create_associative_view(), writer);\n    }\n    else\n    {\n        // Not a fundemental, or a container. Check if its an object\n        auto child_props = varType.get_properties();\n        if (!child_props.empty())\n        {\n            // We have properties, thus we can be serialized as an object\n            toJsonRecursive(var, writer);\n        }\n        else\n        {\n            // Assert\n            // Some unknown type that is not a fundamental, has no properties, and is not a data structure\n            // Probably some registration issue\n            // Or its a pointer! I handled pointers in here my game code\n            assert(\"Unknown RTTR serilization edge case that we haven't discovered\");\n            return false;\n        }\n    }\n\n    return true;\n}\n```\nI moved the data container checking and writing of fundamental types here. Pretty self-explanatory stuff here. The only thing really worth mentioning is that I had to create a *_container view to view the container for WriteArray() and WriteAssociativeContainer().\n\nNow lets take a look at the writing of fundamental types. One benefit here is that if we have more fundamental types to handle we can just put it in this function.\n\n```c++\nbool AttemptWriteFundementalType(const type& t, const variant& var, json& writer)\n{\n    // Json Number\n    if (t.is_arithmetic())\n    {\n        if (t == type::get<bool>())\n            writer = var.to_bool();\n        else if (t == type::get<char>())\n            writer = var.to_bool();\n        else if (t == type::get<int>())\n            writer = var.to_int();\n        else if (t == type::get<uint64_t>())\n            writer = var.to_uint64();\n        else if (t == type::get<float>())\n            writer = var.to_double();\n        else if (t == type::get<double>())\n            writer = var.to_double();\n        return true;\n    }\n    // Enumeration as string\n    else if (t.is_enumeration())\n    {\n        bool ok = false;\n        // Attempt to serialize as string\n        auto result = var.to_string(&ok);\n        if (ok)\n        {\n            writer = var.to_string();\n        }\n        else\n        {\n            // Attempt to serialize as number\n            auto value = var.to_uint64(&ok);\n            if (ok)\n                writer = uint64_t(value);\n            else\n                writer = nullptr;\n        }\n\n        return true;\n    }\n    // Strings!\n    else if (t == type::get<std::string>())\n    {\n        writer = var.to_string();\n        return true;\n    }\n\n    // Not a fundamental type we know how to process\n    return false;\n}\n```\nNotice that this function doesn't expect itself to handle all sorts of weird stuff like pointers, wrappers, or anything like that. Its very much a **\"If you have these I will serialize it. If not then good bye.\"**\n\nAs for the associative and sequential containers:\n```c++\nstatic void WriteArray(const variant_sequential_view& view, json& writer)\n{\n    // Init array\n    writer = json::array();\n    int i = 0;\n    for (const auto& item : view)\n    {\n        WriteVariant(item, writer[i]);\n        i++;\n    }\n}\n\nstatic void WriteAssociativeContainer(const variant_associative_view& view, json& writer)\n{\n    static const string_view key_name(\"key\");\n    static const string_view value_name(\"value\");\n\n    writer = json::array();\n    int i = 0;\n    // Dealing with keys = values containers like sets\n    if (view.is_key_only_type())\n    {\n        for (auto& item : view)\n        {\n            WriteVariant(item.first, writer[i]);\n            i++;\n        }\n    }\n    else\n    {\n        for (auto& item : view)\n        {\n            WriteVariant(item.first, writer[i][key_name.data()]);\n            WriteVariant(item.second, writer[i][value_name.data()]);\n            i++;\n        }\n    }\n}\n```\n\n# Conclusion\nYou usually have to pair a serialization function with a deserialization function, but with this the base is setup such that it'll be easier to do deserialization. If I have time, I'll talk about how to deserialize from the json file to memory; its not particularly hard now that we have a good base setup.\n\nI hope this helps description will help someone in the future doing something similar and avoid the pains I had to trod through.\n\n\nWith that this is the end of this small write up. I did not come up with the entire thing myself; I had to do quite a lot of research and looking up and seeing other people's code before coming to this solution. RTTR has its own example of how to do json serialization, and it was from their code that I solved the issues with instances and variants. \n\n[Here](https://github.com/ShumWengSang/Reflection-Json-Serializer) is the Github link to the source code used for examples here.","slug":"reflection-serializer","published":1,"updated":"2021-10-18T07:56:21.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuwd64z1000o0bqu8f3qaoje","content":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n<h2 id=\"About-the-Author\"><a href=\"#About-the-Author\" class=\"headerlink\" title=\"About the Author\"></a>About the Author</h2><p>Roland Shum: Engine Developer</p>\n<p>I am a Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.</p>\n<p><a href=\"https://store.steampowered.com/search/?developer=Handshake%20Firm\">Here</a> are some games I have worked on and published:</p>\n<p><img src=\"/images/TerrainGeneration/ArcApellago.jpg\" alt=\"ArcApellago\"><br><img src=\"/images/TerrainGeneration/DeltaBlade2700.jpg\" alt=\"DeltaBlade2700\"></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Arc Apellago was a year-long game project that I worked together with several members of the team. Its an action platformer with a focus on dash-attack and jumping around to get to the end of the level. We developed a C++ custom engine from scatch, integrating our own libraries and then using that engine to develop the game.</p>\n<p>Parts of the engine I worked on</p>\n<ul>\n<li>Integration of <a href=\"https://www.rttr.org/\">Real Time Type Reflection (RTTR)</a></li>\n<li><strong><a href=\"https://github.com/nlohmann/json\">JSON</a> serialization using RTTR</strong></li>\n<li><a href=\"https://github.com/ocornut/imgui\">ImGui</a> Engine GUI generation using RTTR</li>\n<li>Designing archetypes for entities</li>\n</ul>\n<p>In addition, I worked on the game as well</p>\n<ul>\n<li>Visual effects</li>\n<li>Post processing effects</li>\n<li>Player feedback</li>\n</ul>\n<p>And things outside of the engine</p>\n<ul>\n<li>Configuring a student Azure VM to build our game on every push<ul>\n<li>CI / CD</li>\n</ul>\n</li>\n<li>Configuring a student Amazon Web Service (AWS) VM to automatically sync the school’s git repo to our internal private git server</li>\n<li>Tracked and scoped technical tasks as part of co-producer work and making sure everyone’s workflow was smooth</li>\n</ul>\n<p>Today I’ll be talking about what I used RTTR for in the game engine; mainly for integrating <strong>JSON serialization</strong>. I will be describing a simplified version of what I did and omitting long talks into the many mistakes I’ve made; I’ll only point out my mistakes from time to time. <strong>I hope this will be useful for people trying to thread on the same path I did.</strong> </p>\n<h2 id=\"What-are-you-talking-about\"><a href=\"#What-are-you-talking-about\" class=\"headerlink\" title=\"What are you talking about?\"></a>What are you talking about?</h2><p>So essentially what I did was</p>\n<ol>\n<li>Integrate reflection library (RTTR)</li>\n<li>Integrate JSON reading and writing data</li>\n<li><strong>For serialization</strong><ul>\n<li><strong>Use reflection to generate the JSON object</strong></li>\n<li><strong>Use JSON object and JSON library to write to file</strong></li>\n</ul>\n</li>\n<li>For deserialization<ul>\n<li>Read JSON from file to read JSON object</li>\n<li>Use JSON object to read achetypes</li>\n</ul>\n</li>\n<li>Use reflection data to generate editor GUIs for modifying values at runtime</li>\n</ol>\n<p>This blog will be focused on json serialization with reflection.</p>\n<h3 id=\"What-is-reflection\"><a href=\"#What-is-reflection\" class=\"headerlink\" title=\"What is reflection\"></a>What is reflection</h3><p>Reflection is the ability to inspect, modify, and call methods at runtime. Imagine being able to inspect your type of object, and getting information about it.</p>\n<p><img src=\"/images/Reflection-Serializer/CPPStruct.png\" alt=\"MyStruct\"></p>\n<p>Essentially, you can get a MyStructType that describes “Hey I have a string name, an int data, a float bigNumber, and two methods. My name is ‘MyStruct’”.</p>\n<h3 id=\"Why-did-you-need-reflection\"><a href=\"#Why-did-you-need-reflection\" class=\"headerlink\" title=\"Why did you need reflection?\"></a>Why did you need reflection?</h3><p>So my team and I were thinking about serialization, and we realized we did not have much experience with it. </p>\n<p>My goals for the serialization system</p>\n<ul>\n<li>Be able to serialize any type of object to json with a common interface</li>\n<li>Read archetypes from json files</li>\n<li>Programmers do not need to write serialization code<ul>\n<li>Fully abstracted and written for them, unless specified</li>\n<li><strong>This will save up to 1/3 of the time writing a script!</strong></li>\n</ul>\n</li>\n</ul>\n<p>In order to achieve the last goal, the only realistic way I could think of was to use a reflection system. I can iterate through an objects properties (picture above) and turn it into JSON something below.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;MyStruct&quot;</span> : &#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span> : <span class=\"string\">&quot;Instance Name&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;data&quot;</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;bigNumber&quot;</span> : <span class=\"number\">2.0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Goals-and-Constraints\"><a href=\"#Goals-and-Constraints\" class=\"headerlink\" title=\"Goals and Constraints\"></a>Goals and Constraints</h1><p>For the serializer to function, I constructed the system with several things in mind.</p>\n<ul>\n<li>Entity archetype saving and loading to Json</li>\n<li>Abstracted from gameplay programmers<ul>\n<li>Scripts don’t have to care about serializing</li>\n</ul>\n</li>\n<li>Json file is readable to humans<ul>\n<li>Designer can modify from json file</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Learning point:<br>The above seems good right? This was actually a <strong>bad</strong> set of goals. One major thing I overlooked was <strong>saving and loading from a scene</strong>. I also screwed up thinking that the <strong>designer modifying from the json file</strong> is a good thing. You want a tool for that instead.</p>\n</blockquote>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><p>I started working on the json integration first as I wanted to fullfill the Course’s requirement on serialization first, and then do the reflection and GUI as an add on.</p>\n<blockquote>\n<p>Learning point: In hindsight, while in the short term this was the right decision,the long term was a bad one. Anyone can see once laid out that I should have worked with RTTR first, and then wrote the serializer and gui generator with it as a dependancy. Because of this mistake, I was straddled with legacy code that I had to write around.</p>\n</blockquote>\n<h2 id=\"Serializer-1-0\"><a href=\"#Serializer-1-0\" class=\"headerlink\" title=\"Serializer 1.0\"></a>Serializer 1.0</h2><p>The following is the diagram describing the serializer.</p>\n<p><img src=\"/images/Reflection-Serializer/serializermap.png\" alt=\"Mind map of serializer\"></p>\n<p>At 1.0, the goal was to get serialization working ASAP and getting past the grading requirments for it. I used the simplest method I know.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sample object</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Vector3</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> x, y, z;</span><br><span class=\"line\">    <span class=\"function\">JSON <span class=\"title\">Serialize</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        JSON j;</span><br><span class=\"line\">        j[<span class=\"string\">&quot;x&quot;</span>] = x;</span><br><span class=\"line\">        j[<span class=\"string\">&quot;y&quot;</span>] = y;</span><br><span class=\"line\">        j[<span class=\"string\">&quot;z&quot;</span>] = z;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Vector3 <span class=\"title\">Deserialize</span><span class=\"params\">(JSON&amp; json)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Vector3 vec;</span><br><span class=\"line\">        vec.x = json[<span class=\"string\">&quot;x&quot;</span>];</span><br><span class=\"line\">        vec.y = json[<span class=\"string\">&quot;y&quot;</span>];</span><br><span class=\"line\">        vec.z = json[<span class=\"string\">&quot;z&quot;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Serializer</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">    <span class=\"function\">JSON <span class=\"title\">SerializeToJSON</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; obj)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.Serialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">DeserializeFromJSON</span><span class=\"params\">(JSON&amp; json)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> T::Deserialize(json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// somewhere in code</span></span><br><span class=\"line\">Vector3 dir = &#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">JSON j = Serializer::SerializeToJSON(dir);</span><br><span class=\"line\">save_to_file(j, <span class=\"string\">&quot;dir.json&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>There were mainly two ways I saw to go with this</p>\n<ol>\n<li>Use a template like what I am doing and call Serialize(). If T doesn’t have this method compilation will fail.</li>\n<li>All types inherit ISerializble, and then use polymorphism.</li>\n</ol>\n<p>I went with option 1) because we were using glm::vec3 types and did not want to write an abstraction layer over them. Virtual functions also cause a cache miss, so I didn’t want to lose out on performance.</p>\n<blockquote>\n<p>Learning Point: The cache miss point was totally irrelevant. It would never have mattered since the perf I saved was so small. Furthermore, a bunch of these small code and legacy Json files became a massive headache later on development when I refused to just delete them. I should have called a team meeting and insist on removing the legacy code and data instead of putting two different architechture types together</p>\n</blockquote>\n<blockquote>\n<p>Pondering Point: Should I have written an abstraction over glm (math library)? Common practice lean towards writing abstractions over every library you import, but a lot of glm functions only work because they expect glm functions. Writing our own abstraction just meant writing boilerplate code over the glm ones, and that seemed like a waste of time since we don’t plan on using another math library.</p>\n</blockquote>\n<h2 id=\"Serializer-2-0\"><a href=\"#Serializer-2-0\" class=\"headerlink\" title=\"Serializer 2.0\"></a>Serializer 2.0</h2><p>You may notice that the serializer 1.0 <em>does nothing</em>. It only gives ensures common interface of T (to have a method called Serialize()).<br><strong>Currently the object is responsibly for <em>how</em> it serializes itself, what we want is for the <em>serializer</em> to be responsible for that.</strong></p>\n<p>What we currently have:<br><img src=\"/images/Reflection-Serializer/serializer_before.png\" alt=\"Serializer 1.0\"></p>\n<p>But what we really want is:<br><img src=\"/images/Reflection-Serializer/serialize-after.png\" alt=\"Serializer 2.0\"></p>\n<p>I’ll now walk through a simplified version of my Serializer 2.0 and explain the thought process behind it. </p>\n<p>There are 3 main ideas crucial to bringing the initial algorithm together.</p>\n<ol>\n<li>Deconstructing a user-defined data type</li>\n<li>Understanding how things should be on the JSON side</li>\n<li>Dealing with pointers, data structures, and containers</li>\n</ol>\n<p>And after that I had to modify the algorithm to work with RTTR library. Lets drive right in.</p>\n<h3 id=\"Deconstructing-a-user-defined-data-type\"><a href=\"#Deconstructing-a-user-defined-data-type\" class=\"headerlink\" title=\"Deconstructing a user-defined data type\"></a>Deconstructing a user-defined data type</h3><p>Every type in C++ can be deconstructed to its fundamental types of int, char, pointer, etc.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InnerClass</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> floatdata;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">OuterClass</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    InnerClass innerClass;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * c_string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">// Outerclass can be deconstructed into</span></span><br><span class=\"line\">OuterClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> floatdata;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* c_string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>So the plan is to deconstruct a type <em>as much as possible</em>. Hence the general algorithm I used is</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># version 1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Serialize</span>(<span class=\"params\">obj</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> obj <span class=\"keyword\">is</span> a basic type</span><br><span class=\"line\">        serialize data <span class=\"keyword\">as</span> one of the basic types</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> each property on obj:</span><br><span class=\"line\">            Serialize(property)</span><br></pre></td></tr></table></figure>\n\n<p>Seems simple for now! Notice that I passed over what it means to be a basic type. While we understand in C++ those data types, what are the fundamental basic types in JSON? </p>\n<h3 id=\"Examining-the-JSON-side\"><a href=\"#Examining-the-JSON-side\" class=\"headerlink\" title=\"Examining the JSON side\"></a>Examining the JSON side</h3><p>Json has five data types</p>\n<ol>\n<li>Number<ul>\n<li>No distinction between floats and ints and unsigned etc</li>\n</ul>\n</li>\n<li>String</li>\n<li>Boolean</li>\n<li>Array</li>\n<li>Object<ul>\n<li>Collection of name-value pairs</li>\n</ul>\n</li>\n<li>null<ul>\n<li>empty</li>\n</ul>\n</li>\n</ol>\n<p>Given these data types, it makes sense to store C++ user defined types as objects, and they would in turn recursively store things until its either </p>\n<ol>\n<li>A number</li>\n<li>A string</li>\n<li>A boolean</li>\n<li>Or an array</li>\n</ol>\n<p>I used the property name as the key, and the object itself as the value. This seemed most intuitive. You might notice that ‘A number’ doesn’t describe the wide range of data types that can represent a number in C++. Thankfully, most JSON libraries can handle this. Thus when serialized OuterClass would look like </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;OuterClass&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;innerClass&quot;</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;data&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;floatdata&quot;</span>: <span class=\"number\">0.0</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;c_string&quot;</span> : <span class=\"string\">&quot;cstring&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>Learning Point: One of the goals were to have the designer change the data from the json file. Thus I wanted the json file to be “human readable”. This in turn led to some very poor choices like serializing Vec3 as an array of 3 floats etc. These edge cases piled up instantly and made my deseriailization work a mess. If I were to do this again I would just try to write the base code as intuitively (for a programmer) as possible, and then write a tool to modify  the json file.</p>\n</blockquote>\n<p>Take note that this was the <em>final</em> output that I have decided on. During the course of developement, there were three different outputs that I tried, and I finally settled on keeping the algorithm clean instead.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Version 2</span></span><br><span class=\"line\"><span class=\"comment\"># Kickoff function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Serialize</span>(<span class=\"params\">obj, name</span>):</span></span><br><span class=\"line\">    JSON jsonObj</span><br><span class=\"line\">    SerializeRecur(obj, jsonObj[name])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonObj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Arg0: object we want to serialize</span></span><br><span class=\"line\"><span class=\"comment\"># Arg1: json object to add onto</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">SerializeRecur</span>(<span class=\"params\">obj, jsonObj</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> obj <span class=\"keyword\">is</span> a basic type</span><br><span class=\"line\">        SerializeBasicType(obj, jsonObj[obj.name()])</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> each property on obj:</span><br><span class=\"line\">            SerializeRecur(property, jsonObj[property.name()])</span><br><span class=\"line\"></span><br><span class=\"line\">// Possible usage</span><br><span class=\"line\">Outerclass outerClass</span><br><span class=\"line\">Serialize(outerClass, <span class=\"string\">&quot;OuterClass&quot;</span>) </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>The mentioned three different versions of output became a long lasting pain. I could never easily refactor my code without totally busting the previous versions. In hindsight, I should have gotten rid of them ASAP and swapped to the newer versions. Also, I should have given my Json files a version number to keep track of which version of the loader I was using. That way I could have kept my code clean instead of integrating them all into Frankenstien. </p>\n</blockquote>\n<h3 id=\"Dealing-with-C-’ness’-issues\"><a href=\"#Dealing-with-C-’ness’-issues\" class=\"headerlink\" title=\"Dealing with C++’ness’ issues\"></a>Dealing with C++’ness’ issues</h3><p>I’ve explained the very high level general algorithm of deconstructing a C++ type into its base type, and how I translated that into JSON file. When it comes to the dirt though, there are lots of weird C++ issues to deal with, and I’m glad I used RTTR as a library instead of writing my own reflection system to deal with them.</p>\n<p>This part really consists of deconstructing what it means to be a <em>fundamental type in the context of serialization</em>. </p>\n<h4 id=\"Dealing-with-polymorphism\"><a href=\"#Dealing-with-polymorphism\" class=\"headerlink\" title=\"Dealing with polymorphism\"></a>Dealing with polymorphism</h4><p>Heres an example of some very reasonable code that would break our current algorithm.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Base</span> &#123;</span> RTTR_ENABLE() &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Middle</span> :</span> Base &#123; RTTR_ENABLE(Base) &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Derived</span> :</span> Middle &#123; RTTR_ENABLE(Middle) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Foo</span> &#123;</span> Base* bar = <span class=\"literal\">nullptr</span>;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo foo;</span><br><span class=\"line\">Derived derived;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.bar = &amp;derived;</span><br><span class=\"line\"><span class=\"comment\">// How do we serialize Derived when we have a pointer to Bar?</span></span><br></pre></td></tr></table></figure>\n<p>Polymorphism! And pointers! Pointers are a base data type, how do we deal with it? On the topic of pointers, what if it was a <em>shared</em> pointer? </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Foo</span> &#123;</span><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;Derived&gt; ptr;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo foo;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;Derived&gt; instance = <span class=\"built_in\">std</span>::make_shared&lt;Derived&gt;();</span><br><span class=\"line\">foo.ptr = instance;</span><br><span class=\"line\"><span class=\"comment\">// How do we deal with this??</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>At the start of the project, we were avoiding shared pointers because we were not doing multithreading and did not think we would need to manage our objects. This turns out to be completely false assumption when we realized our game code had behavior that references other behaviors. This caching became a classic dangling pointer problem. We only noticed this problem a quater of the way through the project, and decided to convert to smart pointers rather then deal with implementing some sort wrapper that acheived the same thing but specific to our engine. There was also a discussion about getting all the references every frame, but that was thrown out once we realized some behaviors <em>needed</em> references, like AIs need to know player and the search isn’t cheap.</p>\n</blockquote>\n<p>So lets revisit our high level algorithm, and modify it. We need to deal with getting, as RTTR defines it, the <em>raw type</em> of our object. A raw type is a type <em>without any qualifiers</em> (const, volatile, etc) nor any pointer.<br>After that, we need to detect if it is a shared_ptr, or something that wraps a value. Luckily, RTTR provides <a href=\"https://www.rttr.org/doc/master/classrttr_1_1type.html#ad17345a59c8e3cc8a754eb4ec124581e\">functionality</a> that detects if a type is a wrapper type. </p>\n<p>As for getting the derived type of a pointer, RTTR deals with that for us with <a href=\"https://www.rttr.org/doc/master/classrttr_1_1instance.html#ab30381b954f8d8abc2da9c5162fb130d\">get_derived_type()</a>.</p>\n<p>I’ll also swap the pseudocode for checking base type for an rttr function <a href=\"https://www.rttr.org/doc/master/classrttr_1_1type.html#a8bd100682c9b846f6da1c5c9fb96f8c6\">is_class()</a>.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Version 3</span></span><br><span class=\"line\"><span class=\"comment\"># Here I&#x27;m working in psuedo code with RTTR API</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kickstart function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Serialize</span>(<span class=\"params\">obj, name</span>):</span></span><br><span class=\"line\">    JSON jsonObj</span><br><span class=\"line\">    SerializeRecur(obj, jsonObj[name])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonObj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Arg0: object we want to serialize</span></span><br><span class=\"line\"><span class=\"comment\"># Arg1: json object to add onto</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">SerializeRecur</span>(<span class=\"params\">obj, jsonObj</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># If object is a fundemental C++ type, we&#x27;ll go straight to writing it</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> obj.is_class()</span><br><span class=\"line\">        SerializeBasic(obj, jsonObj)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\"># Get the type of the object if it is a wrapper</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> obj.type.get_raw_type().is_wrapper()</span><br><span class=\"line\">            localObj = obj.get_wrapped_instance()</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            localObj = obj</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Deal with pointer issues by going to the derived class</span></span><br><span class=\"line\">        derivedType = localObj.get_derived_type()</span><br><span class=\"line\">        <span class=\"comment\"># Get property list from the derived type</span></span><br><span class=\"line\">        var property_list = derivedType.get_properties()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Iterate through the property list</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> var property <span class=\"keyword\">in</span> property_list</span><br><span class=\"line\">            <span class=\"comment\"># Get the value of the property</span></span><br><span class=\"line\">            rttr::variant property_value = property.get_value(localObj)</span><br><span class=\"line\">            <span class=\"comment\"># Keep serializing them based on property name</span></span><br><span class=\"line\">            SerializeRecur(property_value, jsonObj[property.name()])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// Possible usage</span><br><span class=\"line\">Outerclass outerClass</span><br><span class=\"line\">Serialize(outerClass, <span class=\"string\">&quot;OuterClass&quot;</span>) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Dealing-with-arrays-and-data-structures\"><a href=\"#Dealing-with-arrays-and-data-structures\" class=\"headerlink\" title=\"Dealing with arrays and data structures\"></a>Dealing with arrays and data structures</h3><p>Some very useful data structures that we want to serialize are arrays, vectors, and C++ maps (ordered or unordered). Thankfully they have pretty 1 : 1 conversions to JSON data.</p>\n<ul>\n<li>C++ Arrays &lt;-&gt; JSON Arrays</li>\n<li>C++ Vectors &lt;-&gt; JSON Arrays</li>\n<li>C++ Maps &lt;-&gt; JSON Objects</li>\n</ul>\n<p>Even better, RTTR has two methods of identifying containers that cover your STL data containers. <a href=\"https://www.rttr.org/doc/master/classrttr_1_1variant.html#aabe380968e1d9fcd27a2f3e77728b197\">is_associative_container()</a> and <a href=\"https://www.rttr.org/doc/master/classrttr_1_1variant.html#a2d584cf950f15d1a52469b5f042488a3\">is_sequential_container()</a>. <a href=\"https://en.wikipedia.org/wiki/Associative_containers\">Associative containers</a> are like maps, you map one thing to another. <a href=\"https://en.wikipedia.org/wiki/Sequence_container_(C%2B%2B)\">Sequential containers</a> are containers with memories laid out contigiously, like vectors and arrays. According to wikipedia, the current C++ data structures are below.</p>\n<ul>\n<li>Sequential Container<ul>\n<li>Array</li>\n<li>Vector</li>\n<li>List</li>\n<li>Forward_list</li>\n<li>Deque</li>\n</ul>\n</li>\n<li>Associative Container<ul>\n<li>Set</li>\n<li>Map</li>\n<li>Multiset</li>\n<li>Multismap</li>\n</ul>\n</li>\n</ul>\n<p>And so we will have</p>\n<ul>\n<li>C++ Array &lt;-&gt; Sequential Container &lt;-&gt; JSON Array</li>\n<li>C++ Vector &lt;-&gt; Sequential Container &lt;-&gt; JSON Array</li>\n<li>C++ Maps &lt;-&gt; Associative Container &lt;-&gt; JSON Objects</li>\n<li>C++ Hash Maps (Unordered_*) &lt;-&gt; Associative Container &lt;-&gt; JSON Objects</li>\n</ul>\n<p>Which simplifies to</p>\n<ul>\n<li>Sequential Container &lt;-&gt; JSON Array</li>\n<li>Associative Container &lt;-&gt; JSON Objects</li>\n</ul>\n<p>So we will identify if the type of the object is sequential or associative, and if they are we will handle them.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Version 4</span></span><br><span class=\"line\"><span class=\"comment\"># Here I&#x27;m working in psuedo code with RTTR API</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kickstart function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Serialize</span>(<span class=\"params\">obj, name</span>):</span></span><br><span class=\"line\">    JSON jsonObj</span><br><span class=\"line\">    Serialize(obj, jsonObj[name])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonObj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Arg0: object we want to serialize</span></span><br><span class=\"line\"><span class=\"comment\"># Arg1: json object to add onto</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">SerializeRecur</span>(<span class=\"params\">obj, jsonObj</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># If object is a fundemental C++ type, we&#x27;ll go straight to writing it</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> obj.is_class()</span><br><span class=\"line\">        SerializeBasic(obj, jsonObj)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> obj.is_associative_container()</span><br><span class=\"line\">        SerializeAssociativeContainer(obj, jsonObj)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> obj.is_sequential_container()</span><br><span class=\"line\">        SerializeSequentialContainer(obj, jsonObj)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\"># Get the type of the object if it is a wrapper</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> obj.type.get_raw_type().is_wrapper()</span><br><span class=\"line\">            localObj = obj.get_wrapped_instance()</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            localObj = obj</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Deal with pointer issues by going to the derived class</span></span><br><span class=\"line\">        derivedType = localObj.get_derived_type()</span><br><span class=\"line\">        <span class=\"comment\"># Get property list from the derived type</span></span><br><span class=\"line\">        var property_list = derivedType.get_properties()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Iterate through the property list</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> var property <span class=\"keyword\">in</span> property_list</span><br><span class=\"line\">            <span class=\"comment\"># Get the value of the property</span></span><br><span class=\"line\">            rttr::variant property_value = property.get_value(localObj)</span><br><span class=\"line\">            <span class=\"comment\"># Keep serializing them based on property name</span></span><br><span class=\"line\">            SerializeRecur(property_value, jsonObj[property.name()])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// Possible usage</span><br><span class=\"line\">Outerclass outerClass</span><br><span class=\"line\">Serialize(outerClass, <span class=\"string\">&quot;OuterClass&quot;</span>) </span><br></pre></td></tr></table></figure>\n<h4 id=\"Sequential-Container-Seriailization\"><a href=\"#Sequential-Container-Seriailization\" class=\"headerlink\" title=\"Sequential Container Seriailization\"></a>Sequential Container Seriailization</h4><p>After detecting whether it is an associative or a sequential container, we have to decide how to serialize it. We’ll start with sequential since thats the simplest. Since sequential maps to Json arrays 1 to 1, this was pretty simple.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">WriteArray</span>(<span class=\"params\">obj, jsonObj</span>):</span></span><br><span class=\"line\">    jsonObj.WriteJsonArray()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> each item <span class=\"keyword\">in</span> obj, <span class=\"keyword\">and</span> counter start <span class=\"keyword\">from</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        WriteVariant(item, writer[counter])</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;array&quot;</span> : [</span><br><span class=\"line\">        a,</span><br><span class=\"line\">        b,</span><br><span class=\"line\">        c</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Associative-Container\"><a href=\"#Associative-Container\" class=\"headerlink\" title=\"Associative Container\"></a>Associative Container</h4><p>This one is a <em>bit</em> more complicated. We want to store both key and value, and we know our object will have multiple key and value. So lets use a json array to indicate all the key-pair values as json objects. </p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">WriteAssociative</span>(<span class=\"params\">obj, jsonObj</span>):</span></span><br><span class=\"line\">    jsonObj.WriteJsonArray()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> each item <span class=\"keyword\">in</span> obj, <span class=\"keyword\">and</span> counter start <span class=\"keyword\">from</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        WriteVariant(item.first, writer[i][<span class=\"string\">&quot;Key&quot;</span>])</span><br><span class=\"line\">        WriteVariant(item.second, writer[i][<span class=\"string\">&quot;Value&quot;</span>])</span><br></pre></td></tr></table></figure>\n<p>and we’re expecting something like this.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dictionary&quot; : [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;x&quot;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;y&quot;</span>: <span class=\"number\">6</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span>: <span class=\"string\">&quot;green&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;x&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;y&quot;</span>: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Wrangling-RTTR\"><a href=\"#Wrangling-RTTR\" class=\"headerlink\" title=\"Wrangling RTTR\"></a>Wrangling RTTR</h3><p>It was hard working with a library where I had no idea how it internally works. Let me explain some of the main concepts of RTTR that I had trouble understanding at first. This section will detail mainly how I coded the above psuedocodes in a C++ manner.</p>\n<ul>\n<li><a href=\"https://www.rttr.org/doc/master/classrttr_1_1instance.html\">Instance</a><ul>\n<li>Holds a reference to the given object.</li>\n<li>Think of it as a std::any&lt;T&amp;&gt;</li>\n</ul>\n</li>\n<li><a href=\"https://www.rttr.org/doc/master/register_variant_page.html\">Variant</a><ul>\n<li>Return value for properties and methods</li>\n<li>Content is <em><strong>copied</strong></em> over to new instance of content</li>\n<li>Think of it as a std::any<T></li>\n</ul>\n</li>\n<li><a href=\"https://www.rttr.org/doc/master/register_properties_page.html\">Properties</a><ul>\n<li>Pretty straight forward</li>\n</ul>\n</li>\n<li><a href=\"https://www.rttr.org/doc/master/register_policies_page.html\">Policies</a><ul>\n<li>Control how RTTR creates your object</li>\n<li>This matters when the code starts running too slow</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>One of the weirder things about the RTTR library is how <em>different</em> and how <em>little</em> an instance provides over a variant. I would expect an instance to have just as much to offer as a variant in terms of interface. It seems strange that I would need to copy an object anytime I wanted to query more information on it.</p>\n</blockquote>\n<blockquote>\n<p>Also this sets a constraint that you need to use assignment operators for whatever you’re serializing. And default constructors for compatibility with sequential and associative containers.</p>\n</blockquote>\n<p>With those in mind, lets get to writing actual C++ code and we’ll start with registering our class with RTTR</p>\n<h4 id=\"Registration\"><a href=\"#Registration\" class=\"headerlink\" title=\"Registration\"></a>Registration</h4><p>This part is pretty straightforward, do it in the CPP with a couple of macros from RTTR. Here, we register InnerClass with properties innerClass and c_string. After that we register InnerClass with data and floatdata.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RTTR_REGISTRATION</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> rttr;</span><br><span class=\"line\">\tregistration::class_&lt;InnerClass&gt;(<span class=\"string\">&quot;InnerClass&quot;</span>)</span><br><span class=\"line\">\t\t.constructor&lt;&gt;()</span><br><span class=\"line\">\t\t(</span><br><span class=\"line\">\t\t\trttr::policy::ctor::as_raw_ptr <span class=\"comment\">// Construct as raw pointer instead of shared for simplicity&#x27;s sake</span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\t.property(<span class=\"string\">&quot;data&quot;</span>, &amp;InnerClass::data)</span><br><span class=\"line\">\t\t.property(<span class=\"string\">&quot;floatdata&quot;</span>, &amp;InnerClass::floatdata)</span><br><span class=\"line\">\t;</span><br><span class=\"line\"></span><br><span class=\"line\">    registration::class_&lt;OuterClass&gt;(<span class=\"string\">&quot;OuterClass&quot;</span>)</span><br><span class=\"line\">\t\t.constructor&lt;&gt;()</span><br><span class=\"line\">\t\t(</span><br><span class=\"line\">\t\t\trttr::policy::ctor::as_raw_ptr <span class=\"comment\">// Construct as raw pointer instead of shared for simplicity&#x27;s sake</span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\t.property(<span class=\"string\">&quot;innerClass&quot;</span>, &amp;OuterClass::innerClass)</span><br><span class=\"line\">\t\t.property(<span class=\"string\">&quot;c_string&quot;</span>, &amp;OuterClass::c_string)</span><br><span class=\"line\">\t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Writing-the-serialization-code\"><a href=\"#Writing-the-serialization-code\" class=\"headerlink\" title=\"Writing the serialization code\"></a>Writing the serialization code</h4><p>Lets begin by taking in a name and a instance (reference) of the object.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Kickstart function</span></span><br><span class=\"line\"><span class=\"function\">JSON <span class=\"title\">ToJson</span><span class=\"params\">(rttr::instance obj, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    JSON writer;</span><br><span class=\"line\">    ToJSonRecur(obj, writer[name]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Improvements-to-fundemental-type-detection\"><a href=\"#Improvements-to-fundemental-type-detection\" class=\"headerlink\" title=\"Improvements to fundemental type detection\"></a>Improvements to fundemental type detection</h5><p>I was stuck here for a long time figuring out how wrangle the conversions between instances and variants and serialization. In the end, I implemented a function dedicated to writing variants, and then another function for writing basic types. Both of these work with a “white list”; that is if the function detects it cannot be serialized and return false.</p>\n<p>Lets take a look at the recursive function from before.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// !Passing something that isn&#x27;t supposed to be written as a Json Object will have issues</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ToJsonRecur</span><span class=\"params\">(rttr::instance obj, JSON&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(WriteFundamentalType(obj, writer))</span><br><span class=\"line\">    rttr::instance localObj;</span><br><span class=\"line\">    <span class=\"comment\">// Get the type of the object if it is a wrapper</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.get_type().get_raw_type().is_wrapper())</span><br><span class=\"line\">        localObj = obj.get_wrapped_instance();</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        localObj = obj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get the property list while dealing with polymorphism derived type</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> prop_list = obj.get_derived_type().get_properties();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Iterate through the property list</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> prop : prop_list)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Get the value of the property</span></span><br><span class=\"line\">        rttr::variant prop_value = prop.get_value(obj);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!prop_value)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">// cannot serialize, because we cannot retrieve the value</span></span><br><span class=\"line\">        <span class=\"comment\">// Get the name of the property</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> name = prop.get_name();</span><br><span class=\"line\">        <span class=\"comment\">// Attempt to write the variant</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!VariantSerializer(prop_value, writer[name.data()]))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">&quot;cannot serialize property: &quot;</span> &lt;&lt; name &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Example use case</span></span><br><span class=\"line\">OuterClass foo;</span><br><span class=\"line\">JSON writer;</span><br><span class=\"line\">ToJsonRecur(foo, <span class=\"string\">&quot;foo&quot;</span>, writer);</span><br></pre></td></tr></table></figure>\n<p>The biggest difference is the use of rttr::instance as the object. This was chosen for the simple interface given. For some weird reason I <strong>could not</strong> convert an instance to a variant. It might make more sense to pass in a variant in that sense since variants have more functionality, but its also a copy which can be expensive. </p>\n<p>This choice removed the possibility of checking whether the instance is a fundamental type, and all the checking for the the maps before we split it up. This actually helped writing the code in a certain way because I could seperate the code more clearly from an RTTR perspective.</p>\n<p>A second issue that came up was how to abstract the fundamental type seriailization detection out. In the end, I opted for a function that will attempt to serialize the object as a fundamental type, and if it fails it will return false. We will then test if it is any of the data containers, and then check how many properties the object has. If there it has  properties, then we can serialize it as a jsonObj.</p>\n<p>So the plan is to deal with each RTTR abstraction at each level appropriately.<br><img src=\"/images/Reflection-Serializer/serialize_new_plan.png\" alt=\"The new plan\"></p>\n<p>And a fleshed out detail of the plan is on this image.   </p>\n<p><img src=\"/images/Reflection-Serializer/serialize_detail.png\" alt=\"The new plan with detail\"></p>\n<p>With the new algorithm, WriteVariant() is the crux of it all. It attempts to write the object, and if it can’t have several fallbacks, and at the end of it will either return true or fail. Failing means a case we haven’t dealt with yet(pointers for example).</p>\n<p>Another side-effect of this version of the algorithm is that we can only kick off the serialization function if the object we’re passing in has properties. Meaning the type has to be a jsonObj. However, we can easily use WriteVariant() as the entry point if required.</p>\n<blockquote>\n<p>Learning Point: Typically, serialization code is paired with deserialization code. Hence the simpler your serialization code, the easier it will be to write your deserialization. For my engine code, I did my own serialization of many glm types, like glm::vec3, early on and this came back to haunt me as I had to keep creating edge cases for detecting a glm::vec3 in my deserialization code. Keep it simple, less things to worry about when writing deserialization.</p>\n</blockquote>\n<h4 id=\"C-code\"><a href=\"#C-code\" class=\"headerlink\" title=\"C++ code\"></a>C++ code</h4><p>Headed back to the code, lets show the changed toJsonRecur().</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">toJsonRecursive</span><span class=\"params\">(<span class=\"keyword\">const</span> instance&amp; obj, json&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Dealing with wrapped objects</span></span><br><span class=\"line\">    instance localObj;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.get_type().get_raw_type().is_wrapper())</span><br><span class=\"line\">        localObj = obj.get_wrapped_instance()</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        localObj = obj;</span><br><span class=\"line\">    <span class=\"comment\">// Handling pointer polymorphism cases</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> prop_list = obj2.get_derived_type().get_properties();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> prop : prop_list)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Retrieving value from property</span></span><br><span class=\"line\">        variant prop_value = prop.get_value(obj2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!prop_value)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">// cannot serialize, because we cannot retrieve the value</span></span><br><span class=\"line\">        <span class=\"comment\">// Retrieve name of property</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> name = prop.get_name();</span><br><span class=\"line\">        <span class=\"comment\">// Serialize value of property using name</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!WriteVariant(prop_value, writer[name.data()]))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">&quot;Failed to serialize&quot;</span> &lt;&lt; name &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Pretty much the same thing as the initial algorithm, except without all the checking. The checking has now moved to WriteVariant(), and here is the crux of the algorithm.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">WriteVariant</span><span class=\"params\">(<span class=\"keyword\">const</span> variant&amp; var, json&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Deal with wrapped type</span></span><br><span class=\"line\">    variant localVar = var;</span><br><span class=\"line\">    type varType = var.get_type();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(varType.is_wrapper())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        varType = varType.get_wrapped_type();</span><br><span class=\"line\">        localVar = localVar.extract_wrapped_value();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (AttemptWriteFundementalType(varType, localVar, writer))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Successful write!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// If its not a fundamental, is it a sequential?</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var.is_sequential_container())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        WriteArray(var.create_sequential_view(), writer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Is it associative</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var.is_associative_container())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        WriteAssociativeContainer(var.create_associative_view(), writer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Not a fundemental, or a container. Check if its an object</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> child_props = varType.get_properties();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!child_props.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// We have properties, thus we can be serialized as an object</span></span><br><span class=\"line\">            toJsonRecursive(var, writer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Assert</span></span><br><span class=\"line\">            <span class=\"comment\">// Some unknown type that is not a fundamental, has no properties, and is not a data structure</span></span><br><span class=\"line\">            <span class=\"comment\">// Probably some registration issue</span></span><br><span class=\"line\">            <span class=\"comment\">// Or its a pointer! I handled pointers in here my game code</span></span><br><span class=\"line\">            assert(<span class=\"string\">&quot;Unknown RTTR serilization edge case that we haven&#x27;t discovered&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I moved the data container checking and writing of fundamental types here. Pretty self-explanatory stuff here. The only thing really worth mentioning is that I had to create a *_container view to view the container for WriteArray() and WriteAssociativeContainer().</p>\n<p>Now lets take a look at the writing of fundamental types. One benefit here is that if we have more fundamental types to handle we can just put it in this function.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">AttemptWriteFundementalType</span><span class=\"params\">(<span class=\"keyword\">const</span> type&amp; t, <span class=\"keyword\">const</span> variant&amp; var, json&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Json Number</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t.is_arithmetic())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">bool</span>&gt;())</span><br><span class=\"line\">            writer = var.to_bool();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">char</span>&gt;())</span><br><span class=\"line\">            writer = var.to_bool();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">int</span>&gt;())</span><br><span class=\"line\">            writer = var.to_int();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">uint64_t</span>&gt;())</span><br><span class=\"line\">            writer = var.to_uint64();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">float</span>&gt;())</span><br><span class=\"line\">            writer = var.to_double();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">double</span>&gt;())</span><br><span class=\"line\">            writer = var.to_double();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Enumeration as string</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t.is_enumeration())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> ok = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// Attempt to serialize as string</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> result = var.to_string(&amp;ok);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ok)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            writer = var.to_string();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Attempt to serialize as number</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> value = var.to_uint64(&amp;ok);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ok)</span><br><span class=\"line\">                writer = <span class=\"keyword\">uint64_t</span>(value);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                writer = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Strings!</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt;())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        writer = var.to_string();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Not a fundamental type we know how to process</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Notice that this function doesn’t expect itself to handle all sorts of weird stuff like pointers, wrappers, or anything like that. Its very much a <strong>“If you have these I will serialize it. If not then good bye.”</strong></p>\n<p>As for the associative and sequential containers:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteArray</span><span class=\"params\">(<span class=\"keyword\">const</span> variant_sequential_view&amp; view, json&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Init array</span></span><br><span class=\"line\">    writer = json::<span class=\"built_in\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span>&amp; item : view)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        WriteVariant(item, writer[i]);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteAssociativeContainer</span><span class=\"params\">(<span class=\"keyword\">const</span> variant_associative_view&amp; view, json&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> string_view <span class=\"title\">key_name</span><span class=\"params\">(<span class=\"string\">&quot;key&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> string_view <span class=\"title\">value_name</span><span class=\"params\">(<span class=\"string\">&quot;value&quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    writer = json::<span class=\"built_in\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Dealing with keys = values containers like sets</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (view.is_key_only_type())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; item : view)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            WriteVariant(item.first, writer[i]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; item : view)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            WriteVariant(item.first, writer[i][key_name.data()]);</span><br><span class=\"line\">            WriteVariant(item.second, writer[i][value_name.data()]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>You usually have to pair a serialization function with a deserialization function, but with this the base is setup such that it’ll be easier to do deserialization. If I have time, I’ll talk about how to deserialize from the json file to memory; its not particularly hard now that we have a good base setup.</p>\n<p>I hope this helps description will help someone in the future doing something similar and avoid the pains I had to trod through.</p>\n<p>With that this is the end of this small write up. I did not come up with the entire thing myself; I had to do quite a lot of research and looking up and seeing other people’s code before coming to this solution. RTTR has its own example of how to do json serialization, and it was from their code that I solved the issues with instances and variants. </p>\n<p><a href=\"https://github.com/ShumWengSang/Reflection-Json-Serializer\">Here</a> is the Github link to the source code used for examples here.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n<h2 id=\"About-the-Author\"><a href=\"#About-the-Author\" class=\"headerlink\" title=\"About the Author\"></a>About the Author</h2><p>Roland Shum: Engine Developer</p>\n<p>I am a Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.</p>\n<p><a href=\"https://store.steampowered.com/search/?developer=Handshake%20Firm\">Here</a> are some games I have worked on and published:</p>\n<p><img src=\"/images/TerrainGeneration/ArcApellago.jpg\" alt=\"ArcApellago\"><br><img src=\"/images/TerrainGeneration/DeltaBlade2700.jpg\" alt=\"DeltaBlade2700\"></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Arc Apellago was a year-long game project that I worked together with several members of the team. Its an action platformer with a focus on dash-attack and jumping around to get to the end of the level. We developed a C++ custom engine from scatch, integrating our own libraries and then using that engine to develop the game.</p>\n<p>Parts of the engine I worked on</p>\n<ul>\n<li>Integration of <a href=\"https://www.rttr.org/\">Real Time Type Reflection (RTTR)</a></li>\n<li><strong><a href=\"https://github.com/nlohmann/json\">JSON</a> serialization using RTTR</strong></li>\n<li><a href=\"https://github.com/ocornut/imgui\">ImGui</a> Engine GUI generation using RTTR</li>\n<li>Designing archetypes for entities</li>\n</ul>\n<p>In addition, I worked on the game as well</p>\n<ul>\n<li>Visual effects</li>\n<li>Post processing effects</li>\n<li>Player feedback</li>\n</ul>\n<p>And things outside of the engine</p>\n<ul>\n<li>Configuring a student Azure VM to build our game on every push<ul>\n<li>CI / CD</li>\n</ul>\n</li>\n<li>Configuring a student Amazon Web Service (AWS) VM to automatically sync the school’s git repo to our internal private git server</li>\n<li>Tracked and scoped technical tasks as part of co-producer work and making sure everyone’s workflow was smooth</li>\n</ul>\n<p>Today I’ll be talking about what I used RTTR for in the game engine; mainly for integrating <strong>JSON serialization</strong>. I will be describing a simplified version of what I did and omitting long talks into the many mistakes I’ve made; I’ll only point out my mistakes from time to time. <strong>I hope this will be useful for people trying to thread on the same path I did.</strong> </p>\n<h2 id=\"What-are-you-talking-about\"><a href=\"#What-are-you-talking-about\" class=\"headerlink\" title=\"What are you talking about?\"></a>What are you talking about?</h2><p>So essentially what I did was</p>\n<ol>\n<li>Integrate reflection library (RTTR)</li>\n<li>Integrate JSON reading and writing data</li>\n<li><strong>For serialization</strong><ul>\n<li><strong>Use reflection to generate the JSON object</strong></li>\n<li><strong>Use JSON object and JSON library to write to file</strong></li>\n</ul>\n</li>\n<li>For deserialization<ul>\n<li>Read JSON from file to read JSON object</li>\n<li>Use JSON object to read achetypes</li>\n</ul>\n</li>\n<li>Use reflection data to generate editor GUIs for modifying values at runtime</li>\n</ol>\n<p>This blog will be focused on json serialization with reflection.</p>\n<h3 id=\"What-is-reflection\"><a href=\"#What-is-reflection\" class=\"headerlink\" title=\"What is reflection\"></a>What is reflection</h3><p>Reflection is the ability to inspect, modify, and call methods at runtime. Imagine being able to inspect your type of object, and getting information about it.</p>\n<p><img src=\"/images/Reflection-Serializer/CPPStruct.png\" alt=\"MyStruct\"></p>\n<p>Essentially, you can get a MyStructType that describes “Hey I have a string name, an int data, a float bigNumber, and two methods. My name is ‘MyStruct’”.</p>\n<h3 id=\"Why-did-you-need-reflection\"><a href=\"#Why-did-you-need-reflection\" class=\"headerlink\" title=\"Why did you need reflection?\"></a>Why did you need reflection?</h3><p>So my team and I were thinking about serialization, and we realized we did not have much experience with it. </p>\n<p>My goals for the serialization system</p>\n<ul>\n<li>Be able to serialize any type of object to json with a common interface</li>\n<li>Read archetypes from json files</li>\n<li>Programmers do not need to write serialization code<ul>\n<li>Fully abstracted and written for them, unless specified</li>\n<li><strong>This will save up to 1/3 of the time writing a script!</strong></li>\n</ul>\n</li>\n</ul>\n<p>In order to achieve the last goal, the only realistic way I could think of was to use a reflection system. I can iterate through an objects properties (picture above) and turn it into JSON something below.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;MyStruct&quot;</span> : &#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span> : <span class=\"string\">&quot;Instance Name&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;data&quot;</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;bigNumber&quot;</span> : <span class=\"number\">2.0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Goals-and-Constraints\"><a href=\"#Goals-and-Constraints\" class=\"headerlink\" title=\"Goals and Constraints\"></a>Goals and Constraints</h1><p>For the serializer to function, I constructed the system with several things in mind.</p>\n<ul>\n<li>Entity archetype saving and loading to Json</li>\n<li>Abstracted from gameplay programmers<ul>\n<li>Scripts don’t have to care about serializing</li>\n</ul>\n</li>\n<li>Json file is readable to humans<ul>\n<li>Designer can modify from json file</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Learning point:<br>The above seems good right? This was actually a <strong>bad</strong> set of goals. One major thing I overlooked was <strong>saving and loading from a scene</strong>. I also screwed up thinking that the <strong>designer modifying from the json file</strong> is a good thing. You want a tool for that instead.</p>\n</blockquote>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><p>I started working on the json integration first as I wanted to fullfill the Course’s requirement on serialization first, and then do the reflection and GUI as an add on.</p>\n<blockquote>\n<p>Learning point: In hindsight, while in the short term this was the right decision,the long term was a bad one. Anyone can see once laid out that I should have worked with RTTR first, and then wrote the serializer and gui generator with it as a dependancy. Because of this mistake, I was straddled with legacy code that I had to write around.</p>\n</blockquote>\n<h2 id=\"Serializer-1-0\"><a href=\"#Serializer-1-0\" class=\"headerlink\" title=\"Serializer 1.0\"></a>Serializer 1.0</h2><p>The following is the diagram describing the serializer.</p>\n<p><img src=\"/images/Reflection-Serializer/serializermap.png\" alt=\"Mind map of serializer\"></p>\n<p>At 1.0, the goal was to get serialization working ASAP and getting past the grading requirments for it. I used the simplest method I know.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sample object</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Vector3</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> x, y, z;</span><br><span class=\"line\">    <span class=\"function\">JSON <span class=\"title\">Serialize</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        JSON j;</span><br><span class=\"line\">        j[<span class=\"string\">&quot;x&quot;</span>] = x;</span><br><span class=\"line\">        j[<span class=\"string\">&quot;y&quot;</span>] = y;</span><br><span class=\"line\">        j[<span class=\"string\">&quot;z&quot;</span>] = z;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Vector3 <span class=\"title\">Deserialize</span><span class=\"params\">(JSON&amp; json)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Vector3 vec;</span><br><span class=\"line\">        vec.x = json[<span class=\"string\">&quot;x&quot;</span>];</span><br><span class=\"line\">        vec.y = json[<span class=\"string\">&quot;y&quot;</span>];</span><br><span class=\"line\">        vec.z = json[<span class=\"string\">&quot;z&quot;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Serializer</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">    <span class=\"function\">JSON <span class=\"title\">SerializeToJSON</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; obj)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.Serialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">DeserializeFromJSON</span><span class=\"params\">(JSON&amp; json)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> T::Deserialize(json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// somewhere in code</span></span><br><span class=\"line\">Vector3 dir = &#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">JSON j = Serializer::SerializeToJSON(dir);</span><br><span class=\"line\">save_to_file(j, <span class=\"string\">&quot;dir.json&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>There were mainly two ways I saw to go with this</p>\n<ol>\n<li>Use a template like what I am doing and call Serialize(). If T doesn’t have this method compilation will fail.</li>\n<li>All types inherit ISerializble, and then use polymorphism.</li>\n</ol>\n<p>I went with option 1) because we were using glm::vec3 types and did not want to write an abstraction layer over them. Virtual functions also cause a cache miss, so I didn’t want to lose out on performance.</p>\n<blockquote>\n<p>Learning Point: The cache miss point was totally irrelevant. It would never have mattered since the perf I saved was so small. Furthermore, a bunch of these small code and legacy Json files became a massive headache later on development when I refused to just delete them. I should have called a team meeting and insist on removing the legacy code and data instead of putting two different architechture types together</p>\n</blockquote>\n<blockquote>\n<p>Pondering Point: Should I have written an abstraction over glm (math library)? Common practice lean towards writing abstractions over every library you import, but a lot of glm functions only work because they expect glm functions. Writing our own abstraction just meant writing boilerplate code over the glm ones, and that seemed like a waste of time since we don’t plan on using another math library.</p>\n</blockquote>\n<h2 id=\"Serializer-2-0\"><a href=\"#Serializer-2-0\" class=\"headerlink\" title=\"Serializer 2.0\"></a>Serializer 2.0</h2><p>You may notice that the serializer 1.0 <em>does nothing</em>. It only gives ensures common interface of T (to have a method called Serialize()).<br><strong>Currently the object is responsibly for <em>how</em> it serializes itself, what we want is for the <em>serializer</em> to be responsible for that.</strong></p>\n<p>What we currently have:<br><img src=\"/images/Reflection-Serializer/serializer_before.png\" alt=\"Serializer 1.0\"></p>\n<p>But what we really want is:<br><img src=\"/images/Reflection-Serializer/serialize-after.png\" alt=\"Serializer 2.0\"></p>\n<p>I’ll now walk through a simplified version of my Serializer 2.0 and explain the thought process behind it. </p>\n<p>There are 3 main ideas crucial to bringing the initial algorithm together.</p>\n<ol>\n<li>Deconstructing a user-defined data type</li>\n<li>Understanding how things should be on the JSON side</li>\n<li>Dealing with pointers, data structures, and containers</li>\n</ol>\n<p>And after that I had to modify the algorithm to work with RTTR library. Lets drive right in.</p>\n<h3 id=\"Deconstructing-a-user-defined-data-type\"><a href=\"#Deconstructing-a-user-defined-data-type\" class=\"headerlink\" title=\"Deconstructing a user-defined data type\"></a>Deconstructing a user-defined data type</h3><p>Every type in C++ can be deconstructed to its fundamental types of int, char, pointer, etc.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InnerClass</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> floatdata;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">OuterClass</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    InnerClass innerClass;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * c_string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">// Outerclass can be deconstructed into</span></span><br><span class=\"line\">OuterClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> floatdata;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* c_string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>So the plan is to deconstruct a type <em>as much as possible</em>. Hence the general algorithm I used is</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># version 1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Serialize</span>(<span class=\"params\">obj</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> obj <span class=\"keyword\">is</span> a basic type</span><br><span class=\"line\">        serialize data <span class=\"keyword\">as</span> one of the basic types</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> each property on obj:</span><br><span class=\"line\">            Serialize(property)</span><br></pre></td></tr></table></figure>\n\n<p>Seems simple for now! Notice that I passed over what it means to be a basic type. While we understand in C++ those data types, what are the fundamental basic types in JSON? </p>\n<h3 id=\"Examining-the-JSON-side\"><a href=\"#Examining-the-JSON-side\" class=\"headerlink\" title=\"Examining the JSON side\"></a>Examining the JSON side</h3><p>Json has five data types</p>\n<ol>\n<li>Number<ul>\n<li>No distinction between floats and ints and unsigned etc</li>\n</ul>\n</li>\n<li>String</li>\n<li>Boolean</li>\n<li>Array</li>\n<li>Object<ul>\n<li>Collection of name-value pairs</li>\n</ul>\n</li>\n<li>null<ul>\n<li>empty</li>\n</ul>\n</li>\n</ol>\n<p>Given these data types, it makes sense to store C++ user defined types as objects, and they would in turn recursively store things until its either </p>\n<ol>\n<li>A number</li>\n<li>A string</li>\n<li>A boolean</li>\n<li>Or an array</li>\n</ol>\n<p>I used the property name as the key, and the object itself as the value. This seemed most intuitive. You might notice that ‘A number’ doesn’t describe the wide range of data types that can represent a number in C++. Thankfully, most JSON libraries can handle this. Thus when serialized OuterClass would look like </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;OuterClass&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;innerClass&quot;</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;data&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;floatdata&quot;</span>: <span class=\"number\">0.0</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;c_string&quot;</span> : <span class=\"string\">&quot;cstring&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>Learning Point: One of the goals were to have the designer change the data from the json file. Thus I wanted the json file to be “human readable”. This in turn led to some very poor choices like serializing Vec3 as an array of 3 floats etc. These edge cases piled up instantly and made my deseriailization work a mess. If I were to do this again I would just try to write the base code as intuitively (for a programmer) as possible, and then write a tool to modify  the json file.</p>\n</blockquote>\n<p>Take note that this was the <em>final</em> output that I have decided on. During the course of developement, there were three different outputs that I tried, and I finally settled on keeping the algorithm clean instead.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Version 2</span></span><br><span class=\"line\"><span class=\"comment\"># Kickoff function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Serialize</span>(<span class=\"params\">obj, name</span>):</span></span><br><span class=\"line\">    JSON jsonObj</span><br><span class=\"line\">    SerializeRecur(obj, jsonObj[name])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonObj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Arg0: object we want to serialize</span></span><br><span class=\"line\"><span class=\"comment\"># Arg1: json object to add onto</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">SerializeRecur</span>(<span class=\"params\">obj, jsonObj</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> obj <span class=\"keyword\">is</span> a basic type</span><br><span class=\"line\">        SerializeBasicType(obj, jsonObj[obj.name()])</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> each property on obj:</span><br><span class=\"line\">            SerializeRecur(property, jsonObj[property.name()])</span><br><span class=\"line\"></span><br><span class=\"line\">// Possible usage</span><br><span class=\"line\">Outerclass outerClass</span><br><span class=\"line\">Serialize(outerClass, <span class=\"string\">&quot;OuterClass&quot;</span>) </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>The mentioned three different versions of output became a long lasting pain. I could never easily refactor my code without totally busting the previous versions. In hindsight, I should have gotten rid of them ASAP and swapped to the newer versions. Also, I should have given my Json files a version number to keep track of which version of the loader I was using. That way I could have kept my code clean instead of integrating them all into Frankenstien. </p>\n</blockquote>\n<h3 id=\"Dealing-with-C-’ness’-issues\"><a href=\"#Dealing-with-C-’ness’-issues\" class=\"headerlink\" title=\"Dealing with C++’ness’ issues\"></a>Dealing with C++’ness’ issues</h3><p>I’ve explained the very high level general algorithm of deconstructing a C++ type into its base type, and how I translated that into JSON file. When it comes to the dirt though, there are lots of weird C++ issues to deal with, and I’m glad I used RTTR as a library instead of writing my own reflection system to deal with them.</p>\n<p>This part really consists of deconstructing what it means to be a <em>fundamental type in the context of serialization</em>. </p>\n<h4 id=\"Dealing-with-polymorphism\"><a href=\"#Dealing-with-polymorphism\" class=\"headerlink\" title=\"Dealing with polymorphism\"></a>Dealing with polymorphism</h4><p>Heres an example of some very reasonable code that would break our current algorithm.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Base</span> &#123;</span> RTTR_ENABLE() &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Middle</span> :</span> Base &#123; RTTR_ENABLE(Base) &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Derived</span> :</span> Middle &#123; RTTR_ENABLE(Middle) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Foo</span> &#123;</span> Base* bar = <span class=\"literal\">nullptr</span>;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo foo;</span><br><span class=\"line\">Derived derived;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.bar = &amp;derived;</span><br><span class=\"line\"><span class=\"comment\">// How do we serialize Derived when we have a pointer to Bar?</span></span><br></pre></td></tr></table></figure>\n<p>Polymorphism! And pointers! Pointers are a base data type, how do we deal with it? On the topic of pointers, what if it was a <em>shared</em> pointer? </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Foo</span> &#123;</span><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;Derived&gt; ptr;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo foo;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;Derived&gt; instance = <span class=\"built_in\">std</span>::make_shared&lt;Derived&gt;();</span><br><span class=\"line\">foo.ptr = instance;</span><br><span class=\"line\"><span class=\"comment\">// How do we deal with this??</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>At the start of the project, we were avoiding shared pointers because we were not doing multithreading and did not think we would need to manage our objects. This turns out to be completely false assumption when we realized our game code had behavior that references other behaviors. This caching became a classic dangling pointer problem. We only noticed this problem a quater of the way through the project, and decided to convert to smart pointers rather then deal with implementing some sort wrapper that acheived the same thing but specific to our engine. There was also a discussion about getting all the references every frame, but that was thrown out once we realized some behaviors <em>needed</em> references, like AIs need to know player and the search isn’t cheap.</p>\n</blockquote>\n<p>So lets revisit our high level algorithm, and modify it. We need to deal with getting, as RTTR defines it, the <em>raw type</em> of our object. A raw type is a type <em>without any qualifiers</em> (const, volatile, etc) nor any pointer.<br>After that, we need to detect if it is a shared_ptr, or something that wraps a value. Luckily, RTTR provides <a href=\"https://www.rttr.org/doc/master/classrttr_1_1type.html#ad17345a59c8e3cc8a754eb4ec124581e\">functionality</a> that detects if a type is a wrapper type. </p>\n<p>As for getting the derived type of a pointer, RTTR deals with that for us with <a href=\"https://www.rttr.org/doc/master/classrttr_1_1instance.html#ab30381b954f8d8abc2da9c5162fb130d\">get_derived_type()</a>.</p>\n<p>I’ll also swap the pseudocode for checking base type for an rttr function <a href=\"https://www.rttr.org/doc/master/classrttr_1_1type.html#a8bd100682c9b846f6da1c5c9fb96f8c6\">is_class()</a>.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Version 3</span></span><br><span class=\"line\"><span class=\"comment\"># Here I&#x27;m working in psuedo code with RTTR API</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kickstart function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Serialize</span>(<span class=\"params\">obj, name</span>):</span></span><br><span class=\"line\">    JSON jsonObj</span><br><span class=\"line\">    SerializeRecur(obj, jsonObj[name])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonObj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Arg0: object we want to serialize</span></span><br><span class=\"line\"><span class=\"comment\"># Arg1: json object to add onto</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">SerializeRecur</span>(<span class=\"params\">obj, jsonObj</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># If object is a fundemental C++ type, we&#x27;ll go straight to writing it</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> obj.is_class()</span><br><span class=\"line\">        SerializeBasic(obj, jsonObj)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\"># Get the type of the object if it is a wrapper</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> obj.type.get_raw_type().is_wrapper()</span><br><span class=\"line\">            localObj = obj.get_wrapped_instance()</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            localObj = obj</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Deal with pointer issues by going to the derived class</span></span><br><span class=\"line\">        derivedType = localObj.get_derived_type()</span><br><span class=\"line\">        <span class=\"comment\"># Get property list from the derived type</span></span><br><span class=\"line\">        var property_list = derivedType.get_properties()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Iterate through the property list</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> var property <span class=\"keyword\">in</span> property_list</span><br><span class=\"line\">            <span class=\"comment\"># Get the value of the property</span></span><br><span class=\"line\">            rttr::variant property_value = property.get_value(localObj)</span><br><span class=\"line\">            <span class=\"comment\"># Keep serializing them based on property name</span></span><br><span class=\"line\">            SerializeRecur(property_value, jsonObj[property.name()])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// Possible usage</span><br><span class=\"line\">Outerclass outerClass</span><br><span class=\"line\">Serialize(outerClass, <span class=\"string\">&quot;OuterClass&quot;</span>) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Dealing-with-arrays-and-data-structures\"><a href=\"#Dealing-with-arrays-and-data-structures\" class=\"headerlink\" title=\"Dealing with arrays and data structures\"></a>Dealing with arrays and data structures</h3><p>Some very useful data structures that we want to serialize are arrays, vectors, and C++ maps (ordered or unordered). Thankfully they have pretty 1 : 1 conversions to JSON data.</p>\n<ul>\n<li>C++ Arrays &lt;-&gt; JSON Arrays</li>\n<li>C++ Vectors &lt;-&gt; JSON Arrays</li>\n<li>C++ Maps &lt;-&gt; JSON Objects</li>\n</ul>\n<p>Even better, RTTR has two methods of identifying containers that cover your STL data containers. <a href=\"https://www.rttr.org/doc/master/classrttr_1_1variant.html#aabe380968e1d9fcd27a2f3e77728b197\">is_associative_container()</a> and <a href=\"https://www.rttr.org/doc/master/classrttr_1_1variant.html#a2d584cf950f15d1a52469b5f042488a3\">is_sequential_container()</a>. <a href=\"https://en.wikipedia.org/wiki/Associative_containers\">Associative containers</a> are like maps, you map one thing to another. <a href=\"https://en.wikipedia.org/wiki/Sequence_container_(C%2B%2B)\">Sequential containers</a> are containers with memories laid out contigiously, like vectors and arrays. According to wikipedia, the current C++ data structures are below.</p>\n<ul>\n<li>Sequential Container<ul>\n<li>Array</li>\n<li>Vector</li>\n<li>List</li>\n<li>Forward_list</li>\n<li>Deque</li>\n</ul>\n</li>\n<li>Associative Container<ul>\n<li>Set</li>\n<li>Map</li>\n<li>Multiset</li>\n<li>Multismap</li>\n</ul>\n</li>\n</ul>\n<p>And so we will have</p>\n<ul>\n<li>C++ Array &lt;-&gt; Sequential Container &lt;-&gt; JSON Array</li>\n<li>C++ Vector &lt;-&gt; Sequential Container &lt;-&gt; JSON Array</li>\n<li>C++ Maps &lt;-&gt; Associative Container &lt;-&gt; JSON Objects</li>\n<li>C++ Hash Maps (Unordered_*) &lt;-&gt; Associative Container &lt;-&gt; JSON Objects</li>\n</ul>\n<p>Which simplifies to</p>\n<ul>\n<li>Sequential Container &lt;-&gt; JSON Array</li>\n<li>Associative Container &lt;-&gt; JSON Objects</li>\n</ul>\n<p>So we will identify if the type of the object is sequential or associative, and if they are we will handle them.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Version 4</span></span><br><span class=\"line\"><span class=\"comment\"># Here I&#x27;m working in psuedo code with RTTR API</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kickstart function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Serialize</span>(<span class=\"params\">obj, name</span>):</span></span><br><span class=\"line\">    JSON jsonObj</span><br><span class=\"line\">    Serialize(obj, jsonObj[name])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonObj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Arg0: object we want to serialize</span></span><br><span class=\"line\"><span class=\"comment\"># Arg1: json object to add onto</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">SerializeRecur</span>(<span class=\"params\">obj, jsonObj</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># If object is a fundemental C++ type, we&#x27;ll go straight to writing it</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> obj.is_class()</span><br><span class=\"line\">        SerializeBasic(obj, jsonObj)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> obj.is_associative_container()</span><br><span class=\"line\">        SerializeAssociativeContainer(obj, jsonObj)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> obj.is_sequential_container()</span><br><span class=\"line\">        SerializeSequentialContainer(obj, jsonObj)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\"># Get the type of the object if it is a wrapper</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> obj.type.get_raw_type().is_wrapper()</span><br><span class=\"line\">            localObj = obj.get_wrapped_instance()</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            localObj = obj</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Deal with pointer issues by going to the derived class</span></span><br><span class=\"line\">        derivedType = localObj.get_derived_type()</span><br><span class=\"line\">        <span class=\"comment\"># Get property list from the derived type</span></span><br><span class=\"line\">        var property_list = derivedType.get_properties()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Iterate through the property list</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> var property <span class=\"keyword\">in</span> property_list</span><br><span class=\"line\">            <span class=\"comment\"># Get the value of the property</span></span><br><span class=\"line\">            rttr::variant property_value = property.get_value(localObj)</span><br><span class=\"line\">            <span class=\"comment\"># Keep serializing them based on property name</span></span><br><span class=\"line\">            SerializeRecur(property_value, jsonObj[property.name()])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// Possible usage</span><br><span class=\"line\">Outerclass outerClass</span><br><span class=\"line\">Serialize(outerClass, <span class=\"string\">&quot;OuterClass&quot;</span>) </span><br></pre></td></tr></table></figure>\n<h4 id=\"Sequential-Container-Seriailization\"><a href=\"#Sequential-Container-Seriailization\" class=\"headerlink\" title=\"Sequential Container Seriailization\"></a>Sequential Container Seriailization</h4><p>After detecting whether it is an associative or a sequential container, we have to decide how to serialize it. We’ll start with sequential since thats the simplest. Since sequential maps to Json arrays 1 to 1, this was pretty simple.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">WriteArray</span>(<span class=\"params\">obj, jsonObj</span>):</span></span><br><span class=\"line\">    jsonObj.WriteJsonArray()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> each item <span class=\"keyword\">in</span> obj, <span class=\"keyword\">and</span> counter start <span class=\"keyword\">from</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        WriteVariant(item, writer[counter])</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;array&quot;</span> : [</span><br><span class=\"line\">        a,</span><br><span class=\"line\">        b,</span><br><span class=\"line\">        c</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Associative-Container\"><a href=\"#Associative-Container\" class=\"headerlink\" title=\"Associative Container\"></a>Associative Container</h4><p>This one is a <em>bit</em> more complicated. We want to store both key and value, and we know our object will have multiple key and value. So lets use a json array to indicate all the key-pair values as json objects. </p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">WriteAssociative</span>(<span class=\"params\">obj, jsonObj</span>):</span></span><br><span class=\"line\">    jsonObj.WriteJsonArray()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> each item <span class=\"keyword\">in</span> obj, <span class=\"keyword\">and</span> counter start <span class=\"keyword\">from</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        WriteVariant(item.first, writer[i][<span class=\"string\">&quot;Key&quot;</span>])</span><br><span class=\"line\">        WriteVariant(item.second, writer[i][<span class=\"string\">&quot;Value&quot;</span>])</span><br></pre></td></tr></table></figure>\n<p>and we’re expecting something like this.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dictionary&quot; : [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;x&quot;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;y&quot;</span>: <span class=\"number\">6</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span>: <span class=\"string\">&quot;green&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;x&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;y&quot;</span>: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Wrangling-RTTR\"><a href=\"#Wrangling-RTTR\" class=\"headerlink\" title=\"Wrangling RTTR\"></a>Wrangling RTTR</h3><p>It was hard working with a library where I had no idea how it internally works. Let me explain some of the main concepts of RTTR that I had trouble understanding at first. This section will detail mainly how I coded the above psuedocodes in a C++ manner.</p>\n<ul>\n<li><a href=\"https://www.rttr.org/doc/master/classrttr_1_1instance.html\">Instance</a><ul>\n<li>Holds a reference to the given object.</li>\n<li>Think of it as a std::any&lt;T&amp;&gt;</li>\n</ul>\n</li>\n<li><a href=\"https://www.rttr.org/doc/master/register_variant_page.html\">Variant</a><ul>\n<li>Return value for properties and methods</li>\n<li>Content is <em><strong>copied</strong></em> over to new instance of content</li>\n<li>Think of it as a std::any<T></li>\n</ul>\n</li>\n<li><a href=\"https://www.rttr.org/doc/master/register_properties_page.html\">Properties</a><ul>\n<li>Pretty straight forward</li>\n</ul>\n</li>\n<li><a href=\"https://www.rttr.org/doc/master/register_policies_page.html\">Policies</a><ul>\n<li>Control how RTTR creates your object</li>\n<li>This matters when the code starts running too slow</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>One of the weirder things about the RTTR library is how <em>different</em> and how <em>little</em> an instance provides over a variant. I would expect an instance to have just as much to offer as a variant in terms of interface. It seems strange that I would need to copy an object anytime I wanted to query more information on it.</p>\n</blockquote>\n<blockquote>\n<p>Also this sets a constraint that you need to use assignment operators for whatever you’re serializing. And default constructors for compatibility with sequential and associative containers.</p>\n</blockquote>\n<p>With those in mind, lets get to writing actual C++ code and we’ll start with registering our class with RTTR</p>\n<h4 id=\"Registration\"><a href=\"#Registration\" class=\"headerlink\" title=\"Registration\"></a>Registration</h4><p>This part is pretty straightforward, do it in the CPP with a couple of macros from RTTR. Here, we register InnerClass with properties innerClass and c_string. After that we register InnerClass with data and floatdata.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RTTR_REGISTRATION</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> rttr;</span><br><span class=\"line\">\tregistration::class_&lt;InnerClass&gt;(<span class=\"string\">&quot;InnerClass&quot;</span>)</span><br><span class=\"line\">\t\t.constructor&lt;&gt;()</span><br><span class=\"line\">\t\t(</span><br><span class=\"line\">\t\t\trttr::policy::ctor::as_raw_ptr <span class=\"comment\">// Construct as raw pointer instead of shared for simplicity&#x27;s sake</span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\t.property(<span class=\"string\">&quot;data&quot;</span>, &amp;InnerClass::data)</span><br><span class=\"line\">\t\t.property(<span class=\"string\">&quot;floatdata&quot;</span>, &amp;InnerClass::floatdata)</span><br><span class=\"line\">\t;</span><br><span class=\"line\"></span><br><span class=\"line\">    registration::class_&lt;OuterClass&gt;(<span class=\"string\">&quot;OuterClass&quot;</span>)</span><br><span class=\"line\">\t\t.constructor&lt;&gt;()</span><br><span class=\"line\">\t\t(</span><br><span class=\"line\">\t\t\trttr::policy::ctor::as_raw_ptr <span class=\"comment\">// Construct as raw pointer instead of shared for simplicity&#x27;s sake</span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\t.property(<span class=\"string\">&quot;innerClass&quot;</span>, &amp;OuterClass::innerClass)</span><br><span class=\"line\">\t\t.property(<span class=\"string\">&quot;c_string&quot;</span>, &amp;OuterClass::c_string)</span><br><span class=\"line\">\t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Writing-the-serialization-code\"><a href=\"#Writing-the-serialization-code\" class=\"headerlink\" title=\"Writing the serialization code\"></a>Writing the serialization code</h4><p>Lets begin by taking in a name and a instance (reference) of the object.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Kickstart function</span></span><br><span class=\"line\"><span class=\"function\">JSON <span class=\"title\">ToJson</span><span class=\"params\">(rttr::instance obj, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    JSON writer;</span><br><span class=\"line\">    ToJSonRecur(obj, writer[name]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Improvements-to-fundemental-type-detection\"><a href=\"#Improvements-to-fundemental-type-detection\" class=\"headerlink\" title=\"Improvements to fundemental type detection\"></a>Improvements to fundemental type detection</h5><p>I was stuck here for a long time figuring out how wrangle the conversions between instances and variants and serialization. In the end, I implemented a function dedicated to writing variants, and then another function for writing basic types. Both of these work with a “white list”; that is if the function detects it cannot be serialized and return false.</p>\n<p>Lets take a look at the recursive function from before.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// !Passing something that isn&#x27;t supposed to be written as a Json Object will have issues</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ToJsonRecur</span><span class=\"params\">(rttr::instance obj, JSON&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(WriteFundamentalType(obj, writer))</span><br><span class=\"line\">    rttr::instance localObj;</span><br><span class=\"line\">    <span class=\"comment\">// Get the type of the object if it is a wrapper</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.get_type().get_raw_type().is_wrapper())</span><br><span class=\"line\">        localObj = obj.get_wrapped_instance();</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        localObj = obj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get the property list while dealing with polymorphism derived type</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> prop_list = obj.get_derived_type().get_properties();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Iterate through the property list</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> prop : prop_list)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Get the value of the property</span></span><br><span class=\"line\">        rttr::variant prop_value = prop.get_value(obj);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!prop_value)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">// cannot serialize, because we cannot retrieve the value</span></span><br><span class=\"line\">        <span class=\"comment\">// Get the name of the property</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> name = prop.get_name();</span><br><span class=\"line\">        <span class=\"comment\">// Attempt to write the variant</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!VariantSerializer(prop_value, writer[name.data()]))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">&quot;cannot serialize property: &quot;</span> &lt;&lt; name &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Example use case</span></span><br><span class=\"line\">OuterClass foo;</span><br><span class=\"line\">JSON writer;</span><br><span class=\"line\">ToJsonRecur(foo, <span class=\"string\">&quot;foo&quot;</span>, writer);</span><br></pre></td></tr></table></figure>\n<p>The biggest difference is the use of rttr::instance as the object. This was chosen for the simple interface given. For some weird reason I <strong>could not</strong> convert an instance to a variant. It might make more sense to pass in a variant in that sense since variants have more functionality, but its also a copy which can be expensive. </p>\n<p>This choice removed the possibility of checking whether the instance is a fundamental type, and all the checking for the the maps before we split it up. This actually helped writing the code in a certain way because I could seperate the code more clearly from an RTTR perspective.</p>\n<p>A second issue that came up was how to abstract the fundamental type seriailization detection out. In the end, I opted for a function that will attempt to serialize the object as a fundamental type, and if it fails it will return false. We will then test if it is any of the data containers, and then check how many properties the object has. If there it has  properties, then we can serialize it as a jsonObj.</p>\n<p>So the plan is to deal with each RTTR abstraction at each level appropriately.<br><img src=\"/images/Reflection-Serializer/serialize_new_plan.png\" alt=\"The new plan\"></p>\n<p>And a fleshed out detail of the plan is on this image.   </p>\n<p><img src=\"/images/Reflection-Serializer/serialize_detail.png\" alt=\"The new plan with detail\"></p>\n<p>With the new algorithm, WriteVariant() is the crux of it all. It attempts to write the object, and if it can’t have several fallbacks, and at the end of it will either return true or fail. Failing means a case we haven’t dealt with yet(pointers for example).</p>\n<p>Another side-effect of this version of the algorithm is that we can only kick off the serialization function if the object we’re passing in has properties. Meaning the type has to be a jsonObj. However, we can easily use WriteVariant() as the entry point if required.</p>\n<blockquote>\n<p>Learning Point: Typically, serialization code is paired with deserialization code. Hence the simpler your serialization code, the easier it will be to write your deserialization. For my engine code, I did my own serialization of many glm types, like glm::vec3, early on and this came back to haunt me as I had to keep creating edge cases for detecting a glm::vec3 in my deserialization code. Keep it simple, less things to worry about when writing deserialization.</p>\n</blockquote>\n<h4 id=\"C-code\"><a href=\"#C-code\" class=\"headerlink\" title=\"C++ code\"></a>C++ code</h4><p>Headed back to the code, lets show the changed toJsonRecur().</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">toJsonRecursive</span><span class=\"params\">(<span class=\"keyword\">const</span> instance&amp; obj, json&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Dealing with wrapped objects</span></span><br><span class=\"line\">    instance localObj;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.get_type().get_raw_type().is_wrapper())</span><br><span class=\"line\">        localObj = obj.get_wrapped_instance()</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        localObj = obj;</span><br><span class=\"line\">    <span class=\"comment\">// Handling pointer polymorphism cases</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> prop_list = obj2.get_derived_type().get_properties();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> prop : prop_list)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Retrieving value from property</span></span><br><span class=\"line\">        variant prop_value = prop.get_value(obj2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!prop_value)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">// cannot serialize, because we cannot retrieve the value</span></span><br><span class=\"line\">        <span class=\"comment\">// Retrieve name of property</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> name = prop.get_name();</span><br><span class=\"line\">        <span class=\"comment\">// Serialize value of property using name</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!WriteVariant(prop_value, writer[name.data()]))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">&quot;Failed to serialize&quot;</span> &lt;&lt; name &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Pretty much the same thing as the initial algorithm, except without all the checking. The checking has now moved to WriteVariant(), and here is the crux of the algorithm.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">WriteVariant</span><span class=\"params\">(<span class=\"keyword\">const</span> variant&amp; var, json&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Deal with wrapped type</span></span><br><span class=\"line\">    variant localVar = var;</span><br><span class=\"line\">    type varType = var.get_type();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(varType.is_wrapper())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        varType = varType.get_wrapped_type();</span><br><span class=\"line\">        localVar = localVar.extract_wrapped_value();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (AttemptWriteFundementalType(varType, localVar, writer))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Successful write!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// If its not a fundamental, is it a sequential?</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var.is_sequential_container())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        WriteArray(var.create_sequential_view(), writer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Is it associative</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var.is_associative_container())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        WriteAssociativeContainer(var.create_associative_view(), writer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Not a fundemental, or a container. Check if its an object</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> child_props = varType.get_properties();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!child_props.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// We have properties, thus we can be serialized as an object</span></span><br><span class=\"line\">            toJsonRecursive(var, writer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Assert</span></span><br><span class=\"line\">            <span class=\"comment\">// Some unknown type that is not a fundamental, has no properties, and is not a data structure</span></span><br><span class=\"line\">            <span class=\"comment\">// Probably some registration issue</span></span><br><span class=\"line\">            <span class=\"comment\">// Or its a pointer! I handled pointers in here my game code</span></span><br><span class=\"line\">            assert(<span class=\"string\">&quot;Unknown RTTR serilization edge case that we haven&#x27;t discovered&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I moved the data container checking and writing of fundamental types here. Pretty self-explanatory stuff here. The only thing really worth mentioning is that I had to create a *_container view to view the container for WriteArray() and WriteAssociativeContainer().</p>\n<p>Now lets take a look at the writing of fundamental types. One benefit here is that if we have more fundamental types to handle we can just put it in this function.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">AttemptWriteFundementalType</span><span class=\"params\">(<span class=\"keyword\">const</span> type&amp; t, <span class=\"keyword\">const</span> variant&amp; var, json&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Json Number</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t.is_arithmetic())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">bool</span>&gt;())</span><br><span class=\"line\">            writer = var.to_bool();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">char</span>&gt;())</span><br><span class=\"line\">            writer = var.to_bool();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">int</span>&gt;())</span><br><span class=\"line\">            writer = var.to_int();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">uint64_t</span>&gt;())</span><br><span class=\"line\">            writer = var.to_uint64();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">float</span>&gt;())</span><br><span class=\"line\">            writer = var.to_double();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"keyword\">double</span>&gt;())</span><br><span class=\"line\">            writer = var.to_double();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Enumeration as string</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t.is_enumeration())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> ok = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// Attempt to serialize as string</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> result = var.to_string(&amp;ok);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ok)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            writer = var.to_string();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Attempt to serialize as number</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> value = var.to_uint64(&amp;ok);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ok)</span><br><span class=\"line\">                writer = <span class=\"keyword\">uint64_t</span>(value);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                writer = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Strings!</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t == type::get&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt;())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        writer = var.to_string();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Not a fundamental type we know how to process</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Notice that this function doesn’t expect itself to handle all sorts of weird stuff like pointers, wrappers, or anything like that. Its very much a <strong>“If you have these I will serialize it. If not then good bye.”</strong></p>\n<p>As for the associative and sequential containers:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteArray</span><span class=\"params\">(<span class=\"keyword\">const</span> variant_sequential_view&amp; view, json&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Init array</span></span><br><span class=\"line\">    writer = json::<span class=\"built_in\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span>&amp; item : view)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        WriteVariant(item, writer[i]);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteAssociativeContainer</span><span class=\"params\">(<span class=\"keyword\">const</span> variant_associative_view&amp; view, json&amp; writer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> string_view <span class=\"title\">key_name</span><span class=\"params\">(<span class=\"string\">&quot;key&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> string_view <span class=\"title\">value_name</span><span class=\"params\">(<span class=\"string\">&quot;value&quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    writer = json::<span class=\"built_in\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Dealing with keys = values containers like sets</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (view.is_key_only_type())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; item : view)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            WriteVariant(item.first, writer[i]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; item : view)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            WriteVariant(item.first, writer[i][key_name.data()]);</span><br><span class=\"line\">            WriteVariant(item.second, writer[i][value_name.data()]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>You usually have to pair a serialization function with a deserialization function, but with this the base is setup such that it’ll be easier to do deserialization. If I have time, I’ll talk about how to deserialize from the json file to memory; its not particularly hard now that we have a good base setup.</p>\n<p>I hope this helps description will help someone in the future doing something similar and avoid the pains I had to trod through.</p>\n<p>With that this is the end of this small write up. I did not come up with the entire thing myself; I had to do quite a lot of research and looking up and seeing other people’s code before coming to this solution. RTTR has its own example of how to do json serialization, and it was from their code that I solved the issues with instances and variants. </p>\n<p><a href=\"https://github.com/ShumWengSang/Reflection-Json-Serializer\">Here</a> is the Github link to the source code used for examples here.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckuwd64xy00010bqu8txocms6","tag_id":"ckuwd64ya00030bqu8w0b8oik","_id":"ckuwd64yh000a0bquc9550ntq"},{"post_id":"ckuwd64xy00010bqu8txocms6","tag_id":"ckuwd64yf00060bqucdls75kb","_id":"ckuwd64yh000b0bqu2kdpce3h"},{"post_id":"ckuwd64xy00010bqu8txocms6","tag_id":"ckuwd64yf00070bqudtl86r1o","_id":"ckuwd64yj000d0bqu6o1r8qe1"},{"post_id":"ckuwd64xy00010bqu8txocms6","tag_id":"ckuwd64yg00080bqug6i6b2nq","_id":"ckuwd64yj000e0bqucfxh8ot3"},{"post_id":"ckuwd64yc00040bquasqp2je8","tag_id":"ckuwd64yg00090bqubvt42j6d","_id":"ckuwd64yo000g0bqu2nopdnhk"},{"post_id":"ckuwd64yc00040bquasqp2je8","tag_id":"ckuwd64ya00030bqu8w0b8oik","_id":"ckuwd64yo000h0bquanjfb4dt"},{"post_id":"ckuwd64yd00050bqu5tx14f1d","tag_id":"ckuwd64ya00030bqu8w0b8oik","_id":"ckuwd64yp000i0bqu3mm39mts"},{"post_id":"ckuwd64yd00050bqu5tx14f1d","tag_id":"ckuwd64yj000f0bqu54yo0y9c","_id":"ckuwd64yp000j0bqub2r1aes7"},{"post_id":"ckuwd64yr000k0bqu8cz2fn3z","tag_id":"ckuwd64ys000l0bqu8wx11b3s","_id":"ckuwd64yt000m0bqu8oj4ged9"},{"post_id":"ckuwd64yr000k0bqu8cz2fn3z","tag_id":"ckuwd64ya00030bqu8w0b8oik","_id":"ckuwd64yt000n0bqu2akw44t5"},{"post_id":"ckuwd64z1000o0bqu8f3qaoje","tag_id":"ckuwd64z2000p0bqu94q27wa3","_id":"ckuwd64z3000r0bqu9tifb742"},{"post_id":"ckuwd64z1000o0bqu8f3qaoje","tag_id":"ckuwd64z2000q0bqu3nyufysz","_id":"ckuwd64z3000s0bqubgzrdhzw"},{"post_id":"ckuwd64z1000o0bqu8f3qaoje","tag_id":"ckuwd64ya00030bqu8w0b8oik","_id":"ckuwd64z3000t0bqu3m8m8u5b"}],"Tag":[{"name":"GameDev","_id":"ckuwd64ya00030bqu8w0b8oik"},{"name":"DeltaBlade2700","_id":"ckuwd64yf00060bqucdls75kb"},{"name":"Engine","_id":"ckuwd64yf00070bqudtl86r1o"},{"name":"Core","_id":"ckuwd64yg00080bqug6i6b2nq"},{"name":"ImGUI","_id":"ckuwd64yg00090bqubvt42j6d"},{"name":"UI","_id":"ckuwd64yj000f0bqu54yo0y9c"},{"name":"Unity","_id":"ckuwd64ys000l0bqu8wx11b3s"},{"name":"C++","_id":"ckuwd64z2000p0bqu94q27wa3"},{"name":"GameEngine","_id":"ckuwd64z2000q0bqu3nyufysz"}]}}